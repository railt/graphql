
@import(from: "queries/menu" types: ["Menu"])
@import(from: "queries/documentation" types: ["Documentation"])
@import(from: "queries/user" types: ["User"])

type Authentication {
    """
    Token contains information about the user
    who conducted the authentication operation his rights,
    roles and so on. The token contains the time of life
    and expires in a day.
    """
    token: AuthenticationToken!

    """Information about an authenticated user"""
    user: User!
}

"""
An authentication token provides a scalar type,
which contains an JWT-like token string.
"""
scalar AuthenticationToken

type BillingAccount {
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!
}

type Budget {
    day: Int64!
    total: Int64!
    limitDay: Int64!
    limitTotal: Int64!
}

type Campaign {
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!

    """
    Returns a list of Flights belonging to
    the selected Campaign.
    """
    flights: [FlightInterface!]

    """Human readable object name."""
    name: String!

    """Returns the linked billing account."""
    account: BillingAccount!

    """
    Returns the object which contains a Campaign frequency
    impressions limit.
    """
    frequency: Frequency!

    """..."""
    budget: Budget!

    """..."""
    status: Status!

    """Time of the last show (`last_showtime`) of the campaign"""
    viewedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon

    """..."""
    createdAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    updatedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!
}

"""Scalar DateTime type"""
scalar Carbon

"""
An enumeration that contains a set of valid formats
that are contained in the scalar type CarbonDateTime
"""
enum CarbonFormat {
    """
    ISO-8601 date format.
    Example: `2005-08-15T15:52:01+00:00`
    #
    > Note: This format is an alias of the RFC 3339 specification:
    > ISO8601: https://www.iso.org/iso-8601-date-and-time-format.html
    > RFC3339: https://www.ietf.org/rfc/rfc3339.txt
    """
    ISO8601

    """
    RFC 822 date format.
    Example: `Mon, 15 Aug 05 15:52:01 +0000`
    """
    RFC822

    """
    RFC 850 date format.
    Example: `Monday, 15-Aug-05 15:52:01 UTC`
    """
    RFC850

    """
    RFC 1036 date format.
    Example: `Mon, 15 Aug 05 15:52:01 +0000`
    """
    RFC1036

    """
    RFC 1123 date format.
    Example: `Mon, 15 Aug 2005 15:52:01 +0000`
    """
    RFC1123

    """
    RFC 2822 date format.
    Example: `Mon, 15 Aug 2005 15:52:01 +0000`
    """
    RFC2822

    """
    RFC 3339 date format.
    Example: `2005-08-15T15:52:01+00:00`
    #
    > Note: This format is an alias of the ISO-8601 specification:
    > RFC3339: https://www.ietf.org/rfc/rfc3339.txt
    > ISO8601: https://www.iso.org/iso-8601-date-and-time-format.html
    """
    RFC3339

    """
    RFC 3339 EXTENDED date format.
    In contrast to the usual RFC3339 additionally contains milliseconds.
    Example: `2005-08-15T15:52:01.000+00:00`
    """
    RFC3339_EXTENDED

    """
    RFC 7231 date format.
    Example: `Mon, 15 Aug 2005 15:52:01 GMT`
    """
    RFC7231

    """
    HTTP Cookies date format.
    Example: `Monday, 15-Aug-2005 15:52:01 UTC`
    """
    COOKIE

    """
    Simple DateTime format.
    Example: `2005-08-15 15:52:01`
    """
    DATE_TIME

    """
    Simple Date format.
    Example: `2005-08-15`
    """
    DATE

    """
    Simple Time format.
    Example: `15:52:01`
    """
    TIME

    """
    RSS date format.
    Example: `Mon, 15 Aug 2005 15:52:01 +0000`
    """
    RSS

    """
    World Wide Web Consortium date format.
    Example: `2005-08-15T15:52:01+00:00`
    """
    W3C

    """
    Human readable string.
    Example: `2 days ago`
    """
    HUMAN_READABLE
}

type Creative {
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!
}

"""
A scalar email type that represents a format, like `username@domain`
that allows first-level domains and names other than Latin
(EN_en or EN_us naming conventions).
#
The only requirement for the value is the presence of the `@`
character in the middle of the string value.
"""
scalar Email

type Flight implements FlightInterface {
"""
The Object identifier (inside the system meaningful as `oid`)
uniquely determining the entity within the system.
"""
id: ID!

"""Children"""
children: [SubFlight!]

"""Returns a Campaign belonging to the selected Flight."""
campaign: Campaign

"""Human readable object name."""
name: String!

"""
Returns the object which contains a Campaign frequency
impressions limit.
"""
frequency: Frequency!

"""..."""
budget: Budget!

"""..."""
flags: [FlightFlag!]!

"""..."""
quantity: FlightQuantity!

"""..."""
statistics: Statistics!

"""Time of the last show (`last_showtime`) of the campaign"""
viewedAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon

"""..."""
startedAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon!

"""..."""
endsAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon!

"""..."""
restartedAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon!

"""..."""
createdAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon!

"""..."""
updatedAt(
"""

An argument that matches the date of the time difference.

If a `NULL` is passed (or the value is not passed),
then the current time is taken.

"""
diff: Carbon = null

"""

An argument that provides a format of the given value that
are contained in a CarbonFormat enumeration type

"""
format: CarbonFormat = RFC3339
): Carbon!
}

enum FlightFlag {
    SyncBanners
    UidFreqCap
    OptimizeMinCtr
    ForceBidBilling
    Composite
    ChildTrafficBalance
    Bonus
    LongCtr
    NoAds
}

interface FlightInterface {
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!

    """Returns a Campaign belonging to the selected Flight."""
    campaign: Campaign

    """Human readable object name."""
    name: String!

    """
    Returns the object which contains a Campaign frequency
    impressions limit.
    """
    frequency: Frequency!

    """..."""
    budget: Budget!

    """..."""
    flags: [FlightFlag!]!

    """..."""
    quantity: QuantityInterface!

    """..."""
    statistics: Statistics!

    """Time of the last show (`last_showtime`) of the campaign"""
    viewedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon

    """..."""
    startedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    endsAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    restartedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    createdAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    updatedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!
}

type FlightQuantity implements QuantityInterface {
    value: Int!
    goal: Int!
    midnight: Int!
}

"""Entity impressions frequency limit object"""
type Frequency {
    """Returns a quantitative value for the entity frequency."""
    count: Int!

    """Returns the units of the frequency."""
    interval: FrequencyInterval!
}

"""
A set of units for measuring the
frequency of an entity impressions.
"""
enum FrequencyInterval {
    """Daily frequency interval"""
    DAY

    """Hourly frequency interval"""
    HOUR

    """Weekly frequency interval"""
    WEEK

    """Total frequency interval"""
    TOTAL
}

"""
The `Int64` scalar type represents non-fractional signed whole numeric values.
Int64 can represent values between -(2^63) and 2^63 - 1.
Min: -9223372036854775808
Max:  9223372036854775807
"""
scalar Int64

interface QuantityInterface {
    value: Int!
    goal: Int!
}

type Query {
    """An authentication action"""
    auth(
    """
    The base64-encoded string which should contains a
    credentials in `base64(LOGIN:PASSWORD)` format
    """
    bearer: String!
): Authentication

    """
    Returns a Campaign object or an error
    if there is no entity with the passed "id" argument.
    """
    campaign(
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!
): Campaign

    """
    Returns a Flight object or an error
    if there is no entity with the passed "id" argument.
    """
    flight(
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!
): Flight

    """
    Returns a Creative object or an error
    if there is no entity with the passed "id" argument.
    """
    creative(
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!
): Creative
}

type Statistics {
    clicks: Int!
    shows: Int!
    pixels: Int!
    bids: Int64!
}

enum Status {
    """Active status"""
    Active

    """Disable status"""
    NotActive
}

type SubFlight implements FlightInterface {
    """
    The Object identifier (inside the system meaningful as `oid`)
    uniquely determining the entity within the system.
    """
    id: ID!

    """Order"""
    orderId: Int!

    """Parent"""
    parent: Flight

    """Returns a Campaign belonging to the selected Flight."""
    campaign: Campaign

    """Human readable object name."""
    name: String!

    """
    Returns the object which contains a Campaign frequency
    impressions limit.
    """
    frequency: Frequency!

    """..."""
    budget: Budget!

    """..."""
    flags: [FlightFlag!]!

    """..."""
    quantity: SubFlightQuantity!

    """..."""
    statistics: Statistics!

    """Time of the last show (`last_showtime`) of the campaign"""
    viewedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon

    """..."""
    startedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    endsAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    restartedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    createdAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!

    """..."""
    updatedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon!
}

type SubFlightQuantity implements QuantityInterface {
    value: Int!
    goal: Int!
    max: Int!
}

type User {
    id: ID!
    name: String!
    email: Email!
    roles: [String!]!
    createdAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon
    updatedAt(
    """

    An argument that matches the date of the time difference.

    If a `NULL` is passed (or the value is not passed),
    then the current time is taken.

    """
    diff: Carbon = null

    """

    An argument that provides a format of the given value that
    are contained in a CarbonFormat enumeration type

    """
    format: CarbonFormat = RFC3339
): Carbon
}
