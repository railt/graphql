<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Compiler;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 07-08-2018 21:52:51
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INPUT_UNION = 'T_INPUT_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.\\.\\.',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)\\b',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)\\b',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => 'true\\b',
        self::T_FALSE => 'false\\b',
        self::T_NULL => 'null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").|\\s)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS => 'extends\\b',
        self::T_IMPLEMENTS => 'implements\\b',
        self::T_ON => 'on\\b',
        self::T_TYPE => 'type\\b',
        self::T_ENUM => 'enum\\b',
        self::T_UNION => 'union\\b',
        self::T_INPUT_UNION => 'inputUnion\\b',
        self::T_INTERFACE => 'interface\\b',
        self::T_SCHEMA => 'schema\\b',
        self::T_SCALAR => 'scalar\\b',
        self::T_DIRECTIVE => 'directive\\b',
        self::T_INPUT => 'input\\b',
        self::T_EXTEND => 'extend\\b',
        self::T_FRAGMENT => 'fragment\\b',
        self::T_VARIABLE => '\\$[_A-Za-z][_0-9A-Za-z]*',
        self::T_NAME => '[_A-Za-z][_0-9A-Za-z]*',
        self::T_WHITESPACE => '(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_COMMA',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'TypeName' => \Railt\SDL\Compiler\Ast\TypeNameNode::class,
        'Boolean' => \Railt\SDL\Compiler\Ast\Value\BooleanValueNode::class,
        'Number' => \Railt\SDL\Compiler\Ast\Value\NumberValueNode::class,
        'String' => \Railt\SDL\Compiler\Ast\Value\StringValueNode::class,
        'Null' => \Railt\SDL\Compiler\Ast\Value\NullValueNode::class,
        'Input' => \Railt\SDL\Compiler\Ast\Value\InputValueNode::class,
        'List' => \Railt\SDL\Compiler\Ast\Value\ListValueNode::class,
        'Constant' => \Railt\SDL\Compiler\Ast\Value\ConstantValueNode::class,
        'Value' => \Railt\SDL\Compiler\Ast\Value\ValueNode::class,
        'TypeHint' => \Railt\SDL\Compiler\Ast\TypeHintNode::class,
        'ArgumentDefinition' => \Railt\SDL\Compiler\Ast\Dependent\ArgumentDefinitionNode::class,
        'FieldDefinition' => \Railt\SDL\Compiler\Ast\Dependent\FieldDefinitionNode::class,
        'DirectiveDefinition' => \Railt\SDL\Compiler\Ast\Definition\DirectiveDefinitionNode::class,
        'EnumDefinition' => \Railt\SDL\Compiler\Ast\Definition\EnumDefinitionNode::class,
        'EnumValue' => \Railt\SDL\Compiler\Ast\Dependent\EnumValueDefinitionNode::class,
        'InputDefinition' => \Railt\SDL\Compiler\Ast\Definition\InputDefinitionNode::class,
        'InputFieldDefinition' => \Railt\SDL\Compiler\Ast\Dependent\InputFieldDefinitionNode::class,
        'InputUnionDefinition' => \Railt\SDL\Compiler\Ast\Definition\InputUnionDefinitionNode::class,
        'InterfaceDefinition' => \Railt\SDL\Compiler\Ast\Definition\InterfaceDefinitionNode::class,
        'ObjectDefinition' => \Railt\SDL\Compiler\Ast\Definition\ObjectDefinitionNode::class,
        'ScalarDefinition' => \Railt\SDL\Compiler\Ast\Definition\ScalarDefinitionNode::class,
        'SchemaDefinition' => \Railt\SDL\Compiler\Ast\Definition\SchemaDefinitionNode::class,
        'SchemaField' => \Railt\SDL\Compiler\Ast\Dependent\SchemaFieldDefinitionNode::class,
        'UnionDefinition' => \Railt\SDL\Compiler\Ast\Definition\UnionDefinitionNode::class,
        'Directive' => \Railt\SDL\Compiler\Ast\Invocation\DirectiveNode::class,
        'DirectiveArgument' => \Railt\SDL\Compiler\Ast\Invocation\DirectiveArgumentNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Repetition(0, 0, -1, 'DocumentImports', null), 
            new Repetition(1, 0, -1, 'DocumentDefinitions', null), 
            (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'), 
            new Concatenation('DocumentImports', ['Directive'], null), 
            new Concatenation(4, ['Definition'], null), 
            new Alternation('DocumentDefinitions', ['Extension', 4], null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(7, 'T_TRUE', true), 
            new Terminal(8, 'T_FALSE', true), 
            new Terminal(9, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 7, 8, 9], null), 
            new Terminal(11, 'T_NAMESPACE', true), 
            new Terminal(12, 'T_EXTENDS', true), 
            new Terminal(13, 'T_IMPLEMENTS', true), 
            new Terminal(14, 'T_ON', true), 
            new Terminal(15, 'T_TYPE', true), 
            new Terminal(16, 'T_ENUM', true), 
            new Terminal(17, 'T_UNION', true), 
            new Terminal(18, 'T_INPUT_UNION', true), 
            new Terminal(19, 'T_INTERFACE', true), 
            new Terminal(20, 'T_SCHEMA', true), 
            new Terminal(21, 'T_SCALAR', true), 
            new Terminal(22, 'T_DIRECTIVE', true), 
            new Terminal(23, 'T_INPUT', true), 
            new Terminal(24, 'T_EXTEND', true), 
            new Terminal(25, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null), 
            new Terminal(27, 'T_VARIABLE', true), 
            new Concatenation('Variable', [27], 'Variable'), 
            new Concatenation(29, ['NameWithReserved'], null), 
            (new Concatenation('TypeName', [29], 'TypeName'))->setDefaultId('TypeName'), 
            new Terminal(31, 'T_FALSE', true), 
            new Concatenation(32, [31], 'Boolean'), 
            new Terminal(33, 'T_TRUE', true), 
            new Concatenation(34, [33], 'Boolean'), 
            (new Alternation('Boolean', [32, 34], null))->setDefaultId('Boolean'), 
            new Terminal(36, 'T_NUMBER', true), 
            new Concatenation(37, [36], 'Number'), 
            new Terminal(38, 'T_HEX_NUMBER', true), 
            new Concatenation(39, [38], 'Number'), 
            new Terminal(40, 'T_BIN_NUMBER', true), 
            new Concatenation(41, [40], 'Number'), 
            (new Alternation('Number', [37, 39, 41], null))->setDefaultId('Number'), 
            new Terminal(43, 'T_BLOCK_STRING', true), 
            new Concatenation(44, [43], 'String'), 
            new Terminal(45, 'T_STRING', true), 
            new Concatenation(46, [45], 'String'), 
            (new Alternation('String', [44, 46], null))->setDefaultId('String'), 
            new Terminal(48, 'T_NULL', true), 
            (new Concatenation('Null', [48], 'Null'))->setDefaultId('Null'), 
            new Terminal(50, 'T_BRACE_OPEN', false), 
            new Repetition(51, 0, -1, '__inputPair', null), 
            new Terminal(52, 'T_BRACE_CLOSE', false), 
            (new Concatenation('Input', [50, 51, 52], 'Input'))->setDefaultId('Input'), 
            new Concatenation('__inputPairKey', ['NameWithReserved'], 'Key'), 
            new Terminal(55, 'T_COLON', false), 
            new Concatenation('__inputPair', ['__inputPairKey', 55, 'Value'], 'Pair'), 
            new Terminal(57, 'T_BRACKET_OPEN', false), 
            new Repetition(58, 0, -1, 'Value', null), 
            new Terminal(59, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('List', [57, 58, 59], 'List'))->setDefaultId('List'), 
            new Concatenation(61, ['NameExceptValues'], null), 
            (new Concatenation('Constant', [61], 'Constant'))->setDefaultId('Constant'), 
            new Concatenation(63, ['Constant'], 'Value'), 
            new Concatenation(64, ['Boolean'], 'Value'), 
            new Concatenation(65, ['Number'], 'Value'), 
            new Concatenation(66, ['String'], 'Value'), 
            new Concatenation(67, ['Input'], 'Value'), 
            new Concatenation(68, ['Null'], 'Value'), 
            new Concatenation(69, ['List'], null), 
            new Concatenation(70, [69], 'Value'), 
            (new Alternation('Value', [63, 64, 65, 66, 67, 68, 70], null))->setDefaultId('Value'), 
            new Concatenation('Documentation', ['String'], 'Description'), 
            new Terminal(73, 'T_IMPLEMENTS', false), 
            new Terminal(74, 'T_AND', false), 
            new Concatenation(75, [74, 'TypeName'], null), 
            new Repetition(76, 0, -1, 75, null), 
            new Concatenation('TypeDefinitionImplements', [73, 'TypeName', 76], 'Implements'), 
            new Concatenation(78, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(79, ['__typeHintValue'], null), 
            new Concatenation(80, [79], 'TypeHint'), 
            (new Alternation('TypeHint', [78, 80], null))->setDefaultId('TypeHint'), 
            new Terminal(82, 'T_BRACKET_OPEN', false), 
            new Terminal(83, 'T_BRACKET_CLOSE', false), 
            new Repetition(84, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintList', [82, '__typeHintValue', 83, 84], 'ListTypeHint'), 
            new Repetition(86, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintValue', ['TypeName', 86], 'SingularTypeHint'), 
            new Terminal(88, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNotNull', [88], 'NonNull'), 
            new Repetition(90, 0, 1, 'Documentation', null), 
            new Repetition(91, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(92, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [90, '__argumentDefinitionBody', 91, 92], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(94, 'T_COLON', false), 
            new Concatenation(95, ['TypeHint'], null), 
            new Concatenation('__argumentDefinitionBody', ['ArgumentName', 94, 95], null), 
            new Concatenation(97, ['NameWithReserved'], null), 
            (new Concatenation('ArgumentName', [97], 'ArgumentName'))->setDefaultId('ArgumentName'), 
            new Terminal(99, 'T_EQUAL', false), 
            new Concatenation(100, ['Value'], null), 
            new Concatenation('__argumentDefinitionDefaultValue', [99, 100], null), 
            new Repetition(102, 0, 1, 'Documentation', null), 
            new Repetition(103, 0, 1, '__fieldDefinitionArguments', null), 
            new Terminal(104, 'T_COLON', false), 
            new Repetition(105, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [102, 'NameWithReserved', 103, 104, 'TypeHint', 105], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Terminal(107, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(108, 0, -1, 'ArgumentDefinition', null), 
            new Terminal(109, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__fieldDefinitionArguments', [107, 108, 109], 'FieldArguments'), 
            new Repetition(111, 0, 1, 'Documentation', null), 
            new Concatenation(112, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [111, 112], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(114, 'T_DIRECTIVE', false), 
            new Terminal(115, 'T_DIRECTIVE_AT', false), 
            new Repetition(116, 0, 1, '__directiveDefinitionArguments', null), 
            new Terminal(117, 'T_ON', false), 
            new Concatenation(118, ['__directiveDefinitionLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [114, 115, 'TypeName', 116, 117, 118], null), 
            new Terminal(120, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(121, 0, -1, 'ArgumentDefinition', null), 
            new Terminal(122, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveDefinitionArguments', [120, 121, 122], 'DirectiveArguments'), 
            new Terminal(124, 'T_OR', false), 
            new Repetition(125, 0, 1, 124, null), 
            new Repetition(126, 1, -1, '__directiveDefinitionLocation', null), 
            new Concatenation('__directiveDefinitionLocations', [125, 126], 'DirectiveLocations'), 
            new Terminal(128, 'T_OR', false), 
            new Concatenation(129, [128, 'NameWithReserved'], null), 
            new Repetition(130, 0, -1, 129, null), 
            new Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 130], null), 
            new Repetition(132, 0, 1, 'Documentation', null), 
            new Concatenation(133, ['EnumDefinitionBody'], null), 
            (new Concatenation('EnumDefinition', [132, 'EnumDefinitionHead', 133], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Terminal(135, 'T_ENUM', false), 
            new Repetition(136, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [135, 'TypeName', 136], null), 
            new Terminal(138, 'T_BRACE_OPEN', false), 
            new Terminal(139, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [138, '__enumDefinitionFields', 139], null), 
            new Repetition(141, 0, -1, 'EnumValue', null), 
            new Concatenation('__enumDefinitionFields', [141], 'EnumValues'), 
            new Repetition(143, 0, 1, 'Documentation', null), 
            new Repetition(144, 0, 1, '__enumDefinitionValue', null), 
            new Repetition(145, 0, 1, 'Directives', null), 
            (new Concatenation('EnumValue', [143, 'NameExceptValues', 144, 145], 'EnumValue'))->setDefaultId('EnumValue'), 
            new Terminal(147, 'T_COLON', false), 
            new Terminal(148, 'T_EQUAL', false), 
            new Concatenation(149, ['Value'], null), 
            new Concatenation('__enumDefinitionValue', [147, 'TypeHint', 148, 149], null), 
            new Repetition(151, 0, 1, 'Documentation', null), 
            new Concatenation(152, ['InputDefinitionBody'], null), 
            (new Concatenation('InputDefinition', [151, 'InputDefinitionHead', 152], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Terminal(154, 'T_INPUT', false), 
            new Repetition(155, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [154, 'TypeName', 155], null), 
            new Terminal(157, 'T_BRACE_OPEN', false), 
            new Repetition(158, 0, -1, '__inputDefinitionField', null), 
            new Terminal(159, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [157, 158, 159], 'InputFieldDefinitions'), 
            new Concatenation('__inputDefinitionField', ['InputFieldDefinition'], null), 
            new Repetition(162, 0, 1, 'Documentation', null), 
            new Terminal(163, 'T_COLON', false), 
            new Repetition(164, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(165, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [162, 'InputFieldName', 163, 'TypeHint', 164, 165], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Concatenation(167, ['NameWithReserved'], null), 
            (new Concatenation('InputFieldName', [167], 'InputFieldName'))->setDefaultId('InputFieldName'), 
            new Terminal(169, 'T_EQUAL', false), 
            new Concatenation(170, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [169, 170], null), 
            new Repetition(172, 0, 1, 'Documentation', null), 
            new Repetition(173, 0, 1, 'InputUnionDefinitionBody', null), 
            (new Concatenation('InputUnionDefinition', [172, 'InputUnionDefinitionHead', 173], 'InputUnionDefinition'))->setDefaultId('InputUnionDefinition'), 
            new Terminal(175, 'T_INPUT_UNION', false), 
            new Repetition(176, 0, 1, 'Directives', null), 
            new Concatenation('InputUnionDefinitionHead', [175, 'TypeName', 176], null), 
            new Terminal(178, 'T_EQUAL', false), 
            new Terminal(179, 'T_OR', false), 
            new Repetition(180, 0, 1, 179, null), 
            new Repetition(181, 0, 1, '__inputUnionDefinitionTargets', null), 
            new Concatenation('InputUnionDefinitionBody', [178, 180, 181], null), 
            new Terminal(183, 'T_OR', false), 
            new Concatenation(184, [183, 'TypeName'], null), 
            new Repetition(185, 0, -1, 184, null), 
            new Concatenation('__inputUnionDefinitionTargets', ['TypeName', 185], 'InputUnionDefinitionTargets'), 
            new Repetition(187, 0, 1, 'Documentation', null), 
            new Concatenation(188, ['InterfaceDefinitionBody'], null), 
            (new Concatenation('InterfaceDefinition', [187, 'InterfaceDefinitionHead', 188], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Terminal(190, 'T_INTERFACE', false), 
            new Repetition(191, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(192, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [190, 'TypeName', 191, 192], null), 
            new Terminal(194, 'T_BRACE_OPEN', false), 
            new Repetition(195, 0, 1, '__interfaceFieldDefinitions', null), 
            new Repetition(196, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(197, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [194, 195, 196, 197], null), 
            new Repetition(199, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__interfaceFieldDefinitions', [199], 'FieldDefinitions'), 
            new Repetition(201, 0, 1, 'Documentation', null), 
            new Concatenation(202, ['ObjectDefinitionBody'], null), 
            (new Concatenation('ObjectDefinition', [201, 'ObjectDefinitionHead', 202], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Terminal(204, 'T_TYPE', false), 
            new Repetition(205, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(206, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [204, 'TypeName', 205, 206], null), 
            new Terminal(208, 'T_BRACE_OPEN', false), 
            new Repetition(209, 0, 1, '__objectFieldDefinitions', null), 
            new Repetition(210, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(211, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [208, 209, 210, 211], null), 
            new Repetition(213, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__objectFieldDefinitions', [213], 'FieldDefinitions'), 
            new Repetition(215, 0, 1, 'Documentation', null), 
            new Concatenation(216, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [215, 216], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Terminal(218, 'T_SCALAR', false), 
            new Repetition(219, 0, 1, '__scalarExtends', null), 
            new Repetition(220, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [218, 'TypeName', 219, 220], null), 
            new Terminal(222, 'T_EXTENDS', false), 
            new Concatenation('__scalarExtends', [222, 'TypeName'], 'Extends'), 
            new Repetition(224, 0, 1, 'Documentation', null), 
            new Concatenation(225, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaDefinition', [224, 'SchemaDefinitionHead', 225], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Terminal(227, 'T_SCHEMA', false), 
            new Repetition(228, 0, 1, 'TypeName', null), 
            new Repetition(229, 0, 1, 'Directives', null), 
            new Concatenation('SchemaDefinitionHead', [227, 228, 229], null), 
            new Terminal(231, 'T_BRACE_OPEN', false), 
            new Repetition(232, 0, -1, 'SchemaField', null), 
            new Terminal(233, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [231, 232, 233], 'SchemaFields'), 
            new Repetition(235, 0, 1, 'Documentation', null), 
            new Terminal(236, 'T_COLON', false), 
            new Concatenation(237, ['TypeHint'], null), 
            (new Concatenation('SchemaField', [235, 'NameWithReserved', 236, 237], 'SchemaField'))->setDefaultId('SchemaField'), 
            new Repetition(239, 0, 1, 'Documentation', null), 
            new Repetition(240, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [239, 'UnionDefinitionHead', 240], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Terminal(242, 'T_UNION', false), 
            new Repetition(243, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [242, 'TypeName', 243], null), 
            new Terminal(245, 'T_EQUAL', false), 
            new Terminal(246, 'T_OR', false), 
            new Repetition(247, 0, 1, 246, null), 
            new Repetition(248, 0, 1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [245, 247, 248], null), 
            new Terminal(250, 'T_OR', false), 
            new Concatenation(251, [250, 'TypeName'], null), 
            new Repetition(252, 0, -1, 251, null), 
            new Concatenation('__unionDefinitionTargets', ['TypeName', 252], 'UnionDefinitionTargets'), 
            new Concatenation(254, ['__typeDefinitions'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 254], null), 
            new Concatenation(256, ['__typeDefinitions'], null), 
            (new Concatenation('ChildrenDefinitions', [256], 'ChildrenDefinitions'))->setDefaultId('ChildrenDefinitions'), 
            new Concatenation(258, ['UnionDefinition'], null), 
            new Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InputUnionDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 258], null), 
            new Repetition(260, 0, 1, 'Documentation', null), 
            new Terminal(261, 'T_EXTEND', false), 
            new Concatenation(262, ['__enumExtensionVariants'], null), 
            (new Concatenation('EnumExtension', [260, 261, 262], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Concatenation(264, ['EnumDefinitionHead', 'EnumDefinitionBody'], null), 
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 264], null), 
            new Repetition(266, 0, 1, 'Documentation', null), 
            new Terminal(267, 'T_EXTEND', false), 
            new Concatenation(268, ['__inputExtensionVariants'], null), 
            (new Concatenation('InputExtension', [266, 267, 268], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Concatenation(270, ['InputDefinitionHead', 'InputDefinitionBody'], null), 
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 270], null), 
            new Repetition(272, 0, 1, 'Documentation', null), 
            new Terminal(273, 'T_EXTEND', false), 
            new Concatenation(274, ['InputUnionDefinitionBody'], null), 
            (new Concatenation('InputUnionExtension', [272, 273, 'InputUnionDefinitionHead', 274], 'InputUnionExtension'))->setDefaultId('InputUnionExtension'), 
            new Repetition(276, 0, 1, 'Documentation', null), 
            new Terminal(277, 'T_EXTEND', false), 
            new Concatenation(278, ['__interfaceExtensionVariants'], null), 
            (new Concatenation('InterfaceExtension', [276, 277, 278], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Concatenation(280, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null), 
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 280], null), 
            new Repetition(282, 0, 1, 'Documentation', null), 
            new Terminal(283, 'T_EXTEND', false), 
            new Concatenation(284, ['__objectExtensionVariants'], null), 
            (new Concatenation('ObjectExtension', [282, 283, 284], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Concatenation(286, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null), 
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 286], null), 
            new Repetition(288, 0, 1, 'Documentation', null), 
            new Terminal(289, 'T_EXTEND', false), 
            new Concatenation(290, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarExtension', [288, 289, 290], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Repetition(292, 0, 1, 'Documentation', null), 
            new Terminal(293, 'T_EXTEND', false), 
            new Concatenation(294, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaExtension', [292, 293, 294], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Repetition(296, 0, 1, 'Documentation', null), 
            new Terminal(297, 'T_EXTEND', false), 
            new Concatenation(298, ['UnionDefinitionBody'], null), 
            (new Concatenation('UnionExtension', [296, 297, 'UnionDefinitionHead', 298], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Concatenation(300, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InputUnionExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 300], null), 
            new Repetition(302, 1, -1, 'Directive', null), 
            (new Concatenation('Directives', [302], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(304, 'T_DIRECTIVE_AT', false), 
            new Repetition(305, 0, 1, '__directiveInvocationArgumentsGroup', null), 
            (new Concatenation('Directive', [304, 'TypeName', 305], 'Directive'))->setDefaultId('Directive'), 
            new Terminal(307, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(308, 0, 1, '__directiveInvocationArguments', null), 
            new Terminal(309, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveInvocationArgumentsGroup', [307, 308, 309], null), 
            new Repetition(311, 1, -1, 'DirectiveArgument', null), 
            new Concatenation('__directiveInvocationArguments', [311], 'DirectiveArguments'), 
            new Terminal(313, 'T_COLON', false), 
            new Concatenation(314, ['Value'], null), 
            (new Concatenation('DirectiveArgument', ['DirectiveArgumentName', 313, 314], 'DirectiveArgument'))->setDefaultId('DirectiveArgument'), 
            new Concatenation(316, ['NameWithReserved'], null), 
            (new Concatenation('DirectiveArgumentName', [316], 'DirectiveArgumentName'))->setDefaultId('DirectiveArgumentName'), 
            new Concatenation('Invocation', ['Directive'], null)
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
