<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Compiler;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\GrammarInterface;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 02-08-2018 21:51:44
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND               = 'T_AND';
    public const T_OR                = 'T_OR';
    public const T_PARENTHESIS_OPEN  = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN      = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE     = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN        = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE       = 'T_BRACE_CLOSE';
    public const T_NON_NULL          = 'T_NON_NULL';
    public const T_THREE_DOTS        = 'T_THREE_DOTS';
    public const T_COLON             = 'T_COLON';
    public const T_EQUAL             = 'T_EQUAL';
    public const T_DIRECTIVE_AT      = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER        = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER        = 'T_BIN_NUMBER';
    public const T_NUMBER            = 'T_NUMBER';
    public const T_TRUE              = 'T_TRUE';
    public const T_FALSE             = 'T_FALSE';
    public const T_NULL              = 'T_NULL';
    public const T_BLOCK_STRING      = 'T_BLOCK_STRING';
    public const T_STRING            = 'T_STRING';
    public const T_EXTENDS           = 'T_EXTENDS';
    public const T_IMPLEMENTS        = 'T_IMPLEMENTS';
    public const T_ON                = 'T_ON';
    public const T_TYPE              = 'T_TYPE';
    public const T_ENUM              = 'T_ENUM';
    public const T_UNION             = 'T_UNION';
    public const T_INPUT_UNION       = 'T_INPUT_UNION';
    public const T_INTERFACE         = 'T_INTERFACE';
    public const T_SCHEMA            = 'T_SCHEMA';
    public const T_SCALAR            = 'T_SCALAR';
    public const T_DIRECTIVE         = 'T_DIRECTIVE';
    public const T_INPUT             = 'T_INPUT';
    public const T_EXTEND            = 'T_EXTEND';
    public const T_FRAGMENT          = 'T_FRAGMENT';
    public const T_VARIABLE          = 'T_VARIABLE';
    public const T_NAME              = 'T_NAME';
    public const T_WHITESPACE        = 'T_WHITESPACE';
    public const T_COMMENT           = 'T_COMMENT';
    public const T_COMMA             = 'T_COMMA';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND               => '&',
        self::T_OR                => '\\|',
        self::T_PARENTHESIS_OPEN  => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN      => '\\[',
        self::T_BRACKET_CLOSE     => '\\]',
        self::T_BRACE_OPEN        => '{',
        self::T_BRACE_CLOSE       => '}',
        self::T_NON_NULL          => '!',
        self::T_THREE_DOTS        => '\\.\\.\\.',
        self::T_COLON             => ':',
        self::T_EQUAL             => '=',
        self::T_DIRECTIVE_AT      => '@',
        self::T_HEX_NUMBER        => '\\-?0x([0-9a-fA-F]+)\\b',
        self::T_BIN_NUMBER        => '\\-?0b([0-1]+)\\b',
        self::T_NUMBER            => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE              => 'true\\b',
        self::T_FALSE             => 'false\\b',
        self::T_NULL              => 'null\\b',
        self::T_BLOCK_STRING      => '"""((?:\\\\"""|(?!""").|\\s)*)"""',
        self::T_STRING            => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS           => 'extends\\b',
        self::T_IMPLEMENTS        => 'implements\\b',
        self::T_ON                => 'on\\b',
        self::T_TYPE              => 'type\\b',
        self::T_ENUM              => 'enum\\b',
        self::T_UNION             => 'union\\b',
        self::T_INPUT_UNION       => 'inputUnion\\b',
        self::T_INTERFACE         => 'interface\\b',
        self::T_SCHEMA            => 'schema\\b',
        self::T_SCALAR            => 'scalar\\b',
        self::T_DIRECTIVE         => 'directive\\b',
        self::T_INPUT             => 'input\\b',
        self::T_EXTEND            => 'extend\\b',
        self::T_FRAGMENT          => 'fragment\\b',
        self::T_VARIABLE          => '\\$[_A-Za-z][_0-9A-Za-z]*',
        self::T_NAME              => '[_A-Za-z][_0-9A-Za-z]*',
        self::T_WHITESPACE        => '(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+',
        self::T_COMMENT           => '#[^\\n]*',
        self::T_COMMA             => ',',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_COMMA',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'TypeName'             => \Railt\SDL\Compiler\Ast\TypeNameNode::class,
        'Boolean'              => \Railt\SDL\Compiler\Ast\Value\BooleanValueNode::class,
        'Number'               => \Railt\SDL\Compiler\Ast\Value\NumberValueNode::class,
        'String'               => \Railt\SDL\Compiler\Ast\Value\StringValueNode::class,
        'Null'                 => \Railt\SDL\Compiler\Ast\Value\NullValueNode::class,
        'Input'                => \Railt\SDL\Compiler\Ast\Value\InputValueNode::class,
        'List'                 => \Railt\SDL\Compiler\Ast\Value\ListValueNode::class,
        'Constant'             => \Railt\SDL\Compiler\Ast\Value\ConstantValueNode::class,
        'DirectiveDefinition'  => \Railt\SDL\Compiler\Ast\Definition\DirectiveDefinitionNode::class,
        'EnumDefinition'       => \Railt\SDL\Compiler\Ast\Definition\EnumDefinitionNode::class,
        'InputDefinition'      => \Railt\SDL\Compiler\Ast\Definition\InputDefinitionNode::class,
        'InputUnionDefinition' => \Railt\SDL\Compiler\Ast\Definition\InputUnionDefinitionNode::class,
        'InterfaceDefinition'  => \Railt\SDL\Compiler\Ast\Definition\InterfaceDefinitionNode::class,
        'ObjectDefinition'     => \Railt\SDL\Compiler\Ast\Definition\ObjectDefinitionNode::class,
        'ScalarDefinition'     => \Railt\SDL\Compiler\Ast\Definition\ScalarDefinitionNode::class,
        'SchemaDefinition'     => \Railt\SDL\Compiler\Ast\Definition\SchemaDefinitionNode::class,
        'UnionDefinition'      => \Railt\SDL\Compiler\Ast\Definition\UnionDefinitionNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Repetition(0, 0, -1, 'DocumentImports', null),
            new Repetition(1, 0, -1, 'DocumentDefinitions', null),
            (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'),
            new Concatenation('DocumentImports', ['Directive'], null),
            new Concatenation(4, ['Definition'], null),
            new Alternation('DocumentDefinitions', ['Extension', 4], null),
            new Terminal('NameWithoutReserved', 'T_NAME', true),
            new Terminal(7, 'T_TRUE', true),
            new Terminal(8, 'T_FALSE', true),
            new Terminal(9, 'T_NULL', true),
            new Alternation('NameWithReserved', ['NameExceptValues', 7, 8, 9], null),
            new Terminal(11, 'T_NAMESPACE', true),
            new Terminal(12, 'T_EXTENDS', true),
            new Terminal(13, 'T_IMPLEMENTS', true),
            new Terminal(14, 'T_ON', true),
            new Terminal(15, 'T_TYPE', true),
            new Terminal(16, 'T_ENUM', true),
            new Terminal(17, 'T_UNION', true),
            new Terminal(18, 'T_INPUT_UNION', true),
            new Terminal(19, 'T_INTERFACE', true),
            new Terminal(20, 'T_SCHEMA', true),
            new Terminal(21, 'T_SCALAR', true),
            new Terminal(22, 'T_DIRECTIVE', true),
            new Terminal(23, 'T_INPUT', true),
            new Terminal(24, 'T_EXTEND', true),
            new Terminal(25, 'T_FRAGMENT', true),
            new Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null),
            new Terminal(27, 'T_VARIABLE', true),
            new Concatenation('Variable', [27], 'Variable'),
            new Concatenation(29, ['NameWithReserved'], null),
            (new Concatenation('TypeName', [29], 'TypeName'))->setDefaultId('TypeName'),
            new Terminal(31, 'T_FALSE', true),
            new Concatenation(32, [31], 'Boolean'),
            new Terminal(33, 'T_TRUE', true),
            new Concatenation(34, [33], 'Boolean'),
            (new Alternation('Boolean', [32, 34], null))->setDefaultId('Boolean'),
            new Terminal(36, 'T_NUMBER', true),
            new Concatenation(37, [36], 'Number'),
            new Terminal(38, 'T_HEX_NUMBER', true),
            new Concatenation(39, [38], 'Number'),
            new Terminal(40, 'T_BIN_NUMBER', true),
            new Concatenation(41, [40], 'Number'),
            (new Alternation('Number', [37, 39, 41], null))->setDefaultId('Number'),
            new Terminal(43, 'T_BLOCK_STRING', true),
            new Concatenation(44, [43], 'String'),
            new Terminal(45, 'T_STRING', true),
            new Concatenation(46, [45], 'String'),
            (new Alternation('String', [44, 46], null))->setDefaultId('String'),
            new Terminal(48, 'T_NULL', true),
            (new Concatenation('Null', [48], 'Null'))->setDefaultId('Null'),
            new Terminal(50, 'T_BRACE_OPEN', false),
            new Repetition(51, 0, -1, '__inputPair', null),
            new Terminal(52, 'T_BRACE_CLOSE', false),
            (new Concatenation('Input', [50, 51, 52], 'Input'))->setDefaultId('Input'),
            new Concatenation('__inputPairKey', ['NameWithReserved'], 'Key'),
            new Terminal(55, 'T_COLON', false),
            new Concatenation('__inputPair', ['__inputPairKey', 55, 'Value'], 'Pair'),
            new Terminal(57, 'T_BRACKET_OPEN', false),
            new Repetition(58, 0, -1, 'Value', null),
            new Terminal(59, 'T_BRACKET_CLOSE', false),
            (new Concatenation('List', [57, 58, 59], 'List'))->setDefaultId('List'),
            new Concatenation(61, ['NameExceptValues'], null),
            (new Concatenation('Constant', [61], 'Constant'))->setDefaultId('Constant'),
            new Concatenation(63, ['Constant'], 'Value'),
            new Concatenation(64, ['Boolean'], 'Value'),
            new Concatenation(65, ['Number'], 'Value'),
            new Concatenation(66, ['String'], 'Value'),
            new Concatenation(67, ['Input'], 'Value'),
            new Concatenation(68, ['Null'], 'Value'),
            new Concatenation(69, ['List'], null),
            new Concatenation(70, [69], 'Value'),
            (new Alternation('Value', [63, 64, 65, 66, 67, 68, 70], null))->setDefaultId('Value'),
            new Concatenation('Documentation', ['String'], 'Description'),
            new Terminal(73, 'T_IMPLEMENTS', false),
            new Terminal(74, 'T_AND', false),
            new Concatenation(75, [74, 'TypeInvocation'], null),
            new Repetition(76, 0, -1, 75, null),
            new Concatenation('TypeDefinitionImplements', [73, 'TypeInvocation', 76], 'Implements'),
            new Terminal(78, 'T_PARENTHESIS_OPEN', false),
            new Repetition(79, 0, -1, '__genericArgumentDefinition', null),
            new Terminal(80, 'T_PARENTHESIS_CLOSE', false),
            (new Concatenation('TypeArguments', [78, 79, 80], 'TypeArguments'))->setDefaultId('TypeArguments'),
            new Terminal(82, 'T_COLON', false),
            new Concatenation('__genericArgumentDefinition', ['Variable', 82, 'TypeName'], 'TypeArgument'),
            new Concatenation(84, ['__typeHintList'], 'TypeHint'),
            new Concatenation(85, ['__typeHintValue'], null),
            new Concatenation(86, [85], 'TypeHint'),
            (new Alternation('TypeHint', [84, 86], null))->setDefaultId('TypeHint'),
            new Terminal(88, 'T_BRACKET_OPEN', false),
            new Terminal(89, 'T_BRACKET_CLOSE', false),
            new Repetition(90, 0, 1, '__typeHintNotNull', null),
            new Concatenation('__typeHintList', [88, '__typeHintValue', 89, 90], 'ListTypeHint'),
            new Repetition(92, 0, 1, '__typeHintNotNull', null),
            new Concatenation('__typeHintValue', ['TypeInvocation', 92], 'SingularTypeHint'),
            new Terminal(94, 'T_NON_NULL', false),
            new Concatenation('__typeHintNotNull', [94], 'NonNull'),
            new Repetition(96, 0, 1, 'Documentation', null),
            new Terminal(97, 'T_COLON', false),
            new Repetition(98, 0, 1, '__argumentDefinitionDefaultValue', null),
            new Repetition(99, 0, 1, 'Directives', null),
            (new Concatenation('ArgumentDefinition', [96, 'NameWithReserved', 97, 'TypeHint', 98, 99], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'),
            new Terminal(101, 'T_EQUAL', false),
            new Concatenation(102, ['Value'], null),
            new Concatenation('__argumentDefinitionDefaultValue', [101, 102], null),
            new Repetition(104, 0, 1, 'Documentation', null),
            new Repetition(105, 0, 1, '__fieldDefinitionArguments', null),
            new Terminal(106, 'T_COLON', false),
            new Repetition(107, 0, 1, 'Directives', null),
            (new Concatenation('FieldDefinition', [104, 'NameWithReserved', 105, 106, 'TypeHint', 107], 'FieldDefinition'))->setDefaultId('FieldDefinition'),
            new Terminal(109, 'T_PARENTHESIS_OPEN', false),
            new Repetition(110, 0, -1, '__fieldDefinitionArgument', null),
            new Terminal(111, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__fieldDefinitionArguments', [109, 110, 111], 'FieldArguments'),
            new Repetition(113, 0, 1, 'Directives', null),
            new Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 113], 'FieldArgument'),
            new Repetition(115, 0, 1, 'Documentation', null),
            new Concatenation(116, ['DirectiveDefinitionBody'], null),
            (new Concatenation('DirectiveDefinition', [115, 116], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'),
            new Terminal(118, 'T_DIRECTIVE', false),
            new Terminal(119, 'T_DIRECTIVE_AT', false),
            new Repetition(120, 0, 1, '__directiveDefinitionArguments', null),
            new Terminal(121, 'T_ON', false),
            new Concatenation(122, ['__directiveDefinitionLocations'], null),
            new Concatenation('DirectiveDefinitionBody', [118, 119, 'TypeName', 120, 121, 122], null),
            new Terminal(124, 'T_PARENTHESIS_OPEN', false),
            new Repetition(125, 0, -1, '__directiveDefinitionArgument', null),
            new Terminal(126, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__directiveDefinitionArguments', [124, 125, 126], null),
            new Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], 'DirectiveArgument'),
            new Terminal(129, 'T_OR', false),
            new Repetition(130, 0, 1, 129, null),
            new Repetition(131, 1, -1, '__directiveDefinitionLocation', null),
            new Concatenation('__directiveDefinitionLocations', [130, 131], 'DirectiveLocations'),
            new Terminal(133, 'T_OR', false),
            new Concatenation(134, [133, 'NameWithReserved'], null),
            new Repetition(135, 0, -1, 134, null),
            new Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 135], null),
            new Repetition(137, 0, 1, 'Documentation', null),
            new Concatenation(138, ['EnumDefinitionBody'], null),
            (new Concatenation('EnumDefinition', [137, 'EnumDefinitionHead', 138], 'EnumDefinition'))->setDefaultId('EnumDefinition'),
            new Terminal(140, 'T_ENUM', false),
            new Repetition(141, 0, 1, 'Directives', null),
            new Concatenation('EnumDefinitionHead', [140, 'TypeName', 141], null),
            new Terminal(143, 'T_BRACE_OPEN', false),
            new Terminal(144, 'T_BRACE_CLOSE', false),
            new Concatenation('EnumDefinitionBody', [143, '__enumDefinitionFields', 144], null),
            new Repetition(146, 0, -1, '__enumDefinitionField', null),
            new Concatenation('__enumDefinitionFields', [146], 'EnumValues'),
            new Terminal(148, 'T_COLON', false),
            new Terminal(149, 'T_EQUAL', false),
            new Concatenation(150, ['Value'], null),
            new Concatenation('__enumDefinitionValue', [148, 'TypeHint', 149, 150], null),
            new Repetition(152, 0, 1, 'Documentation', null),
            new Repetition(153, 0, 1, '__enumDefinitionValue', null),
            new Repetition(154, 0, 1, 'Directives', null),
            new Concatenation('__enumDefinitionField', [152, 'NameExceptValues', 153, 154], 'EnumValue'),
            new Repetition(156, 0, 1, 'Documentation', null),
            new Concatenation(157, ['InputDefinitionBody'], null),
            (new Concatenation('InputDefinition', [156, 'InputDefinitionHead', 157], 'InputDefinition'))->setDefaultId('InputDefinition'),
            new Terminal(159, 'T_INPUT', false),
            new Repetition(160, 0, 1, 'Directives', null),
            new Concatenation('InputDefinitionHead', [159, 'TypeName', 160], null),
            new Terminal(162, 'T_BRACE_OPEN', false),
            new Repetition(163, 0, -1, '__inputDefinitionField', null),
            new Terminal(164, 'T_BRACE_CLOSE', false),
            new Concatenation('InputDefinitionBody', [162, 163, 164], null),
            new Concatenation('__inputDefinitionField', ['InputFieldDefinition'], null),
            new Repetition(167, 0, 1, 'Documentation', null),
            new Terminal(168, 'T_COLON', false),
            new Repetition(169, 0, 1, '__inputFieldDefinitionDefaultValue', null),
            new Repetition(170, 0, 1, 'Directives', null),
            (new Concatenation('InputFieldDefinition', [167, 'NameWithReserved', 168, 'TypeHint', 169, 170], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'),
            new Terminal(172, 'T_EQUAL', false),
            new Concatenation(173, ['Value'], null),
            new Concatenation('__inputFieldDefinitionDefaultValue', [172, 173], null),
            new Repetition(175, 0, 1, 'Documentation', null),
            new Repetition(176, 0, 1, 'InputUnionDefinitionBody', null),
            (new Concatenation('InputUnionDefinition', [175, 'InputUnionDefinitionHead', 176], 'InputUnionDefinition'))->setDefaultId('InputUnionDefinition'),
            new Terminal(178, 'T_INPUT_UNION', false),
            new Repetition(179, 0, 1, 'Directives', null),
            new Concatenation('InputUnionDefinitionHead', [178, 'TypeName', 179], null),
            new Terminal(181, 'T_EQUAL', false),
            new Terminal(182, 'T_OR', false),
            new Repetition(183, 0, 1, 182, null),
            new Repetition(184, 1, -1, '__inputUnionDefinitionTargets', null),
            new Concatenation('InputUnionDefinitionBody', [181, 183, 184], null),
            new Terminal(186, 'T_OR', false),
            new Concatenation(187, [186, 'TypeName'], null),
            new Repetition(188, 0, -1, 187, null),
            new Concatenation('__inputUnionDefinitionTargets', ['TypeName', 188], null),
            new Repetition(190, 0, 1, 'Documentation', null),
            new Concatenation(191, ['InterfaceDefinitionBody'], null),
            (new Concatenation('InterfaceDefinition', [190, 'InterfaceDefinitionHead', 191], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'),
            new Terminal(193, 'T_INTERFACE', false),
            new Repetition(194, 0, 1, 'TypeArguments', null),
            new Repetition(195, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(196, 0, 1, 'Directives', null),
            new Concatenation('InterfaceDefinitionHead', [193, 'TypeName', 194, 195, 196], null),
            new Terminal(198, 'T_BRACE_OPEN', false),
            new Repetition(199, 0, 1, '__interfaceFieldDefinitions', null),
            new Repetition(200, 0, 1, 'ChildrenDefinitions', null),
            new Terminal(201, 'T_BRACE_CLOSE', false),
            new Concatenation('InterfaceDefinitionBody', [198, 199, 200, 201], null),
            new Repetition(203, 0, -1, 'FieldDefinition', null),
            new Concatenation('__interfaceFieldDefinitions', [203], 'FieldDefinitions'),
            new Repetition(205, 0, 1, 'Documentation', null),
            new Concatenation(206, ['ObjectDefinitionBody'], null),
            (new Concatenation('ObjectDefinition', [205, 'ObjectDefinitionHead', 206], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'),
            new Terminal(208, 'T_TYPE', false),
            new Repetition(209, 0, 1, 'TypeArguments', null),
            new Repetition(210, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(211, 0, 1, 'Directives', null),
            new Concatenation('ObjectDefinitionHead', [208, 'TypeName', 209, 210, 211], null),
            new Terminal(213, 'T_BRACE_OPEN', false),
            new Repetition(214, 0, 1, '__objectFieldDefinitions', null),
            new Repetition(215, 0, 1, 'ChildrenDefinitions', null),
            new Terminal(216, 'T_BRACE_CLOSE', false),
            new Concatenation('ObjectDefinitionBody', [213, 214, 215, 216], null),
            new Repetition(218, 0, -1, 'FieldDefinition', null),
            new Concatenation('__objectFieldDefinitions', [218], 'FieldDefinitions'),
            new Repetition(220, 0, 1, 'Documentation', null),
            new Concatenation(221, ['ScalarDefinitionBody'], null),
            (new Concatenation('ScalarDefinition', [220, 221], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'),
            new Terminal(223, 'T_SCALAR', false),
            new Repetition(224, 0, 1, '__scalarExtends', null),
            new Repetition(225, 0, 1, 'Directives', null),
            new Concatenation('ScalarDefinitionBody', [223, 'TypeName', 224, 225], null),
            new Terminal(227, 'T_EXTENDS', false),
            new Concatenation('__scalarExtends', [227, 'TypeName'], 'Extends'),
            new Repetition(229, 0, 1, 'Documentation', null),
            new Concatenation(230, ['SchemaDefinitionBody'], null),
            (new Concatenation('SchemaDefinition', [229, 230], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'),
            new Terminal(232, 'T_SCHEMA', false),
            new Repetition(233, 0, 1, 'TypeName', null),
            new Terminal(234, 'T_BRACE_OPEN', false),
            new Repetition(235, 0, -1, '__schemaField', null),
            new Terminal(236, 'T_BRACE_CLOSE', false),
            new Concatenation('SchemaDefinitionBody', [232, 233, 234, 235, 236], null),
            new Repetition(238, 0, 1, 'Documentation', null),
            new Terminal(239, 'T_COLON', false),
            new Concatenation('__schemaField', [238, 'NameWithReserved', 239, 'TypeName'], 'SchemaField'),
            new Repetition(241, 0, 1, 'Documentation', null),
            new Repetition(242, 0, 1, 'UnionDefinitionBody', null),
            (new Concatenation('UnionDefinition', [241, 'UnionDefinitionHead', 242], 'UnionDefinition'))->setDefaultId('UnionDefinition'),
            new Terminal(244, 'T_UNION', false),
            new Repetition(245, 0, 1, 'Directives', null),
            new Concatenation('UnionDefinitionHead', [244, 'TypeName', 245], null),
            new Terminal(247, 'T_EQUAL', false),
            new Terminal(248, 'T_OR', false),
            new Repetition(249, 0, 1, 248, null),
            new Repetition(250, 1, -1, '__unionDefinitionTargets', null),
            new Concatenation('UnionDefinitionBody', [247, 249, 250], null),
            new Terminal(252, 'T_OR', false),
            new Concatenation(253, [252, 'TypeName'], null),
            new Repetition(254, 0, -1, 253, null),
            new Concatenation('__unionDefinitionTargets', ['TypeName', 254], null),
            new Concatenation(256, ['__typeDefinitions'], null),
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 256], null),
            new Concatenation(258, ['__typeDefinitions'], null),
            (new Concatenation('ChildrenDefinitions', [258], 'ChildrenDefinitions'))->setDefaultId('ChildrenDefinitions'),
            new Concatenation(260, ['UnionDefinition'], null),
            new Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InputUnionDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 260], null),
            new Repetition(262, 0, 1, 'Documentation', null),
            new Terminal(263, 'T_EXTEND', false),
            new Concatenation(264, ['__enumExtensionVariants'], null),
            (new Concatenation('EnumExtension', [262, 263, 264], 'EnumExtension'))->setDefaultId('EnumExtension'),
            new Concatenation(266, ['EnumDefinitionHead', 'EnumDefinitionBody'], null),
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 266], null),
            new Repetition(268, 0, 1, 'Documentation', null),
            new Terminal(269, 'T_EXTEND', false),
            new Concatenation(270, ['__inputExtensionVariants'], null),
            (new Concatenation('InputExtension', [268, 269, 270], 'InputExtension'))->setDefaultId('InputExtension'),
            new Concatenation(272, ['InputDefinitionHead', 'InputDefinitionBody'], null),
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 272], null),
            new Repetition(274, 0, 1, 'Documentation', null),
            new Terminal(275, 'T_EXTEND', false),
            new Concatenation(276, ['InputUnionDefinitionBody'], null),
            (new Concatenation('InputUnionExtension', [274, 275, 'InputUnionDefinitionHead', 276], 'InputUnionExtension'))->setDefaultId('InputUnionExtension'),
            new Repetition(278, 0, 1, 'Documentation', null),
            new Terminal(279, 'T_EXTEND', false),
            new Concatenation(280, ['__interfaceExtensionVariants'], null),
            (new Concatenation('InterfaceExtension', [278, 279, 280], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'),
            new Concatenation(282, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null),
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 282], null),
            new Repetition(284, 0, 1, 'Documentation', null),
            new Terminal(285, 'T_EXTEND', false),
            new Concatenation(286, ['__objectExtensionVariants'], null),
            (new Concatenation('ObjectExtension', [284, 285, 286], 'ObjectExtension'))->setDefaultId('ObjectExtension'),
            new Concatenation(288, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null),
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 288], null),
            new Repetition(290, 0, 1, 'Documentation', null),
            new Terminal(291, 'T_EXTEND', false),
            new Concatenation(292, ['ScalarDefinitionBody'], null),
            (new Concatenation('ScalarExtension', [290, 291, 292], 'ScalarExtension'))->setDefaultId('ScalarExtension'),
            new Repetition(294, 0, 1, 'Documentation', null),
            new Terminal(295, 'T_EXTEND', false),
            new Concatenation(296, ['SchemaDefinitionBody'], null),
            (new Concatenation('SchemaExtension', [294, 295, 296], 'SchemaExtension'))->setDefaultId('SchemaExtension'),
            new Repetition(298, 0, 1, 'Documentation', null),
            new Terminal(299, 'T_EXTEND', false),
            new Concatenation(300, ['UnionDefinitionBody'], null),
            (new Concatenation('UnionExtension', [298, 299, 'UnionDefinitionHead', 300], 'UnionExtension'))->setDefaultId('UnionExtension'),
            new Concatenation(302, ['UnionExtension'], null),
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InputUnionExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 302], null),
            new Terminal(304, 'T_COLON', false),
            new Concatenation(305, ['Value'], null),
            new Concatenation('ArgumentInvocation', ['NameWithReserved', 304, 305], null),
            new Repetition(307, 1, -1, 'Directive', null),
            (new Concatenation('Directives', [307], 'Directives'))->setDefaultId('Directives'),
            new Terminal(309, 'T_DIRECTIVE_AT', false),
            new Repetition(310, 0, 1, '__directiveInvocationArguments', null),
            (new Concatenation('Directive', [309, 'TypeName', 310], 'Directive'))->setDefaultId('Directive'),
            new Terminal(312, 'T_PARENTHESIS_OPEN', false),
            new Repetition(313, 0, -1, '__directiveInvocationArgument', null),
            new Terminal(314, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__directiveInvocationArguments', [312, 313, 314], null),
            new Concatenation('__directiveInvocationArgument', ['ArgumentInvocation'], 'DirectiveArgument'),
            new Concatenation(317, ['TypeName'], null),
            (new Concatenation('TypeInvocation', [317], 'TypeInvocation'))->setDefaultId('TypeInvocation'),
            new Concatenation('Invocation', ['Directive'], null),
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
