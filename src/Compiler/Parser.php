<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Compiler;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 03-08-2018 14:45:53
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INPUT_UNION = 'T_INPUT_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.\\.\\.',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)\\b',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)\\b',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => 'true\\b',
        self::T_FALSE => 'false\\b',
        self::T_NULL => 'null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").|\\s)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS => 'extends\\b',
        self::T_IMPLEMENTS => 'implements\\b',
        self::T_ON => 'on\\b',
        self::T_TYPE => 'type\\b',
        self::T_ENUM => 'enum\\b',
        self::T_UNION => 'union\\b',
        self::T_INPUT_UNION => 'inputUnion\\b',
        self::T_INTERFACE => 'interface\\b',
        self::T_SCHEMA => 'schema\\b',
        self::T_SCALAR => 'scalar\\b',
        self::T_DIRECTIVE => 'directive\\b',
        self::T_INPUT => 'input\\b',
        self::T_EXTEND => 'extend\\b',
        self::T_FRAGMENT => 'fragment\\b',
        self::T_VARIABLE => '\\$[_A-Za-z][_0-9A-Za-z]*',
        self::T_NAME => '[_A-Za-z][_0-9A-Za-z]*',
        self::T_WHITESPACE => '(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_COMMA',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'TypeName' => \Railt\SDL\Compiler\Ast\TypeNameNode::class,
        'Boolean' => \Railt\SDL\Compiler\Ast\Value\BooleanValueNode::class,
        'Number' => \Railt\SDL\Compiler\Ast\Value\NumberValueNode::class,
        'String' => \Railt\SDL\Compiler\Ast\Value\StringValueNode::class,
        'Null' => \Railt\SDL\Compiler\Ast\Value\NullValueNode::class,
        'Input' => \Railt\SDL\Compiler\Ast\Value\InputValueNode::class,
        'List' => \Railt\SDL\Compiler\Ast\Value\ListValueNode::class,
        'Constant' => \Railt\SDL\Compiler\Ast\Value\ConstantValueNode::class,
        'Value' => \Railt\SDL\Compiler\Ast\Value\ValueNode::class,
        'TypeHint' => \Railt\SDL\Compiler\Ast\TypeHintNode::class,
        'ArgumentDefinition' => \Railt\SDL\Compiler\Ast\Dependent\ArgumentDefinitionNode::class,
        'FieldDefinition' => \Railt\SDL\Compiler\Ast\Dependent\FieldDefinitionNode::class,
        'DirectiveDefinition' => \Railt\SDL\Compiler\Ast\Definition\DirectiveDefinitionNode::class,
        'EnumDefinition' => \Railt\SDL\Compiler\Ast\Definition\EnumDefinitionNode::class,
        'InputDefinition' => \Railt\SDL\Compiler\Ast\Definition\InputDefinitionNode::class,
        'InputUnionDefinition' => \Railt\SDL\Compiler\Ast\Definition\InputUnionDefinitionNode::class,
        'InterfaceDefinition' => \Railt\SDL\Compiler\Ast\Definition\InterfaceDefinitionNode::class,
        'ObjectDefinition' => \Railt\SDL\Compiler\Ast\Definition\ObjectDefinitionNode::class,
        'ScalarDefinition' => \Railt\SDL\Compiler\Ast\Definition\ScalarDefinitionNode::class,
        'SchemaDefinition' => \Railt\SDL\Compiler\Ast\Definition\SchemaDefinitionNode::class,
        'UnionDefinition' => \Railt\SDL\Compiler\Ast\Definition\UnionDefinitionNode::class,
        'Directive' => \Railt\SDL\Compiler\Ast\Dependent\DirectiveNode::class,
        'DirectiveArgument' => \Railt\SDL\Compiler\Ast\Dependent\DirectiveArgumentNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Repetition(0, 0, -1, 'DocumentImports', null), 
            new Repetition(1, 0, -1, 'DocumentDefinitions', null), 
            (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'), 
            new Concatenation('DocumentImports', ['Directive'], null), 
            new Concatenation(4, ['Definition'], null), 
            new Alternation('DocumentDefinitions', ['Extension', 4], null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(7, 'T_TRUE', true), 
            new Terminal(8, 'T_FALSE', true), 
            new Terminal(9, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 7, 8, 9], null), 
            new Terminal(11, 'T_NAMESPACE', true), 
            new Terminal(12, 'T_EXTENDS', true), 
            new Terminal(13, 'T_IMPLEMENTS', true), 
            new Terminal(14, 'T_ON', true), 
            new Terminal(15, 'T_TYPE', true), 
            new Terminal(16, 'T_ENUM', true), 
            new Terminal(17, 'T_UNION', true), 
            new Terminal(18, 'T_INPUT_UNION', true), 
            new Terminal(19, 'T_INTERFACE', true), 
            new Terminal(20, 'T_SCHEMA', true), 
            new Terminal(21, 'T_SCALAR', true), 
            new Terminal(22, 'T_DIRECTIVE', true), 
            new Terminal(23, 'T_INPUT', true), 
            new Terminal(24, 'T_EXTEND', true), 
            new Terminal(25, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null), 
            new Terminal(27, 'T_VARIABLE', true), 
            new Concatenation('Variable', [27], 'Variable'), 
            new Concatenation(29, ['NameWithReserved'], null), 
            (new Concatenation('TypeName', [29], 'TypeName'))->setDefaultId('TypeName'), 
            new Terminal(31, 'T_FALSE', true), 
            new Concatenation(32, [31], 'Boolean'), 
            new Terminal(33, 'T_TRUE', true), 
            new Concatenation(34, [33], 'Boolean'), 
            (new Alternation('Boolean', [32, 34], null))->setDefaultId('Boolean'), 
            new Terminal(36, 'T_NUMBER', true), 
            new Concatenation(37, [36], 'Number'), 
            new Terminal(38, 'T_HEX_NUMBER', true), 
            new Concatenation(39, [38], 'Number'), 
            new Terminal(40, 'T_BIN_NUMBER', true), 
            new Concatenation(41, [40], 'Number'), 
            (new Alternation('Number', [37, 39, 41], null))->setDefaultId('Number'), 
            new Terminal(43, 'T_BLOCK_STRING', true), 
            new Concatenation(44, [43], 'String'), 
            new Terminal(45, 'T_STRING', true), 
            new Concatenation(46, [45], 'String'), 
            (new Alternation('String', [44, 46], null))->setDefaultId('String'), 
            new Terminal(48, 'T_NULL', true), 
            (new Concatenation('Null', [48], 'Null'))->setDefaultId('Null'), 
            new Terminal(50, 'T_BRACE_OPEN', false), 
            new Repetition(51, 0, -1, '__inputPair', null), 
            new Terminal(52, 'T_BRACE_CLOSE', false), 
            (new Concatenation('Input', [50, 51, 52], 'Input'))->setDefaultId('Input'), 
            new Concatenation('__inputPairKey', ['NameWithReserved'], 'Key'), 
            new Terminal(55, 'T_COLON', false), 
            new Concatenation('__inputPair', ['__inputPairKey', 55, 'Value'], 'Pair'), 
            new Terminal(57, 'T_BRACKET_OPEN', false), 
            new Repetition(58, 0, -1, 'Value', null), 
            new Terminal(59, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('List', [57, 58, 59], 'List'))->setDefaultId('List'), 
            new Concatenation(61, ['NameExceptValues'], null), 
            (new Concatenation('Constant', [61], 'Constant'))->setDefaultId('Constant'), 
            new Concatenation(63, ['Constant'], 'Value'), 
            new Concatenation(64, ['Boolean'], 'Value'), 
            new Concatenation(65, ['Number'], 'Value'), 
            new Concatenation(66, ['String'], 'Value'), 
            new Concatenation(67, ['Input'], 'Value'), 
            new Concatenation(68, ['Null'], 'Value'), 
            new Concatenation(69, ['List'], null), 
            new Concatenation(70, [69], 'Value'), 
            (new Alternation('Value', [63, 64, 65, 66, 67, 68, 70], null))->setDefaultId('Value'), 
            new Concatenation('Documentation', ['String'], 'Description'), 
            new Terminal(73, 'T_IMPLEMENTS', false), 
            new Terminal(74, 'T_AND', false), 
            new Concatenation(75, [74, 'TypeName'], null), 
            new Repetition(76, 0, -1, 75, null), 
            new Concatenation('TypeDefinitionImplements', [73, 'TypeName', 76], 'Implements'), 
            new Concatenation(78, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(79, ['__typeHintValue'], null), 
            new Concatenation(80, [79], 'TypeHint'), 
            (new Alternation('TypeHint', [78, 80], null))->setDefaultId('TypeHint'), 
            new Terminal(82, 'T_BRACKET_OPEN', false), 
            new Terminal(83, 'T_BRACKET_CLOSE', false), 
            new Repetition(84, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintList', [82, '__typeHintValue', 83, 84], 'ListTypeHint'), 
            new Repetition(86, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintValue', ['TypeName', 86], 'SingularTypeHint'), 
            new Terminal(88, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNotNull', [88], 'NonNull'), 
            new Repetition(90, 0, 1, 'Documentation', null), 
            new Terminal(91, 'T_COLON', false), 
            new Repetition(92, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(93, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [90, 'NameWithReserved', 91, 'TypeHint', 92, 93], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(95, 'T_EQUAL', false), 
            new Concatenation(96, ['Value'], null), 
            new Concatenation('__argumentDefinitionDefaultValue', [95, 96], null), 
            new Repetition(98, 0, 1, 'Documentation', null), 
            new Repetition(99, 0, 1, '__fieldDefinitionArguments', null), 
            new Terminal(100, 'T_COLON', false), 
            new Repetition(101, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [98, 'NameWithReserved', 99, 100, 'TypeHint', 101], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Terminal(103, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(104, 0, -1, '__fieldDefinitionArgument', null), 
            new Terminal(105, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__fieldDefinitionArguments', [103, 104, 105], 'FieldArguments'), 
            new Repetition(107, 0, 1, 'Directives', null), 
            new Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 107], 'FieldArgument'), 
            new Repetition(109, 0, 1, 'Documentation', null), 
            new Concatenation(110, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [109, 110], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(112, 'T_DIRECTIVE', false), 
            new Terminal(113, 'T_DIRECTIVE_AT', false), 
            new Repetition(114, 0, 1, '__directiveDefinitionArguments', null), 
            new Terminal(115, 'T_ON', false), 
            new Concatenation(116, ['__directiveDefinitionLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [112, 113, 'TypeName', 114, 115, 116], null), 
            new Terminal(118, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(119, 0, -1, '__directiveDefinitionArgument', null), 
            new Terminal(120, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveDefinitionArguments', [118, 119, 120], null), 
            new Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], 'DirectiveArgument'), 
            new Terminal(123, 'T_OR', false), 
            new Repetition(124, 0, 1, 123, null), 
            new Repetition(125, 1, -1, '__directiveDefinitionLocation', null), 
            new Concatenation('__directiveDefinitionLocations', [124, 125], 'DirectiveLocations'), 
            new Terminal(127, 'T_OR', false), 
            new Concatenation(128, [127, 'NameWithReserved'], null), 
            new Repetition(129, 0, -1, 128, null), 
            new Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 129], null), 
            new Repetition(131, 0, 1, 'Documentation', null), 
            new Concatenation(132, ['EnumDefinitionBody'], null), 
            (new Concatenation('EnumDefinition', [131, 'EnumDefinitionHead', 132], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Terminal(134, 'T_ENUM', false), 
            new Repetition(135, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [134, 'TypeName', 135], null), 
            new Terminal(137, 'T_BRACE_OPEN', false), 
            new Terminal(138, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [137, '__enumDefinitionFields', 138], null), 
            new Repetition(140, 0, -1, '__enumDefinitionField', null), 
            new Concatenation('__enumDefinitionFields', [140], 'EnumValues'), 
            new Terminal(142, 'T_COLON', false), 
            new Terminal(143, 'T_EQUAL', false), 
            new Concatenation(144, ['Value'], null), 
            new Concatenation('__enumDefinitionValue', [142, 'TypeHint', 143, 144], null), 
            new Repetition(146, 0, 1, 'Documentation', null), 
            new Repetition(147, 0, 1, '__enumDefinitionValue', null), 
            new Repetition(148, 0, 1, 'Directives', null), 
            new Concatenation('__enumDefinitionField', [146, 'NameExceptValues', 147, 148], 'EnumValue'), 
            new Repetition(150, 0, 1, 'Documentation', null), 
            new Concatenation(151, ['InputDefinitionBody'], null), 
            (new Concatenation('InputDefinition', [150, 'InputDefinitionHead', 151], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Terminal(153, 'T_INPUT', false), 
            new Repetition(154, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [153, 'TypeName', 154], null), 
            new Terminal(156, 'T_BRACE_OPEN', false), 
            new Repetition(157, 0, -1, '__inputDefinitionField', null), 
            new Terminal(158, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [156, 157, 158], null), 
            new Concatenation('__inputDefinitionField', ['InputFieldDefinition'], null), 
            new Repetition(161, 0, 1, 'Documentation', null), 
            new Terminal(162, 'T_COLON', false), 
            new Repetition(163, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(164, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [161, 'NameWithReserved', 162, 'TypeHint', 163, 164], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Terminal(166, 'T_EQUAL', false), 
            new Concatenation(167, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [166, 167], null), 
            new Repetition(169, 0, 1, 'Documentation', null), 
            new Repetition(170, 0, 1, 'InputUnionDefinitionBody', null), 
            (new Concatenation('InputUnionDefinition', [169, 'InputUnionDefinitionHead', 170], 'InputUnionDefinition'))->setDefaultId('InputUnionDefinition'), 
            new Terminal(172, 'T_INPUT_UNION', false), 
            new Repetition(173, 0, 1, 'Directives', null), 
            new Concatenation('InputUnionDefinitionHead', [172, 'TypeName', 173], null), 
            new Terminal(175, 'T_EQUAL', false), 
            new Terminal(176, 'T_OR', false), 
            new Repetition(177, 0, 1, 176, null), 
            new Repetition(178, 1, -1, '__inputUnionDefinitionTargets', null), 
            new Concatenation('InputUnionDefinitionBody', [175, 177, 178], null), 
            new Terminal(180, 'T_OR', false), 
            new Concatenation(181, [180, 'TypeName'], null), 
            new Repetition(182, 0, -1, 181, null), 
            new Concatenation('__inputUnionDefinitionTargets', ['TypeName', 182], null), 
            new Repetition(184, 0, 1, 'Documentation', null), 
            new Concatenation(185, ['InterfaceDefinitionBody'], null), 
            (new Concatenation('InterfaceDefinition', [184, 'InterfaceDefinitionHead', 185], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Terminal(187, 'T_INTERFACE', false), 
            new Repetition(188, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(189, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [187, 'TypeName', 188, 189], null), 
            new Terminal(191, 'T_BRACE_OPEN', false), 
            new Repetition(192, 0, 1, '__interfaceFieldDefinitions', null), 
            new Repetition(193, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(194, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [191, 192, 193, 194], null), 
            new Repetition(196, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__interfaceFieldDefinitions', [196], 'FieldDefinitions'), 
            new Repetition(198, 0, 1, 'Documentation', null), 
            new Concatenation(199, ['ObjectDefinitionBody'], null), 
            (new Concatenation('ObjectDefinition', [198, 'ObjectDefinitionHead', 199], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Terminal(201, 'T_TYPE', false), 
            new Repetition(202, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(203, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [201, 'TypeName', 202, 203], null), 
            new Terminal(205, 'T_BRACE_OPEN', false), 
            new Repetition(206, 0, 1, '__objectFieldDefinitions', null), 
            new Repetition(207, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(208, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [205, 206, 207, 208], null), 
            new Repetition(210, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__objectFieldDefinitions', [210], 'FieldDefinitions'), 
            new Repetition(212, 0, 1, 'Documentation', null), 
            new Concatenation(213, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [212, 213], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Terminal(215, 'T_SCALAR', false), 
            new Repetition(216, 0, 1, '__scalarExtends', null), 
            new Repetition(217, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [215, 'TypeName', 216, 217], null), 
            new Terminal(219, 'T_EXTENDS', false), 
            new Concatenation('__scalarExtends', [219, 'TypeName'], 'Extends'), 
            new Repetition(221, 0, 1, 'Documentation', null), 
            new Concatenation(222, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaDefinition', [221, 222], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Terminal(224, 'T_SCHEMA', false), 
            new Repetition(225, 0, 1, 'TypeName', null), 
            new Terminal(226, 'T_BRACE_OPEN', false), 
            new Repetition(227, 0, -1, '__schemaField', null), 
            new Terminal(228, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [224, 225, 226, 227, 228], null), 
            new Repetition(230, 0, 1, 'Documentation', null), 
            new Terminal(231, 'T_COLON', false), 
            new Concatenation('__schemaField', [230, 'NameWithReserved', 231, 'TypeName'], 'SchemaField'), 
            new Repetition(233, 0, 1, 'Documentation', null), 
            new Repetition(234, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [233, 'UnionDefinitionHead', 234], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Terminal(236, 'T_UNION', false), 
            new Repetition(237, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [236, 'TypeName', 237], null), 
            new Terminal(239, 'T_EQUAL', false), 
            new Terminal(240, 'T_OR', false), 
            new Repetition(241, 0, 1, 240, null), 
            new Repetition(242, 1, -1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [239, 241, 242], null), 
            new Terminal(244, 'T_OR', false), 
            new Concatenation(245, [244, 'TypeName'], null), 
            new Repetition(246, 0, -1, 245, null), 
            new Concatenation('__unionDefinitionTargets', ['TypeName', 246], null), 
            new Concatenation(248, ['__typeDefinitions'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 248], null), 
            new Concatenation(250, ['__typeDefinitions'], null), 
            (new Concatenation('ChildrenDefinitions', [250], 'ChildrenDefinitions'))->setDefaultId('ChildrenDefinitions'), 
            new Concatenation(252, ['UnionDefinition'], null), 
            new Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InputUnionDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 252], null), 
            new Repetition(254, 0, 1, 'Documentation', null), 
            new Terminal(255, 'T_EXTEND', false), 
            new Concatenation(256, ['__enumExtensionVariants'], null), 
            (new Concatenation('EnumExtension', [254, 255, 256], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Concatenation(258, ['EnumDefinitionHead', 'EnumDefinitionBody'], null), 
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 258], null), 
            new Repetition(260, 0, 1, 'Documentation', null), 
            new Terminal(261, 'T_EXTEND', false), 
            new Concatenation(262, ['__inputExtensionVariants'], null), 
            (new Concatenation('InputExtension', [260, 261, 262], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Concatenation(264, ['InputDefinitionHead', 'InputDefinitionBody'], null), 
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 264], null), 
            new Repetition(266, 0, 1, 'Documentation', null), 
            new Terminal(267, 'T_EXTEND', false), 
            new Concatenation(268, ['InputUnionDefinitionBody'], null), 
            (new Concatenation('InputUnionExtension', [266, 267, 'InputUnionDefinitionHead', 268], 'InputUnionExtension'))->setDefaultId('InputUnionExtension'), 
            new Repetition(270, 0, 1, 'Documentation', null), 
            new Terminal(271, 'T_EXTEND', false), 
            new Concatenation(272, ['__interfaceExtensionVariants'], null), 
            (new Concatenation('InterfaceExtension', [270, 271, 272], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Concatenation(274, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null), 
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 274], null), 
            new Repetition(276, 0, 1, 'Documentation', null), 
            new Terminal(277, 'T_EXTEND', false), 
            new Concatenation(278, ['__objectExtensionVariants'], null), 
            (new Concatenation('ObjectExtension', [276, 277, 278], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Concatenation(280, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null), 
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 280], null), 
            new Repetition(282, 0, 1, 'Documentation', null), 
            new Terminal(283, 'T_EXTEND', false), 
            new Concatenation(284, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarExtension', [282, 283, 284], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Repetition(286, 0, 1, 'Documentation', null), 
            new Terminal(287, 'T_EXTEND', false), 
            new Concatenation(288, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaExtension', [286, 287, 288], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Repetition(290, 0, 1, 'Documentation', null), 
            new Terminal(291, 'T_EXTEND', false), 
            new Concatenation(292, ['UnionDefinitionBody'], null), 
            (new Concatenation('UnionExtension', [290, 291, 'UnionDefinitionHead', 292], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Concatenation(294, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InputUnionExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 294], null), 
            new Repetition(296, 1, -1, 'Directive', null), 
            (new Concatenation('Directives', [296], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(298, 'T_DIRECTIVE_AT', false), 
            new Repetition(299, 0, 1, '__directiveInvocationArgumentsGroup', null), 
            (new Concatenation('Directive', [298, 'TypeName', 299], 'Directive'))->setDefaultId('Directive'), 
            new Terminal(301, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(302, 0, 1, '__directiveInvocationArguments', null), 
            new Terminal(303, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveInvocationArgumentsGroup', [301, 302, 303], null), 
            new Repetition(305, 1, -1, 'DirectiveArgument', null), 
            new Concatenation('__directiveInvocationArguments', [305], 'DirectiveArguments'), 
            new Terminal(307, 'T_COLON', false), 
            new Concatenation(308, ['Value'], null), 
            (new Concatenation('DirectiveArgument', ['NameWithReserved', 307, 308], 'DirectiveArgument'))->setDefaultId('DirectiveArgument'), 
            new Concatenation('Invocation', ['Directive'], null)
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
