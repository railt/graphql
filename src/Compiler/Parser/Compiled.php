<?php
/**
 * This file is part of Parser package.
 *
 * For the full copyright and license information, please view the
 * LICENSE file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Compiler\Parser;

use Railt\Compiler\Lexer\NativeStateful as CompiledLexer;
use Railt\Compiler\Parser\Runtime as CompiledRuntime;

/**
 * This class has been auto-generated by the Railt\Compiler\Generator
 */
final class Compiled extends CompiledRuntime
{
    /**#@+
     * List of Compiled::class tokens defined as public constants
     */
    public const T_AND                 = 'T_AND';
    public const T_OR                  = 'T_OR';
    public const T_PARENTHESIS_OPEN    = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE   = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN        = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE       = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN          = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE         = 'T_BRACE_CLOSE';
    public const T_NON_NULL            = 'T_NON_NULL';
    public const T_THREE_DOTS          = 'T_THREE_DOTS';
    public const T_COLON               = 'T_COLON';
    public const T_EQUAL               = 'T_EQUAL';
    public const T_DIRECTIVE_AT        = 'T_DIRECTIVE_AT';
    public const T_NUMBER              = 'T_NUMBER';
    public const T_TRUE                = 'T_TRUE';
    public const T_FALSE               = 'T_FALSE';
    public const T_NULL                = 'T_NULL';
    public const T_BLOCK_STRING        = 'T_BLOCK_STRING';
    public const T_STRING              = 'T_STRING';
    public const T_NAMESPACE           = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_EXTENDS             = 'T_EXTENDS';
    public const T_IMPLEMENTS          = 'T_IMPLEMENTS';
    public const T_ON                  = 'T_ON';
    public const T_TYPE                = 'T_TYPE';
    public const T_ENUM                = 'T_ENUM';
    public const T_UNION               = 'T_UNION';
    public const T_INPUT_UNION         = 'T_INPUT_UNION';
    public const T_INTERFACE           = 'T_INTERFACE';
    public const T_SCHEMA              = 'T_SCHEMA';
    public const T_SCALAR              = 'T_SCALAR';
    public const T_DIRECTIVE           = 'T_DIRECTIVE';
    public const T_INPUT               = 'T_INPUT';
    public const T_EXTEND              = 'T_EXTEND';
    public const T_FRAGMENT            = 'T_FRAGMENT';
    public const T_VARIABLE            = 'T_VARIABLE';
    public const T_NAME                = 'T_NAME';
    public const T_WHITESPACE          = 'T_WHITESPACE';
    public const T_COMMENT             = 'T_COMMENT';
    public const T_COMMA               = 'T_COMMA';
    /**#@-*/

    public function __construct()
    {
        parent::__construct(new CompiledLexer('/\\G(?P<T_AND>&)|(?P<T_OR>\\|)|(?P<T_PARENTHESIS_OPEN>\\()|(?P<T_PARENTHESIS_CLOSE>\\))|(?P<T_BRACKET_OPEN>\\[)|(?P<T_BRACKET_CLOSE>\\])|(?P<T_BRACE_OPEN>{)|(?P<T_BRACE_CLOSE>})|(?P<T_NON_NULL>!)|(?P<T_THREE_DOTS>\\.\\.\\.)|(?P<T_COLON>:)|(?P<T_EQUAL>=)|(?P<T_DIRECTIVE_AT>@)|(?P<T_NUMBER>\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?\\b)|(?P<T_TRUE>true\\b)|(?P<T_FALSE>false\\b)|(?P<T_NULL>null\\b)|(?P<T_BLOCK_STRING>"""(?:\\\\"""|(?!""").|\\s)+""")|(?P<T_STRING>"[^"\\\\]+(\\\\.[^"\\\\]*)*")|(?P<T_NAMESPACE>namespace\\b)|(?P<T_NAMESPACE_SEPARATOR>\\/)|(?P<T_EXTENDS>extends\\b)|(?P<T_IMPLEMENTS>implements\\b)|(?P<T_ON>on\\b)|(?P<T_TYPE>type\\b)|(?P<T_ENUM>enum\\b)|(?P<T_UNION>union\\b)|(?P<T_INPUT_UNION>inputUnion\\b)|(?P<T_INTERFACE>interface\\b)|(?P<T_SCHEMA>schema\\b)|(?P<T_SCALAR>scalar\\b)|(?P<T_DIRECTIVE>directive\\b)|(?P<T_INPUT>input\\b)|(?P<T_EXTEND>extend\\b)|(?P<T_FRAGMENT>fragment\\b)|(?P<T_VARIABLE>\\$[_A-Za-z][_0-9A-Za-z]*)|(?P<T_NAME>[_A-Za-z][_0-9A-Za-z]*)|(?P<T_WHITESPACE>(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+)|(?P<T_COMMENT>#[^\\n]*)|(?P<T_COMMA>,)|(?P<T_UNKNOWN>.*?)/usS', ['T_WHITESPACE', 'T_COMMENT', 'T_COMMA']), [
                            0 =>
new \Railt\Compiler\Parser\Rule\Repetition(0, 0, -1, ['DocumentImports'], null),
                            1 =>
new \Railt\Compiler\Parser\Rule\Repetition(1, 0, -1, ['DocumentDefinitions'], null),
                            'Document' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Document', [0, 1], '#Document'),
                            'DocumentImports' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DocumentImports', ['Directive'], null),
                            'DocumentDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('DocumentDefinitions', ['Extension', 'Definition'], null),
                            'NameWithoutReserved' =>
new \Railt\Compiler\Parser\Rule\Token('NameWithoutReserved', 'T_NAME', true),
                            6 =>
new \Railt\Compiler\Parser\Rule\Token(6, 'T_TRUE', true),
                            7 =>
new \Railt\Compiler\Parser\Rule\Token(7, 'T_FALSE', true),
                            8 =>
new \Railt\Compiler\Parser\Rule\Token(8, 'T_NULL', true),
                            9 =>
new \Railt\Compiler\Parser\Rule\Alternation(9, ['NameExceptValues', 6, 7, 8], null),
                            'NameWithReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithReserved', [9], '#Name'),
                            11 =>
new \Railt\Compiler\Parser\Rule\Token(11, 'T_NAMESPACE', true),
                            12 =>
new \Railt\Compiler\Parser\Rule\Token(12, 'T_EXTENDS', true),
                            13 =>
new \Railt\Compiler\Parser\Rule\Token(13, 'T_IMPLEMENTS', true),
                            14 =>
new \Railt\Compiler\Parser\Rule\Token(14, 'T_ON', true),
                            15 =>
new \Railt\Compiler\Parser\Rule\Token(15, 'T_TYPE', true),
                            16 =>
new \Railt\Compiler\Parser\Rule\Token(16, 'T_ENUM', true),
                            17 =>
new \Railt\Compiler\Parser\Rule\Token(17, 'T_UNION', true),
                            18 =>
new \Railt\Compiler\Parser\Rule\Token(18, 'T_INPUT_UNION', true),
                            19 =>
new \Railt\Compiler\Parser\Rule\Token(19, 'T_INTERFACE', true),
                            20 =>
new \Railt\Compiler\Parser\Rule\Token(20, 'T_SCHEMA', true),
                            21 =>
new \Railt\Compiler\Parser\Rule\Token(21, 'T_SCALAR', true),
                            22 =>
new \Railt\Compiler\Parser\Rule\Token(22, 'T_DIRECTIVE', true),
                            23 =>
new \Railt\Compiler\Parser\Rule\Token(23, 'T_INPUT', true),
                            24 =>
new \Railt\Compiler\Parser\Rule\Token(24, 'T_EXTEND', true),
                            25 =>
new \Railt\Compiler\Parser\Rule\Token(25, 'T_FRAGMENT', true),
                            'NameExceptValues' =>
new \Railt\Compiler\Parser\Rule\Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null),
                            27 =>
new \Railt\Compiler\Parser\Rule\Token(27, 'T_VARIABLE', true),
                            'Variable' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Variable', [27], '#Variable'),
                            29 =>
new \Railt\Compiler\Parser\Rule\Repetition(29, 0, 1, ['GlobalTypeNamespace'], null),
                            'TypeName' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeName', [29, '__namespace', 'NameWithReserved'], '#TypeName'),
                            31 =>
new \Railt\Compiler\Parser\Rule\Token(31, 'T_NAMESPACE_SEPARATOR', false),
                            32 =>
new \Railt\Compiler\Parser\Rule\Concatenation(32, ['NameWithReserved', 31], null),
                            '__namespace' =>
new \Railt\Compiler\Parser\Rule\Repetition('__namespace', 0, -1, [32], null),
                            34 =>
new \Railt\Compiler\Parser\Rule\Token(34, 'T_NAMESPACE_SEPARATOR', false),
                            'GlobalTypeNamespace' =>
new \Railt\Compiler\Parser\Rule\Concatenation('GlobalTypeNamespace', [34], '#GlobalTypeNamespace'),
                            36 =>
new \Railt\Compiler\Parser\Rule\Token(36, 'T_FALSE', true),
                            37 =>
new \Railt\Compiler\Parser\Rule\Concatenation(37, [36], '#Boolean'),
                            38 =>
new \Railt\Compiler\Parser\Rule\Token(38, 'T_TRUE', true),
                            39 =>
new \Railt\Compiler\Parser\Rule\Concatenation(39, [38], '#Boolean'),
                            'Boolean' =>
new \Railt\Compiler\Parser\Rule\Alternation('Boolean', [37, 39], null),
                            41 =>
new \Railt\Compiler\Parser\Rule\Token(41, 'T_NUMBER', true),
                            'Number' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Number', [41], '#Number'),
                            43 =>
new \Railt\Compiler\Parser\Rule\Token(43, 'T_BLOCK_STRING', true),
                            44 =>
new \Railt\Compiler\Parser\Rule\Concatenation(44, [43], '#String'),
                            45 =>
new \Railt\Compiler\Parser\Rule\Token(45, 'T_STRING', true),
                            46 =>
new \Railt\Compiler\Parser\Rule\Concatenation(46, [45], '#String'),
                            'String' =>
new \Railt\Compiler\Parser\Rule\Alternation('String', [44, 46], null),
                            48 =>
new \Railt\Compiler\Parser\Rule\Token(48, 'T_NULL', true),
                            'Null' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Null', [48], '#Null'),
                            50 =>
new \Railt\Compiler\Parser\Rule\Token(50, 'T_BRACE_OPEN', false),
                            51 =>
new \Railt\Compiler\Parser\Rule\Repetition(51, 0, -1, ['__inputPair'], null),
                            52 =>
new \Railt\Compiler\Parser\Rule\Token(52, 'T_BRACE_CLOSE', false),
                            'Input' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Input', [50, 51, 52], '#Input'),
                            54 =>
new \Railt\Compiler\Parser\Rule\Token(54, 'T_COLON', false),
                            '__inputPair' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputPair', ['NameWithReserved', 54, 'Value'], '#Pair'),
                            56 =>
new \Railt\Compiler\Parser\Rule\Token(56, 'T_BRACKET_OPEN', false),
                            57 =>
new \Railt\Compiler\Parser\Rule\Repetition(57, 0, -1, ['Value'], null),
                            58 =>
new \Railt\Compiler\Parser\Rule\Token(58, 'T_BRACKET_CLOSE', false),
                            'List' =>
new \Railt\Compiler\Parser\Rule\Concatenation('List', [56, 57, 58], '#List'),
                            60 =>
new \Railt\Compiler\Parser\Rule\Concatenation(60, ['NameWithReserved'], '#Value'),
                            61 =>
new \Railt\Compiler\Parser\Rule\Concatenation(61, ['Boolean'], '#Value'),
                            62 =>
new \Railt\Compiler\Parser\Rule\Concatenation(62, ['Number'], '#Value'),
                            63 =>
new \Railt\Compiler\Parser\Rule\Concatenation(63, ['String'], '#Value'),
                            64 =>
new \Railt\Compiler\Parser\Rule\Concatenation(64, ['Input'], '#Value'),
                            65 =>
new \Railt\Compiler\Parser\Rule\Concatenation(65, ['Null'], '#Value'),
                            66 =>
new \Railt\Compiler\Parser\Rule\Concatenation(66, ['List'], '#Value'),
                            'Value' =>
new \Railt\Compiler\Parser\Rule\Alternation('Value', [60, 61, 62, 63, 64, 65, 66], null),
                            'Documentation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Documentation', ['String'], '#Description'),
                            69 =>
new \Railt\Compiler\Parser\Rule\Token(69, 'T_IMPLEMENTS', false),
                            70 =>
new \Railt\Compiler\Parser\Rule\Token(70, 'T_AND', false),
                            71 =>
new \Railt\Compiler\Parser\Rule\Concatenation(71, [70, 'TypeInvocation'], null),
                            72 =>
new \Railt\Compiler\Parser\Rule\Repetition(72, 0, -1, [71], null),
                            'TypeDefinitionImplements' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeDefinitionImplements', [69, 'TypeInvocation', 72], '#Implements'),
                            74 =>
new \Railt\Compiler\Parser\Rule\Token(74, 'T_PARENTHESIS_OPEN', false),
                            75 =>
new \Railt\Compiler\Parser\Rule\Repetition(75, 0, -1, ['__genericArgumentDefinition'], null),
                            76 =>
new \Railt\Compiler\Parser\Rule\Token(76, 'T_PARENTHESIS_CLOSE', false),
                            'TypeArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeArguments', [74, 75, 76], '#TypeArguments'),
                            78 =>
new \Railt\Compiler\Parser\Rule\Token(78, 'T_COLON', false),
                            '__genericArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__genericArgumentDefinition', ['Variable', 78, 'TypeName'], '#TypeArgument'),
                            80 =>
new \Railt\Compiler\Parser\Rule\Concatenation(80, ['__typeHintList'], '#TypeHint'),
                            81 =>
new \Railt\Compiler\Parser\Rule\Concatenation(81, ['__typeHintValue'], '#TypeHint'),
                            'TypeHint' =>
new \Railt\Compiler\Parser\Rule\Alternation('TypeHint', [80, 81], null),
                            83 =>
new \Railt\Compiler\Parser\Rule\Token(83, 'T_BRACKET_OPEN', false),
                            84 =>
new \Railt\Compiler\Parser\Rule\Token(84, 'T_BRACKET_CLOSE', false),
                            85 =>
new \Railt\Compiler\Parser\Rule\Repetition(85, 0, 1, ['__typeHintNotNull'], null),
                            '__typeHintList' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintList', [83, '__typeHintValue', 84, 85], '#List'),
                            87 =>
new \Railt\Compiler\Parser\Rule\Repetition(87, 0, 1, ['__typeHintNotNull'], null),
                            '__typeHintValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintValue', ['TypeInvocation', 87], '#Value'),
                            89 =>
new \Railt\Compiler\Parser\Rule\Token(89, 'T_NON_NULL', false),
                            '__typeHintNotNull' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintNotNull', [89], '#NonNull'),
                            91 =>
new \Railt\Compiler\Parser\Rule\Repetition(91, 0, 1, ['Documentation'], null),
                            92 =>
new \Railt\Compiler\Parser\Rule\Token(92, 'T_COLON', false),
                            93 =>
new \Railt\Compiler\Parser\Rule\Repetition(93, 0, 1, ['__argumentDefinitionDefaultValue'], null),
                            'ArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentDefinition', [91, 'NameWithReserved', 92, 'TypeHint', 93], '#ArgumentDefinition'),
                            95 =>
new \Railt\Compiler\Parser\Rule\Token(95, 'T_EQUAL', false),
                            '__argumentDefinitionDefaultValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__argumentDefinitionDefaultValue', [95, 'Value'], null),
                            97 =>
new \Railt\Compiler\Parser\Rule\Repetition(97, 0, 1, ['Documentation'], null),
                            98 =>
new \Railt\Compiler\Parser\Rule\Repetition(98, 0, 1, ['__fieldDefinitionArguments'], null),
                            99 =>
new \Railt\Compiler\Parser\Rule\Token(99, 'T_COLON', false),
                            'FieldDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('FieldDefinition', [97, 'NameWithReserved', 98, 99, 'TypeHint', 'Directives'], '#FieldDefinition'),
                            101 =>
new \Railt\Compiler\Parser\Rule\Token(101, 'T_PARENTHESIS_OPEN', false),
                            102 =>
new \Railt\Compiler\Parser\Rule\Repetition(102, 0, -1, ['__fieldDefinitionArgument'], null),
                            103 =>
new \Railt\Compiler\Parser\Rule\Token(103, 'T_PARENTHESIS_CLOSE', false),
                            '__fieldDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArguments', [101, 102, 103], '#FieldArguments'),
                            '__fieldDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 'Directives'], '#FieldArgument'),
                            106 =>
new \Railt\Compiler\Parser\Rule\Repetition(106, 0, 1, ['Documentation'], null),
                            'DirectiveDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinition', [106, 'DirectiveDefinitionBody'], '#DirectiveDefinition'),
                            108 =>
new \Railt\Compiler\Parser\Rule\Token(108, 'T_DIRECTIVE', false),
                            109 =>
new \Railt\Compiler\Parser\Rule\Token(109, 'T_DIRECTIVE_AT', false),
                            110 =>
new \Railt\Compiler\Parser\Rule\Repetition(110, 0, 1, ['__directiveDefinitionArguments'], null),
                            111 =>
new \Railt\Compiler\Parser\Rule\Token(111, 'T_ON', false),
                            'DirectiveDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinitionBody', [108, 109, 'TypeName', 110, 111, '__directiveDefinitionLocations'], null),
                            113 =>
new \Railt\Compiler\Parser\Rule\Token(113, 'T_PARENTHESIS_OPEN', false),
                            114 =>
new \Railt\Compiler\Parser\Rule\Repetition(114, 0, -1, ['__directiveDefinitionArgument'], null),
                            115 =>
new \Railt\Compiler\Parser\Rule\Token(115, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArguments', [113, 114, 115], null),
                            '__directiveDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], '#DirectiveArgument'),
                            118 =>
new \Railt\Compiler\Parser\Rule\Token(118, 'T_OR', false),
                            119 =>
new \Railt\Compiler\Parser\Rule\Repetition(119, 0, 1, [118], null),
                            120 =>
new \Railt\Compiler\Parser\Rule\Repetition(120, 1, -1, ['__directiveDefinitionLocation'], null),
                            '__directiveDefinitionLocations' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocations', [119, 120], '#DirectiveLocations'),
                            122 =>
new \Railt\Compiler\Parser\Rule\Token(122, 'T_OR', false),
                            123 =>
new \Railt\Compiler\Parser\Rule\Concatenation(123, [122, 'NameWithReserved'], null),
                            124 =>
new \Railt\Compiler\Parser\Rule\Repetition(124, 0, -1, [123], null),
                            '__directiveDefinitionLocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 124], null),
                            126 =>
new \Railt\Compiler\Parser\Rule\Repetition(126, 0, 1, ['Documentation'], null),
                            'EnumDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinition', [126, 'EnumDefinitionHead', 'EnumDefinitionBody'], '#EnumDefinition'),
                            128 =>
new \Railt\Compiler\Parser\Rule\Token(128, 'T_ENUM', false),
                            'EnumDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionHead', [128, 'TypeName', 'Directives'], null),
                            130 =>
new \Railt\Compiler\Parser\Rule\Token(130, 'T_BRACE_OPEN', false),
                            131 =>
new \Railt\Compiler\Parser\Rule\Repetition(131, 1, -1, ['__enumDefinitionValue'], null),
                            132 =>
new \Railt\Compiler\Parser\Rule\Token(132, 'T_BRACE_CLOSE', false),
                            'EnumDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionBody', [130, 131, 132], null),
                            134 =>
new \Railt\Compiler\Parser\Rule\Repetition(134, 0, 1, ['Documentation'], null),
                            '__enumDefinitionValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__enumDefinitionValue', [134, 'NameExceptValues', 'Directives'], '#EnumValue'),
                            136 =>
new \Railt\Compiler\Parser\Rule\Repetition(136, 0, 1, ['Documentation'], null),
                            'InputDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinition', [136, 'InputDefinitionHead', 'InputDefinitionBody'], '#InputDefinition'),
                            138 =>
new \Railt\Compiler\Parser\Rule\Token(138, 'T_INPUT', false),
                            'InputDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionHead', [138, 'TypeName', 'Directives'], null),
                            140 =>
new \Railt\Compiler\Parser\Rule\Token(140, 'T_BRACE_OPEN', false),
                            141 =>
new \Railt\Compiler\Parser\Rule\Repetition(141, 0, -1, ['__inputDefinitionField'], null),
                            142 =>
new \Railt\Compiler\Parser\Rule\Token(142, 'T_BRACE_CLOSE', false),
                            'InputDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionBody', [140, 141, 142], null),
                            '__inputDefinitionField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputDefinitionField', ['ArgumentDefinition', 'Directives'], '#InputField'),
                            145 =>
new \Railt\Compiler\Parser\Rule\Repetition(145, 0, 1, ['Documentation'], null),
                            'InterfaceDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinition', [145, 'InterfaceDefinitionHead', 'InterfaceDefinitionBody'], '#InterfaceDefinition'),
                            147 =>
new \Railt\Compiler\Parser\Rule\Token(147, 'T_INTERFACE', false),
                            148 =>
new \Railt\Compiler\Parser\Rule\Repetition(148, 0, 1, ['TypeArguments'], null),
                            149 =>
new \Railt\Compiler\Parser\Rule\Repetition(149, 0, 1, ['TypeDefinitionImplements'], null),
                            'InterfaceDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionHead', [147, 'TypeName', 148, 149, 'Directives'], null),
                            151 =>
new \Railt\Compiler\Parser\Rule\Token(151, 'T_BRACE_OPEN', false),
                            152 =>
new \Railt\Compiler\Parser\Rule\Repetition(152, 0, 1, ['__interfaceFieldDefinitions'], null),
                            153 =>
new \Railt\Compiler\Parser\Rule\Repetition(153, 0, 1, ['ChildrenDefinitions'], null),
                            154 =>
new \Railt\Compiler\Parser\Rule\Token(154, 'T_BRACE_CLOSE', false),
                            'InterfaceDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionBody', [151, 152, 153, 154], null),
                            156 =>
new \Railt\Compiler\Parser\Rule\Repetition(156, 0, -1, ['FieldDefinition'], null),
                            '__interfaceFieldDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__interfaceFieldDefinitions', [156], '#FieldDefinitions'),
                            158 =>
new \Railt\Compiler\Parser\Rule\Repetition(158, 0, 1, ['Documentation'], null),
                            'ObjectDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinition', [158, 'ObjectDefinitionHead', 'ObjectDefinitionBody'], '#ObjectDefinition'),
                            160 =>
new \Railt\Compiler\Parser\Rule\Token(160, 'T_TYPE', false),
                            161 =>
new \Railt\Compiler\Parser\Rule\Repetition(161, 0, 1, ['TypeArguments'], null),
                            162 =>
new \Railt\Compiler\Parser\Rule\Repetition(162, 0, 1, ['TypeDefinitionImplements'], null),
                            'ObjectDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionHead', [160, 'TypeName', 161, 162, 'Directives'], null),
                            164 =>
new \Railt\Compiler\Parser\Rule\Token(164, 'T_BRACE_OPEN', false),
                            165 =>
new \Railt\Compiler\Parser\Rule\Repetition(165, 0, 1, ['__objectFieldDefinitions'], null),
                            166 =>
new \Railt\Compiler\Parser\Rule\Repetition(166, 0, 1, ['ChildrenDefinitions'], null),
                            167 =>
new \Railt\Compiler\Parser\Rule\Token(167, 'T_BRACE_CLOSE', false),
                            'ObjectDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionBody', [164, 165, 166, 167], null),
                            169 =>
new \Railt\Compiler\Parser\Rule\Repetition(169, 0, -1, ['FieldDefinition'], null),
                            '__objectFieldDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__objectFieldDefinitions', [169], '#FieldDefinitions'),
                            171 =>
new \Railt\Compiler\Parser\Rule\Repetition(171, 0, 1, ['Documentation'], null),
                            'ScalarDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinition', [171, 'ScalarDefinitionBody'], '#ScalarDefinition'),
                            173 =>
new \Railt\Compiler\Parser\Rule\Token(173, 'T_SCALAR', false),
                            174 =>
new \Railt\Compiler\Parser\Rule\Repetition(174, 0, 1, ['__scalarExtends'], null),
                            'ScalarDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinitionBody', [173, 'TypeName', 174, 'Directives'], null),
                            176 =>
new \Railt\Compiler\Parser\Rule\Token(176, 'T_EXTENDS', false),
                            '__scalarExtends' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__scalarExtends', [176, 'TypeName'], '#Extends'),
                            178 =>
new \Railt\Compiler\Parser\Rule\Repetition(178, 0, 1, ['Documentation'], null),
                            'SchemaDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinition', [178, 'SchemaDefinitionBody'], '#SchemaDefinition'),
                            180 =>
new \Railt\Compiler\Parser\Rule\Token(180, 'T_SCHEMA', false),
                            181 =>
new \Railt\Compiler\Parser\Rule\Repetition(181, 0, 1, ['TypeName'], null),
                            182 =>
new \Railt\Compiler\Parser\Rule\Token(182, 'T_BRACE_OPEN', false),
                            183 =>
new \Railt\Compiler\Parser\Rule\Repetition(183, 0, -1, ['__schemaField'], null),
                            184 =>
new \Railt\Compiler\Parser\Rule\Token(184, 'T_BRACE_CLOSE', false),
                            'SchemaDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinitionBody', [180, 181, 182, 183, 184], null),
                            186 =>
new \Railt\Compiler\Parser\Rule\Token(186, 'T_COLON', false),
                            '__schemaField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__schemaField', ['NameWithReserved', 186, 'TypeName'], '#SchemaField'),
                            188 =>
new \Railt\Compiler\Parser\Rule\Repetition(188, 0, 1, ['Documentation'], null),
                            'UnionDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinition', [188, 'UnionDefinitionBody'], '#UnionDefinition'),
                            190 =>
new \Railt\Compiler\Parser\Rule\Token(190, 'T_UNION', false),
                            191 =>
new \Railt\Compiler\Parser\Rule\Token(191, 'T_EQUAL', false),
                            192 =>
new \Railt\Compiler\Parser\Rule\Token(192, 'T_OR', false),
                            193 =>
new \Railt\Compiler\Parser\Rule\Repetition(193, 0, 1, [192], null),
                            194 =>
new \Railt\Compiler\Parser\Rule\Repetition(194, 1, -1, ['__unionDefinitionTargets'], null),
                            'UnionDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinitionBody', [190, 'TypeName', 'Directives', 191, 193, 194], null),
                            196 =>
new \Railt\Compiler\Parser\Rule\Token(196, 'T_OR', false),
                            197 =>
new \Railt\Compiler\Parser\Rule\Concatenation(197, [196, 'TypeName'], null),
                            198 =>
new \Railt\Compiler\Parser\Rule\Repetition(198, 0, -1, [197], null),
                            '__unionDefinitionTargets' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__unionDefinitionTargets', ['TypeName', 198], null),
                            'Definition' =>
new \Railt\Compiler\Parser\Rule\Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', '__typeDefinitions'], null),
                            201 =>
new \Railt\Compiler\Parser\Rule\Concatenation(201, ['__typeDefinitions'], null),
                            'ChildrenDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ChildrenDefinitions', [201], '#ChildrenDefinitions'),
                            '__typeDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 'UnionDefinition'], null),
                            204 =>
new \Railt\Compiler\Parser\Rule\Token(204, 'T_EXTEND', false),
                            'EnumExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumExtension', [204, '__enumExtensionVariants'], '#EnumExtension'),
                            206 =>
new \Railt\Compiler\Parser\Rule\Concatenation(206, ['EnumDefinitionHead', 'EnumDefinitionBody'], null),
                            '__enumExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 206], null),
                            208 =>
new \Railt\Compiler\Parser\Rule\Token(208, 'T_EXTEND', false),
                            'InputExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputExtension', [208, '__inputExtensionVariants'], '#InputExtension'),
                            210 =>
new \Railt\Compiler\Parser\Rule\Concatenation(210, ['InputDefinitionHead', 'InputDefinitionBody'], null),
                            '__inputExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__inputExtensionVariants', ['InputDefinitionHead', 210], null),
                            212 =>
new \Railt\Compiler\Parser\Rule\Token(212, 'T_EXTEND', false),
                            'InterfaceExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceExtension', [212, '__interfaceExtensionVariants'], '#InterfaceExtension'),
                            214 =>
new \Railt\Compiler\Parser\Rule\Concatenation(214, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null),
                            '__interfaceExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 214], null),
                            216 =>
new \Railt\Compiler\Parser\Rule\Token(216, 'T_EXTEND', false),
                            'ObjectExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectExtension', [216, '__objectExtensionVariants'], '#ObjectExtension'),
                            218 =>
new \Railt\Compiler\Parser\Rule\Concatenation(218, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null),
                            '__objectExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 218], null),
                            220 =>
new \Railt\Compiler\Parser\Rule\Token(220, 'T_EXTEND', false),
                            'ScalarExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarExtension', [220, 'ScalarDefinitionBody'], '#ScalarExtension'),
                            222 =>
new \Railt\Compiler\Parser\Rule\Token(222, 'T_EXTEND', false),
                            'SchemaExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaExtension', [222, 'SchemaDefinitionBody'], '#SchemaExtension'),
                            224 =>
new \Railt\Compiler\Parser\Rule\Token(224, 'T_EXTEND', false),
                            'UnionExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionExtension', [224, 'UnionDefinitionBody'], '#UnionExtension'),
                            'Extension' =>
new \Railt\Compiler\Parser\Rule\Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 'UnionExtension'], null),
                            227 =>
new \Railt\Compiler\Parser\Rule\Token(227, 'T_COLON', false),
                            'ArgumentInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentInvocation', ['NameWithReserved', 227, 'Value'], null),
                            229 =>
new \Railt\Compiler\Parser\Rule\Repetition(229, 0, -1, ['Directive'], null),
                            'Directives' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Directives', [229], '#Directives'),
                            231 =>
new \Railt\Compiler\Parser\Rule\Token(231, 'T_DIRECTIVE_AT', false),
                            232 =>
new \Railt\Compiler\Parser\Rule\Repetition(232, 0, 1, ['__directiveInvocationArguments'], null),
                            'Directive' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Directive', [231, 'TypeName', 232], '#Directive'),
                            234 =>
new \Railt\Compiler\Parser\Rule\Token(234, 'T_PARENTHESIS_OPEN', false),
                            235 =>
new \Railt\Compiler\Parser\Rule\Repetition(235, 0, -1, ['__directiveInvocationArgument'], null),
                            236 =>
new \Railt\Compiler\Parser\Rule\Token(236, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveInvocationArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArguments', [234, 235, 236], null),
                            '__directiveInvocationArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArgument', ['ArgumentInvocation'], '#DirectiveArgument'),
                            239 =>
new \Railt\Compiler\Parser\Rule\Concatenation(239, ['TypeName'], '#TypeInvocation'),
                            240 =>
new \Railt\Compiler\Parser\Rule\Concatenation(240, ['Variable'], '#TypeInvocation'),
                            241 =>
new \Railt\Compiler\Parser\Rule\Alternation(241, [239, 240], null),
                            242 =>
new \Railt\Compiler\Parser\Rule\Repetition(242, 0, 1, ['__typeInvocationDefinitionArguments'], null),
                            'TypeInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeInvocation', [241, 242], null),
                            244 =>
new \Railt\Compiler\Parser\Rule\Token(244, 'T_PARENTHESIS_OPEN', false),
                            245 =>
new \Railt\Compiler\Parser\Rule\Repetition(245, 0, -1, ['__typeInvocationDefinitionArgument'], null),
                            246 =>
new \Railt\Compiler\Parser\Rule\Token(246, 'T_PARENTHESIS_CLOSE', false),
                            '__typeInvocationDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeInvocationDefinitionArguments', [244, 245, 246], '#TypeInvocationArguments'),
                            248 =>
new \Railt\Compiler\Parser\Rule\Token(248, 'T_COLON', false),
                            '__typeInvocationDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeInvocationDefinitionArgument', ['NameWithReserved', 248, 'TypeInvocation'], '#TypeInvocationArgument'),
                            'Invocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Invocation', ['Directive'], null),
                    ]);
    }

    /**
     * @return string Returns the lexer compilation date and time in RFC3339 format
     */
    public function getBuiltDate(): string
    {
        return '2018-06-06UTC23:14:52.679+00:00';
    }
}
