<?php
/**
 * This file is part of Parser package.
 * 
 * For the full copyright and license information, please view the
 * LICENSE file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Compiler\Parser;

use Railt\Compiler\Parser\Runtime as CompiledRuntime;
use Railt\Compiler\Lexer\NativeStateful as CompiledLexer;

/**
 * This class has been auto-generated by the Railt\Compiler\Generator
 */
final class Compiled extends CompiledRuntime
{
    /**#@+
     * List of Compiled::class tokens defined as public constants
     */
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_NAMESPACE = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INPUT_UNION = 'T_INPUT_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';
    /**#@-*/

    public function __construct()
    {
        parent::__construct(new CompiledLexer('/\\G(?P<T_AND>&)|(?P<T_OR>\\|)|(?P<T_PARENTHESIS_OPEN>\\()|(?P<T_PARENTHESIS_CLOSE>\\))|(?P<T_BRACKET_OPEN>\\[)|(?P<T_BRACKET_CLOSE>\\])|(?P<T_BRACE_OPEN>{)|(?P<T_BRACE_CLOSE>})|(?P<T_NON_NULL>!)|(?P<T_THREE_DOTS>\\.\\.\\.)|(?P<T_COLON>:)|(?P<T_EQUAL>=)|(?P<T_DIRECTIVE_AT>@)|(?P<T_NUMBER>\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?\\b)|(?P<T_TRUE>true\\b)|(?P<T_FALSE>false\\b)|(?P<T_NULL>null\\b)|(?P<T_BLOCK_STRING>"""(?:\\\\"""|(?!""").|\\s)+""")|(?P<T_STRING>"[^"\\\\]+(\\\\.[^"\\\\]*)*")|(?P<T_NAMESPACE>namespace\\b)|(?P<T_NAMESPACE_SEPARATOR>\\/)|(?P<T_EXTENDS>extends\\b)|(?P<T_IMPLEMENTS>implements\\b)|(?P<T_ON>on\\b)|(?P<T_TYPE>type\\b)|(?P<T_ENUM>enum\\b)|(?P<T_UNION>union\\b)|(?P<T_INPUT_UNION>inputUnion\\b)|(?P<T_INTERFACE>interface\\b)|(?P<T_SCHEMA>schema\\b)|(?P<T_SCALAR>scalar\\b)|(?P<T_DIRECTIVE>directive\\b)|(?P<T_INPUT>input\\b)|(?P<T_EXTEND>extend\\b)|(?P<T_FRAGMENT>fragment\\b)|(?P<T_VARIABLE>\\$[_A-Za-z][_0-9A-Za-z]*)|(?P<T_NAME>[_A-Za-z][_0-9A-Za-z]*)|(?P<T_WHITESPACE>(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+)|(?P<T_COMMENT>#[^\\n]*)|(?P<T_COMMA>,)|(?P<T_UNKNOWN>.*?)/usS', ['T_WHITESPACE','T_COMMENT','T_COMMA',]), [
                            0 =>
new \Railt\Compiler\Parser\Rule\Repetition(0, 0, -1, ['DocumentImports',], null),
                            1 =>
new \Railt\Compiler\Parser\Rule\Repetition(1, 0, -1, ['DocumentDefinitions',], null),
                            'Document' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Document', [0,1,], '#Document'),
                            'DocumentImports' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DocumentImports', ['Directive',], null),
                            'DocumentDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('DocumentDefinitions', ['Extension','Definition',], null),
                            'NameWithoutReserved' =>
new \Railt\Compiler\Parser\Rule\Token('NameWithoutReserved', 'T_NAME', true),
                            6 =>
new \Railt\Compiler\Parser\Rule\Token(6, 'T_TRUE', true),
                            7 =>
new \Railt\Compiler\Parser\Rule\Token(7, 'T_FALSE', true),
                            8 =>
new \Railt\Compiler\Parser\Rule\Token(8, 'T_NULL', true),
                            9 =>
new \Railt\Compiler\Parser\Rule\Alternation(9, ['NameExceptValues',6,7,8,], null),
                            'NameWithReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithReserved', [9,], '#Name'),
                            11 =>
new \Railt\Compiler\Parser\Rule\Token(11, 'T_NAMESPACE', true),
                            12 =>
new \Railt\Compiler\Parser\Rule\Token(12, 'T_EXTENDS', true),
                            13 =>
new \Railt\Compiler\Parser\Rule\Token(13, 'T_IMPLEMENTS', true),
                            14 =>
new \Railt\Compiler\Parser\Rule\Token(14, 'T_ON', true),
                            15 =>
new \Railt\Compiler\Parser\Rule\Token(15, 'T_TYPE', true),
                            16 =>
new \Railt\Compiler\Parser\Rule\Token(16, 'T_ENUM', true),
                            17 =>
new \Railt\Compiler\Parser\Rule\Token(17, 'T_UNION', true),
                            18 =>
new \Railt\Compiler\Parser\Rule\Token(18, 'T_INPUT_UNION', true),
                            19 =>
new \Railt\Compiler\Parser\Rule\Token(19, 'T_INTERFACE', true),
                            20 =>
new \Railt\Compiler\Parser\Rule\Token(20, 'T_SCHEMA', true),
                            21 =>
new \Railt\Compiler\Parser\Rule\Token(21, 'T_SCALAR', true),
                            22 =>
new \Railt\Compiler\Parser\Rule\Token(22, 'T_DIRECTIVE', true),
                            23 =>
new \Railt\Compiler\Parser\Rule\Token(23, 'T_INPUT', true),
                            24 =>
new \Railt\Compiler\Parser\Rule\Token(24, 'T_EXTEND', true),
                            25 =>
new \Railt\Compiler\Parser\Rule\Token(25, 'T_FRAGMENT', true),
                            'NameExceptValues' =>
new \Railt\Compiler\Parser\Rule\Alternation('NameExceptValues', ['NameWithoutReserved',11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,], null),
                            27 =>
new \Railt\Compiler\Parser\Rule\Token(27, 'T_VARIABLE', true),
                            'Variable' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Variable', [27,], '#Variable'),
                            29 =>
new \Railt\Compiler\Parser\Rule\Repetition(29, 0, 1, ['GlobalTypeNamespace',], null),
                            'TypeName' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeName', [29,'__namespace','NameWithReserved',], '#TypeName'),
                            31 =>
new \Railt\Compiler\Parser\Rule\Token(31, 'T_NAMESPACE_SEPARATOR', false),
                            32 =>
new \Railt\Compiler\Parser\Rule\Concatenation(32, ['NameWithReserved',31,], null),
                            '__namespace' =>
new \Railt\Compiler\Parser\Rule\Repetition('__namespace', 0, -1, [32,], null),
                            34 =>
new \Railt\Compiler\Parser\Rule\Token(34, 'T_NAMESPACE_SEPARATOR', false),
                            'GlobalTypeNamespace' =>
new \Railt\Compiler\Parser\Rule\Concatenation('GlobalTypeNamespace', [34,], '#GlobalTypeNamespace'),
                            36 =>
new \Railt\Compiler\Parser\Rule\Token(36, 'T_FALSE', true),
                            37 =>
new \Railt\Compiler\Parser\Rule\Concatenation(37, [36,], '#Boolean'),
                            38 =>
new \Railt\Compiler\Parser\Rule\Token(38, 'T_TRUE', true),
                            39 =>
new \Railt\Compiler\Parser\Rule\Concatenation(39, [38,], '#Boolean'),
                            'Boolean' =>
new \Railt\Compiler\Parser\Rule\Alternation('Boolean', [37,39,], null),
                            41 =>
new \Railt\Compiler\Parser\Rule\Token(41, 'T_NUMBER', true),
                            'Number' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Number', [41,], '#Number'),
                            43 =>
new \Railt\Compiler\Parser\Rule\Token(43, 'T_BLOCK_STRING', true),
                            44 =>
new \Railt\Compiler\Parser\Rule\Concatenation(44, [43,], '#String'),
                            45 =>
new \Railt\Compiler\Parser\Rule\Token(45, 'T_STRING', true),
                            46 =>
new \Railt\Compiler\Parser\Rule\Concatenation(46, [45,], '#String'),
                            'String' =>
new \Railt\Compiler\Parser\Rule\Alternation('String', [44,46,], null),
                            48 =>
new \Railt\Compiler\Parser\Rule\Token(48, 'T_NULL', true),
                            'Null' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Null', [48,], '#Null'),
                            50 =>
new \Railt\Compiler\Parser\Rule\Token(50, 'T_BRACE_OPEN', false),
                            51 =>
new \Railt\Compiler\Parser\Rule\Repetition(51, 0, -1, ['__inputPair',], null),
                            52 =>
new \Railt\Compiler\Parser\Rule\Token(52, 'T_BRACE_CLOSE', false),
                            'Input' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Input', [50,51,52,], '#Input'),
                            54 =>
new \Railt\Compiler\Parser\Rule\Token(54, 'T_COLON', false),
                            '__inputPair' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputPair', ['NameWithReserved',54,'Value',], '#Pair'),
                            56 =>
new \Railt\Compiler\Parser\Rule\Token(56, 'T_BRACKET_OPEN', false),
                            57 =>
new \Railt\Compiler\Parser\Rule\Repetition(57, 0, -1, ['Value',], null),
                            58 =>
new \Railt\Compiler\Parser\Rule\Token(58, 'T_BRACKET_CLOSE', false),
                            'List' =>
new \Railt\Compiler\Parser\Rule\Concatenation('List', [56,57,58,], '#List'),
                            60 =>
new \Railt\Compiler\Parser\Rule\Concatenation(60, ['NameWithReserved',], '#Value'),
                            61 =>
new \Railt\Compiler\Parser\Rule\Concatenation(61, ['Boolean',], '#Value'),
                            62 =>
new \Railt\Compiler\Parser\Rule\Concatenation(62, ['Number',], '#Value'),
                            63 =>
new \Railt\Compiler\Parser\Rule\Concatenation(63, ['String',], '#Value'),
                            64 =>
new \Railt\Compiler\Parser\Rule\Concatenation(64, ['Input',], '#Value'),
                            65 =>
new \Railt\Compiler\Parser\Rule\Concatenation(65, ['Null',], '#Value'),
                            66 =>
new \Railt\Compiler\Parser\Rule\Concatenation(66, ['List',], '#Value'),
                            'Value' =>
new \Railt\Compiler\Parser\Rule\Alternation('Value', [60,61,62,63,64,65,66,], null),
                            'Documentation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Documentation', ['String',], '#Description'),
                            69 =>
new \Railt\Compiler\Parser\Rule\Token(69, 'T_IMPLEMENTS', false),
                            70 =>
new \Railt\Compiler\Parser\Rule\Token(70, 'T_AND', false),
                            71 =>
new \Railt\Compiler\Parser\Rule\Concatenation(71, [70,'TypeInvocation',], null),
                            72 =>
new \Railt\Compiler\Parser\Rule\Repetition(72, 0, -1, [71,], null),
                            'TypeDefinitionImplements' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeDefinitionImplements', [69,'TypeInvocation',72,], '#Implements'),
                            74 =>
new \Railt\Compiler\Parser\Rule\Token(74, 'T_PARENTHESIS_OPEN', false),
                            75 =>
new \Railt\Compiler\Parser\Rule\Repetition(75, 0, -1, ['__genericArgumentDefinition',], null),
                            76 =>
new \Railt\Compiler\Parser\Rule\Token(76, 'T_PARENTHESIS_CLOSE', false),
                            'TypeArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeArguments', [74,75,76,], '#TypeArguments'),
                            78 =>
new \Railt\Compiler\Parser\Rule\Token(78, 'T_COLON', false),
                            '__genericArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__genericArgumentDefinition', ['Variable',78,'TypeName',], '#TypeArgument'),
                            80 =>
new \Railt\Compiler\Parser\Rule\Concatenation(80, ['__typeHintList',], '#TypeHint'),
                            81 =>
new \Railt\Compiler\Parser\Rule\Concatenation(81, ['__typeHintValue',], '#TypeHint'),
                            'TypeHint' =>
new \Railt\Compiler\Parser\Rule\Alternation('TypeHint', [80,81,], null),
                            83 =>
new \Railt\Compiler\Parser\Rule\Token(83, 'T_BRACKET_OPEN', false),
                            84 =>
new \Railt\Compiler\Parser\Rule\Token(84, 'T_BRACKET_CLOSE', false),
                            85 =>
new \Railt\Compiler\Parser\Rule\Repetition(85, 0, 1, ['__typeHintNotNull',], null),
                            '__typeHintList' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintList', [83,'__typeHintValue',84,85,], '#List'),
                            87 =>
new \Railt\Compiler\Parser\Rule\Repetition(87, 0, 1, ['__typeHintNotNull',], null),
                            '__typeHintValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintValue', ['TypeInvocation',87,], null),
                            89 =>
new \Railt\Compiler\Parser\Rule\Token(89, 'T_NON_NULL', false),
                            '__typeHintNotNull' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeHintNotNull', [89,], '#NonNull'),
                            91 =>
new \Railt\Compiler\Parser\Rule\Repetition(91, 0, 1, ['Documentation',], null),
                            92 =>
new \Railt\Compiler\Parser\Rule\Token(92, 'T_COLON', false),
                            93 =>
new \Railt\Compiler\Parser\Rule\Repetition(93, 0, 1, ['__argumentDefinitionDefaultValue',], null),
                            'ArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentDefinition', [91,'NameWithReserved',92,'TypeHint',93,], '#ArgumentDefinition'),
                            95 =>
new \Railt\Compiler\Parser\Rule\Token(95, 'T_EQUAL', false),
                            '__argumentDefinitionDefaultValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__argumentDefinitionDefaultValue', [95,'Value',], null),
                            97 =>
new \Railt\Compiler\Parser\Rule\Repetition(97, 0, 1, ['Documentation',], null),
                            98 =>
new \Railt\Compiler\Parser\Rule\Repetition(98, 0, 1, ['__fieldDefinitionArguments',], null),
                            99 =>
new \Railt\Compiler\Parser\Rule\Token(99, 'T_COLON', false),
                            100 =>
new \Railt\Compiler\Parser\Rule\Repetition(100, 0, -1, ['Directive',], null),
                            'FieldDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('FieldDefinition', [97,'NameWithReserved',98,99,'TypeHint',100,], '#FieldDefinition'),
                            102 =>
new \Railt\Compiler\Parser\Rule\Token(102, 'T_PARENTHESIS_OPEN', false),
                            103 =>
new \Railt\Compiler\Parser\Rule\Repetition(103, 0, -1, ['__fieldDefinitionArgument',], null),
                            104 =>
new \Railt\Compiler\Parser\Rule\Token(104, 'T_PARENTHESIS_CLOSE', false),
                            '__fieldDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArguments', [102,103,104,], null),
                            106 =>
new \Railt\Compiler\Parser\Rule\Repetition(106, 0, -1, ['Directive',], null),
                            '__fieldDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition',106,], null),
                            108 =>
new \Railt\Compiler\Parser\Rule\Repetition(108, 0, 1, ['Documentation',], null),
                            'DirectiveDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinition', [108,'DirectiveDefinitionBody',], '#DirectiveDefinition'),
                            110 =>
new \Railt\Compiler\Parser\Rule\Token(110, 'T_DIRECTIVE', false),
                            111 =>
new \Railt\Compiler\Parser\Rule\Token(111, 'T_DIRECTIVE_AT', false),
                            112 =>
new \Railt\Compiler\Parser\Rule\Repetition(112, 0, 1, ['__directiveDefinitionArguments',], null),
                            113 =>
new \Railt\Compiler\Parser\Rule\Token(113, 'T_ON', false),
                            'DirectiveDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinitionBody', [110,111,'TypeName',112,113,'__directiveDefinitionLocations',], null),
                            115 =>
new \Railt\Compiler\Parser\Rule\Token(115, 'T_PARENTHESIS_OPEN', false),
                            116 =>
new \Railt\Compiler\Parser\Rule\Repetition(116, 0, -1, ['__directiveDefinitionArgument',], null),
                            117 =>
new \Railt\Compiler\Parser\Rule\Token(117, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArguments', [115,116,117,], null),
                            '__directiveDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition',], '#DirectiveArgument'),
                            120 =>
new \Railt\Compiler\Parser\Rule\Token(120, 'T_OR', false),
                            121 =>
new \Railt\Compiler\Parser\Rule\Repetition(121, 0, 1, [120,], null),
                            122 =>
new \Railt\Compiler\Parser\Rule\Repetition(122, 1, -1, ['__directiveDefinitionLocation',], null),
                            '__directiveDefinitionLocations' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocations', [121,122,], '#DirectiveLocations'),
                            124 =>
new \Railt\Compiler\Parser\Rule\Token(124, 'T_OR', false),
                            125 =>
new \Railt\Compiler\Parser\Rule\Concatenation(125, [124,'NameWithReserved',], null),
                            126 =>
new \Railt\Compiler\Parser\Rule\Repetition(126, 0, -1, [125,], null),
                            '__directiveDefinitionLocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocation', ['NameWithReserved',126,], null),
                            128 =>
new \Railt\Compiler\Parser\Rule\Repetition(128, 0, 1, ['Documentation',], null),
                            'EnumDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinition', [128,'EnumDefinitionHead','EnumDefinitionBody',], '#EnumDefinition'),
                            130 =>
new \Railt\Compiler\Parser\Rule\Token(130, 'T_ENUM', false),
                            131 =>
new \Railt\Compiler\Parser\Rule\Repetition(131, 0, -1, ['Directive',], null),
                            'EnumDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionHead', [130,'TypeName',131,], null),
                            133 =>
new \Railt\Compiler\Parser\Rule\Token(133, 'T_BRACE_OPEN', false),
                            134 =>
new \Railt\Compiler\Parser\Rule\Repetition(134, 1, -1, ['__enumDefinitionValue',], null),
                            135 =>
new \Railt\Compiler\Parser\Rule\Token(135, 'T_BRACE_CLOSE', false),
                            'EnumDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionBody', [133,134,135,], null),
                            137 =>
new \Railt\Compiler\Parser\Rule\Repetition(137, 0, 1, ['Documentation',], null),
                            138 =>
new \Railt\Compiler\Parser\Rule\Repetition(138, 0, -1, ['Directive',], null),
                            '__enumDefinitionValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__enumDefinitionValue', [137,'NameExceptValues',138,], '#EnumValue'),
                            140 =>
new \Railt\Compiler\Parser\Rule\Repetition(140, 0, 1, ['Documentation',], null),
                            'InputDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinition', [140,'InputDefinitionHead','InputDefinitionBody',], '#InputDefinition'),
                            142 =>
new \Railt\Compiler\Parser\Rule\Token(142, 'T_INPUT', false),
                            143 =>
new \Railt\Compiler\Parser\Rule\Repetition(143, 0, -1, ['Directive',], null),
                            'InputDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionHead', [142,'TypeName',143,], null),
                            145 =>
new \Railt\Compiler\Parser\Rule\Token(145, 'T_BRACE_OPEN', false),
                            146 =>
new \Railt\Compiler\Parser\Rule\Repetition(146, 0, -1, ['__inputDefinitionField',], null),
                            147 =>
new \Railt\Compiler\Parser\Rule\Token(147, 'T_BRACE_CLOSE', false),
                            'InputDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionBody', [145,146,147,], null),
                            149 =>
new \Railt\Compiler\Parser\Rule\Repetition(149, 0, -1, ['Directive',], null),
                            '__inputDefinitionField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputDefinitionField', ['ArgumentDefinition',149,], '#InputField'),
                            151 =>
new \Railt\Compiler\Parser\Rule\Repetition(151, 0, 1, ['Documentation',], null),
                            'InterfaceDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinition', [151,'InterfaceDefinitionHead','InterfaceDefinitionBody',], '#InterfaceDefinition'),
                            153 =>
new \Railt\Compiler\Parser\Rule\Token(153, 'T_INTERFACE', false),
                            154 =>
new \Railt\Compiler\Parser\Rule\Repetition(154, 0, 1, ['TypeArguments',], null),
                            155 =>
new \Railt\Compiler\Parser\Rule\Repetition(155, 0, 1, ['TypeDefinitionImplements',], null),
                            156 =>
new \Railt\Compiler\Parser\Rule\Repetition(156, 0, -1, ['Directive',], null),
                            'InterfaceDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionHead', [153,'TypeName',154,155,156,], null),
                            158 =>
new \Railt\Compiler\Parser\Rule\Token(158, 'T_BRACE_OPEN', false),
                            159 =>
new \Railt\Compiler\Parser\Rule\Repetition(159, 0, 1, ['__interfaceFieldDefinitions',], null),
                            160 =>
new \Railt\Compiler\Parser\Rule\Repetition(160, 0, 1, ['ChildrenDefinitions',], null),
                            161 =>
new \Railt\Compiler\Parser\Rule\Token(161, 'T_BRACE_CLOSE', false),
                            'InterfaceDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionBody', [158,159,160,161,], null),
                            163 =>
new \Railt\Compiler\Parser\Rule\Repetition(163, 0, -1, ['FieldDefinition',], null),
                            '__interfaceFieldDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__interfaceFieldDefinitions', [163,], '#FieldDefinitions'),
                            165 =>
new \Railt\Compiler\Parser\Rule\Repetition(165, 0, 1, ['Documentation',], null),
                            'ObjectDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinition', [165,'ObjectDefinitionHead','ObjectDefinitionBody',], '#ObjectDefinition'),
                            167 =>
new \Railt\Compiler\Parser\Rule\Token(167, 'T_TYPE', false),
                            168 =>
new \Railt\Compiler\Parser\Rule\Repetition(168, 0, 1, ['TypeArguments',], null),
                            169 =>
new \Railt\Compiler\Parser\Rule\Repetition(169, 0, 1, ['TypeDefinitionImplements',], null),
                            170 =>
new \Railt\Compiler\Parser\Rule\Repetition(170, 0, -1, ['Directive',], null),
                            'ObjectDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionHead', [167,'TypeName',168,169,170,], null),
                            172 =>
new \Railt\Compiler\Parser\Rule\Token(172, 'T_BRACE_OPEN', false),
                            173 =>
new \Railt\Compiler\Parser\Rule\Repetition(173, 0, 1, ['__objectFieldDefinitions',], null),
                            174 =>
new \Railt\Compiler\Parser\Rule\Repetition(174, 0, 1, ['ChildrenDefinitions',], null),
                            175 =>
new \Railt\Compiler\Parser\Rule\Token(175, 'T_BRACE_CLOSE', false),
                            'ObjectDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionBody', [172,173,174,175,], null),
                            177 =>
new \Railt\Compiler\Parser\Rule\Repetition(177, 0, -1, ['FieldDefinition',], null),
                            '__objectFieldDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__objectFieldDefinitions', [177,], '#FieldDefinitions'),
                            179 =>
new \Railt\Compiler\Parser\Rule\Repetition(179, 0, 1, ['Documentation',], null),
                            'ScalarDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinition', [179,'ScalarDefinitionBody',], '#ScalarDefinition'),
                            181 =>
new \Railt\Compiler\Parser\Rule\Token(181, 'T_SCALAR', false),
                            182 =>
new \Railt\Compiler\Parser\Rule\Repetition(182, 0, 1, ['__scalarExtends',], null),
                            183 =>
new \Railt\Compiler\Parser\Rule\Repetition(183, 0, -1, ['Directive',], null),
                            'ScalarDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinitionBody', [181,'TypeName',182,183,], null),
                            185 =>
new \Railt\Compiler\Parser\Rule\Token(185, 'T_EXTENDS', false),
                            '__scalarExtends' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__scalarExtends', [185,'TypeName',], '#Extends'),
                            187 =>
new \Railt\Compiler\Parser\Rule\Repetition(187, 0, 1, ['Documentation',], null),
                            'SchemaDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinition', [187,'SchemaDefinitionBody',], '#SchemaDefinition'),
                            189 =>
new \Railt\Compiler\Parser\Rule\Token(189, 'T_SCHEMA', false),
                            190 =>
new \Railt\Compiler\Parser\Rule\Repetition(190, 0, 1, ['TypeName',], null),
                            191 =>
new \Railt\Compiler\Parser\Rule\Token(191, 'T_BRACE_OPEN', false),
                            192 =>
new \Railt\Compiler\Parser\Rule\Repetition(192, 0, -1, ['__schemaField',], null),
                            193 =>
new \Railt\Compiler\Parser\Rule\Token(193, 'T_BRACE_CLOSE', false),
                            'SchemaDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinitionBody', [189,190,191,192,193,], null),
                            195 =>
new \Railt\Compiler\Parser\Rule\Token(195, 'T_COLON', false),
                            '__schemaField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__schemaField', ['NameWithReserved',195,'TypeName',], '#SchemaField'),
                            197 =>
new \Railt\Compiler\Parser\Rule\Repetition(197, 0, 1, ['Documentation',], null),
                            'UnionDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinition', [197,'UnionDefinitionBody',], '#UnionDefinition'),
                            199 =>
new \Railt\Compiler\Parser\Rule\Token(199, 'T_UNION', false),
                            200 =>
new \Railt\Compiler\Parser\Rule\Repetition(200, 0, -1, ['Directive',], null),
                            201 =>
new \Railt\Compiler\Parser\Rule\Token(201, 'T_EQUAL', false),
                            202 =>
new \Railt\Compiler\Parser\Rule\Token(202, 'T_OR', false),
                            203 =>
new \Railt\Compiler\Parser\Rule\Repetition(203, 0, 1, [202,], null),
                            204 =>
new \Railt\Compiler\Parser\Rule\Repetition(204, 1, -1, ['__unionDefinitionTargets',], null),
                            'UnionDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinitionBody', [199,'TypeName',200,201,203,204,], null),
                            206 =>
new \Railt\Compiler\Parser\Rule\Token(206, 'T_OR', false),
                            207 =>
new \Railt\Compiler\Parser\Rule\Concatenation(207, [206,'TypeName',], null),
                            208 =>
new \Railt\Compiler\Parser\Rule\Repetition(208, 0, -1, [207,], null),
                            '__unionDefinitionTargets' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__unionDefinitionTargets', ['TypeName',208,], null),
                            'Definition' =>
new \Railt\Compiler\Parser\Rule\Alternation('Definition', ['DirectiveDefinition','SchemaDefinition','__typeDefinitions',], null),
                            211 =>
new \Railt\Compiler\Parser\Rule\Concatenation(211, ['__typeDefinitions',], null),
                            'ChildrenDefinitions' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ChildrenDefinitions', [211,], '#ChildrenDefinitions'),
                            '__typeDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('__typeDefinitions', ['EnumDefinition','InputDefinition','InterfaceDefinition','ObjectDefinition','ScalarDefinition','UnionDefinition',], null),
                            214 =>
new \Railt\Compiler\Parser\Rule\Token(214, 'T_EXTEND', false),
                            'EnumExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumExtension', [214,'__enumExtensionVariants',], '#EnumExtension'),
                            216 =>
new \Railt\Compiler\Parser\Rule\Concatenation(216, ['EnumDefinitionHead','EnumDefinitionBody',], null),
                            '__enumExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__enumExtensionVariants', ['EnumDefinitionHead',216,], null),
                            218 =>
new \Railt\Compiler\Parser\Rule\Token(218, 'T_EXTEND', false),
                            'InputExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputExtension', [218,'__inputExtensionVariants',], '#InputExtension'),
                            220 =>
new \Railt\Compiler\Parser\Rule\Concatenation(220, ['InputDefinitionHead','InputDefinitionBody',], null),
                            '__inputExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__inputExtensionVariants', ['InputDefinitionHead',220,], null),
                            222 =>
new \Railt\Compiler\Parser\Rule\Token(222, 'T_EXTEND', false),
                            'InterfaceExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceExtension', [222,'__interfaceExtensionVariants',], '#InterfaceExtension'),
                            224 =>
new \Railt\Compiler\Parser\Rule\Concatenation(224, ['InterfaceDefinitionHead','InterfaceDefinitionBody',], null),
                            '__interfaceExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead',224,], null),
                            226 =>
new \Railt\Compiler\Parser\Rule\Token(226, 'T_EXTEND', false),
                            'ObjectExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectExtension', [226,'__objectExtensionVariants',], '#ObjectExtension'),
                            228 =>
new \Railt\Compiler\Parser\Rule\Concatenation(228, ['ObjectDefinitionHead','ObjectDefinitionBody',], null),
                            '__objectExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__objectExtensionVariants', ['ObjectDefinitionHead',228,], null),
                            230 =>
new \Railt\Compiler\Parser\Rule\Token(230, 'T_EXTEND', false),
                            'ScalarExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarExtension', [230,'ScalarDefinitionBody',], '#ScalarExtension'),
                            232 =>
new \Railt\Compiler\Parser\Rule\Token(232, 'T_EXTEND', false),
                            'SchemaExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaExtension', [232,'SchemaDefinitionBody',], '#SchemaExtension'),
                            234 =>
new \Railt\Compiler\Parser\Rule\Token(234, 'T_EXTEND', false),
                            'UnionExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionExtension', [234,'UnionDefinitionBody',], '#UnionExtension'),
                            'Extension' =>
new \Railt\Compiler\Parser\Rule\Alternation('Extension', ['EnumExtension','InputExtension','InterfaceExtension','ObjectExtension','ScalarExtension','SchemaExtension','UnionExtension',], null),
                            237 =>
new \Railt\Compiler\Parser\Rule\Token(237, 'T_COLON', false),
                            'ArgumentInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentInvocation', ['NameWithReserved',237,'Value',], null),
                            239 =>
new \Railt\Compiler\Parser\Rule\Token(239, 'T_DIRECTIVE_AT', false),
                            240 =>
new \Railt\Compiler\Parser\Rule\Repetition(240, 0, 1, ['__directiveInvocationArguments',], null),
                            'Directive' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Directive', [239,'TypeName',240,], '#Directive'),
                            242 =>
new \Railt\Compiler\Parser\Rule\Token(242, 'T_PARENTHESIS_OPEN', false),
                            243 =>
new \Railt\Compiler\Parser\Rule\Repetition(243, 0, -1, ['__directiveInvocationArgument',], null),
                            244 =>
new \Railt\Compiler\Parser\Rule\Token(244, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveInvocationArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArguments', [242,243,244,], null),
                            '__directiveInvocationArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArgument', ['ArgumentInvocation',], '#DirectiveArgument'),
                            247 =>
new \Railt\Compiler\Parser\Rule\Concatenation(247, ['TypeName',], '#TypeInvocation'),
                            248 =>
new \Railt\Compiler\Parser\Rule\Concatenation(248, ['Variable',], '#TypeInvocation'),
                            249 =>
new \Railt\Compiler\Parser\Rule\Alternation(249, [247,248,], null),
                            250 =>
new \Railt\Compiler\Parser\Rule\Repetition(250, 0, 1, ['__typeInvocationDefinitionArguments',], null),
                            'TypeInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeInvocation', [249,250,], null),
                            252 =>
new \Railt\Compiler\Parser\Rule\Token(252, 'T_PARENTHESIS_OPEN', false),
                            253 =>
new \Railt\Compiler\Parser\Rule\Repetition(253, 0, -1, ['__typeInvocationDefinitionArgument',], null),
                            254 =>
new \Railt\Compiler\Parser\Rule\Token(254, 'T_PARENTHESIS_CLOSE', false),
                            '__typeInvocationDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeInvocationDefinitionArguments', [252,253,254,], '#TypeInvocationArguments'),
                            256 =>
new \Railt\Compiler\Parser\Rule\Token(256, 'T_COLON', false),
                            '__typeInvocationDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__typeInvocationDefinitionArgument', ['NameWithReserved',256,'TypeInvocation',], '#TypeInvocationArgument'),
                            'Invocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Invocation', ['Directive',], null),
                    ]);
    }

    /**
     * @return string Returns the lexer compilation date and time in RFC3339 format
     */
    public function getBuiltDate(): string
    {
        return '2018-06-05MSK21:57:35.497+03:00';
    }
}
