<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Frontend;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 25-09-2018 21:17:24
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_ANGLE_OPEN = 'T_ANGLE_OPEN';
    public const T_ANGLE_CLOSE = 'T_ANGLE_CLOSE';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_NAMESPACE = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_IMPORT = 'T_IMPORT';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_EXTEND = 'T_EXTEND';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';
    public const T_HTAB = 'T_HTAB';
    public const T_LF = 'T_LF';
    public const T_CR = 'T_CR';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_BOM = 'T_BOM';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.{3}',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_ANGLE_OPEN => '<',
        self::T_ANGLE_CLOSE => '>',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => '(?<=\\b)true\\b',
        self::T_FALSE => '(?<=\\b)false\\b',
        self::T_NULL => '(?<=\\b)null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_NAMESPACE => '(?<=\\b)namespace\\b',
        self::T_NAMESPACE_SEPARATOR => '/',
        self::T_IMPORT => '(?<=\\b)import\\b',
        self::T_EXTENDS => '(?<=\\b)extends\\b',
        self::T_IMPLEMENTS => '(?<=\\b)implements\\b',
        self::T_ON => '(?<=\\b)on\\b',
        self::T_EXTEND => '(?<=\\b)extend\\b',
        self::T_TYPE => '(?<=\\b)type\\b',
        self::T_ENUM => '(?<=\\b)enum\\b',
        self::T_UNION => '(?<=\\b)union\\b',
        self::T_INTERFACE => '(?<=\\b)interface\\b',
        self::T_SCHEMA => '(?<=\\b)schema\\b',
        self::T_SCALAR => '(?<=\\b)scalar\\b',
        self::T_DIRECTIVE => '(?<=\\b)directive\\b',
        self::T_INPUT => '(?<=\\b)input\\b',
        self::T_FRAGMENT => '(?<=\\b)fragment\\b',
        self::T_VARIABLE => '\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_NAME => '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
        self::T_HTAB => '\\x09',
        self::T_LF => '\\x0a',
        self::T_CR => '\\x0d',
        self::T_WHITESPACE => '\\x20',
        self::T_BOM => '\\xfe\\xff',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_COMMENT',
        'T_COMMA',
        'T_HTAB',
        'T_LF',
        'T_CR',
        'T_WHITESPACE',
        'T_BOM',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'BooleanValue' => \Railt\SDL\Frontend\AST\Scalar\BooleanValueNode::class,
        'NumberValue' => \Railt\SDL\Frontend\AST\Scalar\NumberValueNode::class,
        'StringValue' => \Railt\SDL\Frontend\AST\Scalar\StringValueNode::class,
        'NullValue' => \Railt\SDL\Frontend\AST\Scalar\NullValueNode::class,
        'ConstantValue' => \Railt\SDL\Frontend\AST\Scalar\ConstantValueNode::class,
        'TypeName' => \Railt\SDL\Frontend\AST\TypeNameNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Concatenation(0, ['DocumentBody'], null), 
            (new Concatenation('Document', ['DocumentHead', 0], 'Document'))->setDefaultId('Document'), 
            new Alternation(2, ['Instruction', 'DirectiveInvocation'], null), 
            new Repetition('DocumentHead', 0, -1, 2, null), 
            new Alternation(4, ['Instruction', 'Extension', 'Definition'], null), 
            new Repetition('DocumentBody', 0, -1, 4, null), 
            new Terminal(6, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(7, 0, 1, '__argumentDefinitions', null), 
            new Terminal(8, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('ArgumentDefinitions', [6, 7, 8], null), 
            new Repetition('__argumentDefinitions', 1, -1, 'ArgumentDefinition', null), 
            new Repetition(11, 0, 1, 'Description', null), 
            new Repetition(12, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(13, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [11, '__argumentDefinitionBody', 12, 13], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(15, 'T_COLON', false), 
            new Concatenation(16, ['TypeHint'], null), 
            new Concatenation('__argumentDefinitionBody', ['Name', 15, 16], null), 
            new Terminal(18, 'T_EQUAL', false), 
            new Concatenation('__argumentDefinitionDefaultValue', [18, 'Value'], 'DefaultValue'), 
            new Repetition(20, 0, 1, 'Description', null), 
            new Concatenation(21, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [20, 'DirectiveDefinitionHead', 21], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(23, 'T_DIRECTIVE', false), 
            new Terminal(24, 'T_DIRECTIVE_AT', false), 
            new Repetition(25, 0, 1, 'ArgumentDefinitions', null), 
            new Concatenation('DirectiveDefinitionHead', [23, 24, 'TypeDefinitionHeader', 25], null), 
            new Terminal(27, 'T_ON', false), 
            new Concatenation(28, ['DirectiveLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [27, 28], null), 
            new Terminal(30, 'T_OR', false), 
            new Repetition(31, 0, 1, 30, null), 
            new Terminal(32, 'T_OR', false), 
            new Concatenation(33, [32, 'DirectiveLocation'], 'DirectiveLocations'), 
            new Repetition(34, 0, -1, 33, null), 
            (new Concatenation('DirectiveLocations', [31, 'DirectiveLocation', 34], null))->setDefaultId('DirectiveLocations'), 
            new Concatenation(36, ['ValueName'], null), 
            (new Concatenation('DirectiveLocation', [36], 'DirectiveLocation'))->setDefaultId('DirectiveLocation'), 
            new Repetition(38, 0, 1, 'Description', null), 
            new Repetition(39, 0, 1, 'EnumDefinitionBody', null), 
            (new Concatenation('EnumDefinition', [38, 'EnumDefinitionHead', 39], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Repetition(41, 0, 1, 'Description', null), 
            new Terminal(42, 'T_EXTEND', false), 
            new Concatenation(43, ['EnumDefinition'], null), 
            (new Concatenation('EnumExtension', [41, 42, 43], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Terminal(45, 'T_ENUM', false), 
            new Repetition(46, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [45, 'TypeDefinitionHeader', 46], null), 
            new Terminal(48, 'T_BRACE_OPEN', false), 
            new Repetition(49, 0, -1, 'EnumValueDefinition', null), 
            new Terminal(50, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [48, 49, 50], null), 
            new Repetition(52, 0, 1, 'Description', null), 
            new Repetition(53, 0, 1, '__enumDefinitionValue', null), 
            new Repetition(54, 0, 1, 'Directives', null), 
            (new Concatenation('EnumValueDefinition', [52, 'ValueName', 53, 54], 'EnumValueDefinition'))->setDefaultId('EnumValueDefinition'), 
            new Terminal(56, 'T_COLON', false), 
            new Terminal(57, 'T_EQUAL', false), 
            new Concatenation(58, ['Value'], null), 
            new Concatenation('__enumDefinitionValue', [56, 'TypeHint', 57, 58], null), 
            new Repetition(60, 0, 1, 'Description', null), 
            new Repetition(61, 0, 1, 'ArgumentDefinitions', null), 
            new Terminal(62, 'T_COLON', false), 
            new Repetition(63, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [60, 'Name', 61, 62, 'TypeHint', 63], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Repetition(65, 0, 1, 'Description', null), 
            new Repetition(66, 0, 1, 'InputDefinitionBody', null), 
            (new Concatenation('InputDefinition', [65, 'InputDefinitionHead', 66], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Repetition(68, 0, 1, 'Description', null), 
            new Terminal(69, 'T_EXTEND', false), 
            new Concatenation(70, ['InputDefinition'], null), 
            (new Concatenation('InputExtension', [68, 69, 70], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Terminal(72, 'T_INPUT', false), 
            new Repetition(73, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [72, 'TypeDefinitionHeader', 73], null), 
            new Terminal(75, 'T_BRACE_OPEN', false), 
            new Repetition(76, 0, -1, 'InputFieldDefinition', null), 
            new Terminal(77, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [75, 76, 77], null), 
            new Repetition(79, 0, 1, 'Description', null), 
            new Repetition(80, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(81, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [79, '__inputFieldDefinitionBody', 80, 81], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Terminal(83, 'T_COLON', false), 
            new Concatenation(84, ['TypeHint'], null), 
            new Concatenation('__inputFieldDefinitionBody', ['Name', 83, 84], null), 
            new Terminal(86, 'T_EQUAL', false), 
            new Concatenation(87, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [86, 87], null), 
            new Repetition(89, 0, 1, 'Description', null), 
            new Repetition(90, 0, 1, 'InterfaceDefinitionBody', null), 
            (new Concatenation('InterfaceDefinition', [89, 'InterfaceDefinitionHead', 90], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Repetition(92, 0, 1, 'Description', null), 
            new Terminal(93, 'T_EXTEND', false), 
            new Concatenation(94, ['InterfaceDefinition'], null), 
            (new Concatenation('InterfaceExtension', [92, 93, 94], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Terminal(96, 'T_INTERFACE', false), 
            new Repetition(97, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(98, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [96, 'TypeDefinitionHeader', 97, 98], null), 
            new Terminal(100, 'T_BRACE_OPEN', false), 
            new Repetition(101, 0, -1, 'FieldDefinition', null), 
            new Terminal(102, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [100, 101, 102], null), 
            new Repetition(104, 0, 1, 'Description', null), 
            new Repetition(105, 0, 1, 'ObjectDefinitionBody', null), 
            (new Concatenation('ObjectDefinition', [104, 'ObjectDefinitionHead', 105], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Repetition(107, 0, 1, 'Description', null), 
            new Terminal(108, 'T_EXTEND', false), 
            new Concatenation(109, ['ObjectDefinition'], null), 
            (new Concatenation('ObjectExtension', [107, 108, 109], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Terminal(111, 'T_TYPE', false), 
            new Repetition(112, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(113, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [111, 'TypeDefinitionHeader', 112, 113], null), 
            new Terminal(115, 'T_BRACE_OPEN', false), 
            new Repetition(116, 0, -1, 'FieldDefinition', null), 
            new Terminal(117, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [115, 116, 117], null), 
            new Repetition(119, 0, 1, 'Description', null), 
            new Concatenation(120, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [119, 120], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Repetition(122, 0, 1, 'Description', null), 
            new Terminal(123, 'T_EXTEND', false), 
            new Concatenation(124, ['ScalarDefinition'], null), 
            (new Concatenation('ScalarExtension', [122, 123, 124], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Terminal(126, 'T_SCALAR', false), 
            new Repetition(127, 0, 1, 'TypeDefinitionExtends', null), 
            new Repetition(128, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [126, 'TypeDefinitionHeader', 127, 128], null), 
            new Repetition(130, 0, 1, 'Description', null), 
            new Repetition(131, 0, 1, 'SchemaDefinitionBody', null), 
            (new Concatenation('SchemaDefinition', [130, 'SchemaDefinitionHead', 131], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Repetition(133, 0, 1, 'Description', null), 
            new Terminal(134, 'T_EXTEND', false), 
            new Concatenation(135, ['SchemaDefinition'], null), 
            (new Concatenation('SchemaExtension', [133, 134, 135], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Terminal(137, 'T_SCHEMA', false), 
            new Repetition(138, 0, 1, 'TypeDefinitionHeader', null), 
            new Repetition(139, 0, 1, 'Directives', null), 
            new Concatenation('SchemaDefinitionHead', [137, 138, 139], null), 
            new Terminal(141, 'T_BRACE_OPEN', false), 
            new Repetition(142, 0, -1, 'SchemaFieldDefinition', null), 
            new Terminal(143, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [141, 142, 143], null), 
            new Terminal(145, 'T_COLON', false), 
            new Concatenation(146, ['TypeHint'], null), 
            (new Concatenation('SchemaFieldDefinition', ['Name', 145, 146], 'SchemaFieldDefinition'))->setDefaultId('SchemaFieldDefinition'), 
            new Terminal(148, 'T_ANGLE_OPEN', false), 
            new Repetition(149, 0, 1, '__typeArgumentDefinitions', null), 
            new Terminal(150, 'T_ANGLE_CLOSE', false), 
            new Concatenation('TypeArgumentDefinitions', [148, 149, 150], null), 
            new Repetition('__typeArgumentDefinitions', 1, -1, 'TypeArgumentDefinition', null), 
            new Repetition(153, 0, 1, '__typeArgumentDefinitionDefaultValue', null), 
            (new Concatenation('TypeArgumentDefinition', ['__typeArgumentDefinitionBody', 153], 'TypeArgumentDefinition'))->setDefaultId('TypeArgumentDefinition'), 
            new Terminal(155, 'T_COLON', false), 
            new Concatenation(156, ['TypeName'], null), 
            new Concatenation('__typeArgumentDefinitionBody', ['Name', 155, 156], null), 
            new Terminal(158, 'T_EQUAL', false), 
            new Concatenation('__typeArgumentDefinitionDefaultValue', [158, 'TypeInvocationHeader'], 'DefaultValue'), 
            new Repetition(160, 0, 1, 'Description', null), 
            new Repetition(161, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [160, 'UnionDefinitionHead', 161], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Repetition(163, 0, 1, 'Description', null), 
            new Terminal(164, 'T_EXTEND', false), 
            new Concatenation(165, ['UnionDefinition'], null), 
            (new Concatenation('UnionExtension', [163, 164, 165], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Terminal(167, 'T_UNION', false), 
            new Repetition(168, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [167, 'TypeDefinitionHeader', 168], null), 
            new Terminal(170, 'T_EQUAL', false), 
            new Repetition(171, 0, 1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [170, 171], null), 
            new Terminal(173, 'T_OR', false), 
            new Repetition(174, 0, 1, 173, null), 
            new Terminal(175, 'T_OR', false), 
            new Concatenation(176, [175, 'TypeInvocationHeader'], null), 
            new Repetition(177, 0, -1, 176, null), 
            new Concatenation('__unionDefinitionTargets', [174, 'TypeInvocationHeader', 177], 'UnionDefinitionTargets'), 
            new Repetition(179, 0, 1, 'TypeArgumentDefinitions', null), 
            (new Concatenation('TypeDefinitionHeader', ['TypeName', 179], 'TypeDefinitionHeader'))->setDefaultId('TypeDefinitionHeader'), 
            new Concatenation(181, ['UnionDefinition'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 'EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 181], null), 
            new Concatenation(183, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 183], null), 
            new Terminal(185, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(186, 0, -1, 'ArgumentInvocation', null), 
            new Terminal(187, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('ArgumentInvocations', [185, 186, 187], null), 
            new Terminal(189, 'T_COLON', false), 
            new Concatenation(190, ['Value'], null), 
            (new Concatenation('ArgumentInvocation', ['Name', 189, 190], 'ArgumentInvocation'))->setDefaultId('ArgumentInvocation'), 
            new Repetition(192, 1, -1, 'DirectiveInvocation', null), 
            (new Concatenation('Directives', [192], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(194, 'T_DIRECTIVE_AT', false), 
            new Repetition(195, 0, 1, 'ArgumentInvocations', null), 
            (new Concatenation('DirectiveInvocation', [194, 'TypeInvocationHeader', 195], 'DirectiveInvocation'))->setDefaultId('DirectiveInvocation'), 
            new Terminal(197, 'T_BRACE_OPEN', false), 
            new Repetition(198, 0, -1, 'ArgumentInvocation', null), 
            new Terminal(199, 'T_BRACE_CLOSE', false), 
            (new Concatenation('InputInvocation', [197, 198, 199], 'InputInvocation'))->setDefaultId('InputInvocation'), 
            new Terminal(201, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(202, 0, 1, '__typeArgumentInvocations', null), 
            new Terminal(203, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('TypeArgumentInvocations', [201, 202, 203], null), 
            new Repetition('__typeArgumentInvocations', 1, -1, 'TypeArgumentInvocation', null), 
            new Repetition(206, 0, 1, '__typeArgumentInvocationDefaultValue', null), 
            (new Concatenation('TypeArgumentInvocation', ['__typeArgumentInvocationBody', 206], 'TypeArgumentInvocation'))->setDefaultId('TypeArgumentInvocation'), 
            new Terminal(208, 'T_COLON', false), 
            new Concatenation(209, ['TypeInvocationHeader'], null), 
            new Concatenation('__typeArgumentInvocationBody', ['Name', 208, 209], null), 
            new Terminal(211, 'T_EQUAL', false), 
            new Concatenation(212, ['TypeInvocationHeader'], null), 
            new Concatenation('__typeArgumentInvocationDefaultValue', [211, 212], null), 
            new Terminal(214, 'T_FALSE', true), 
            new Concatenation(215, [214], 'BooleanValue'), 
            new Terminal(216, 'T_TRUE', true), 
            new Concatenation(217, [216], 'BooleanValue'), 
            (new Alternation('BooleanValue', [215, 217], null))->setDefaultId('BooleanValue'), 
            new Terminal(219, 'T_NUMBER', true), 
            new Concatenation(220, [219], 'NumberValue'), 
            new Terminal(221, 'T_HEX_NUMBER', true), 
            new Concatenation(222, [221], 'NumberValue'), 
            new Terminal(223, 'T_BIN_NUMBER', true), 
            new Concatenation(224, [223], 'NumberValue'), 
            (new Alternation('NumberValue', [220, 222, 224], null))->setDefaultId('NumberValue'), 
            new Terminal(226, 'T_BLOCK_STRING', true), 
            new Concatenation(227, [226], 'StringValue'), 
            new Terminal(228, 'T_STRING', true), 
            new Concatenation(229, [228], 'StringValue'), 
            (new Alternation('StringValue', [227, 229], null))->setDefaultId('StringValue'), 
            new Concatenation(231, ['StringValue'], null), 
            (new Concatenation('Description', [231], 'Description'))->setDefaultId('Description'), 
            new Terminal(233, 'T_NULL', true), 
            (new Concatenation('NullValue', [233], 'NullValue'))->setDefaultId('NullValue'), 
            new Concatenation(235, ['NameExceptValues'], null), 
            (new Concatenation('ConstantValue', [235], 'ConstantValue'))->setDefaultId('ConstantValue'), 
            new Terminal(237, 'T_BRACKET_OPEN', false), 
            new Repetition(238, 0, -1, 'Value', null), 
            new Terminal(239, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('ListValue', [237, 238, 239], 'ListValue'))->setDefaultId('ListValue'), 
            new Concatenation(241, ['ListValue'], null), 
            new Alternation('Value', ['ConstantValue', 'BooleanValue', 'NumberValue', 'StringValue', 'NullValue', 'InputInvocation', 241], null), 
            new Repetition(243, 0, 1, 'TypeArgumentInvocations', null), 
            (new Concatenation('TypeInvocationHeader', ['TypeName', 243], 'TypeInvocationHeader'))->setDefaultId('TypeInvocationHeader'), 
            new Terminal(245, 'T_IMPORT', false), 
            new Concatenation(246, ['StringValue'], null), 
            (new Concatenation('ImportDefinition', [245, 246], 'ImportDefinition'))->setDefaultId('ImportDefinition'), 
            new Terminal(248, 'T_NAMESPACE', false), 
            new Concatenation(249, ['TypeName'], null), 
            (new Concatenation('NamespaceDefinition', [248, 249], 'NamespaceDefinition'))->setDefaultId('NamespaceDefinition'), 
            new Concatenation(251, ['ImportDefinition'], null), 
            new Alternation('Instruction', ['NamespaceDefinition', 251], null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(254, 'T_TRUE', true), 
            new Terminal(255, 'T_FALSE', true), 
            new Terminal(256, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 254, 255, 256], null), 
            new Terminal(258, 'T_NAMESPACE', true), 
            new Terminal(259, 'T_EXTENDS', true), 
            new Terminal(260, 'T_IMPLEMENTS', true), 
            new Terminal(261, 'T_ON', true), 
            new Terminal(262, 'T_TYPE', true), 
            new Terminal(263, 'T_ENUM', true), 
            new Terminal(264, 'T_UNION', true), 
            new Terminal(265, 'T_INPUT_UNION', true), 
            new Terminal(266, 'T_INTERFACE', true), 
            new Terminal(267, 'T_SCHEMA', true), 
            new Terminal(268, 'T_SCALAR', true), 
            new Terminal(269, 'T_DIRECTIVE', true), 
            new Terminal(270, 'T_INPUT', true), 
            new Terminal(271, 'T_EXTEND', true), 
            new Terminal(272, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], null), 
            new Repetition(274, 0, 1, 'AtRoot', null), 
            new Terminal(275, 'T_NAMESPACE_SEPARATOR', false), 
            new Concatenation(276, [275, 'NameWithReserved'], 'TypeName'), 
            new Repetition(277, 0, -1, 276, null), 
            (new Concatenation('TypeName', [274, 'NameWithReserved', 277], null))->setDefaultId('TypeName'), 
            new Terminal(279, 'T_NAMESPACE_SEPARATOR', false), 
            (new Concatenation('AtRoot', [279], 'AtRoot'))->setDefaultId('AtRoot'), 
            new Concatenation(281, ['NameWithReserved'], null), 
            (new Concatenation('Name', [281], 'Name'))->setDefaultId('Name'), 
            new Concatenation(283, ['NameExceptValues'], null), 
            (new Concatenation('ValueName', [283], 'ValueName'))->setDefaultId('ValueName'), 
            new Terminal(285, 'T_EXTENDS', false), 
            new Concatenation(286, ['TypeDefinitionHeader'], null), 
            (new Concatenation('TypeDefinitionExtends', [285, 286], 'TypeDefinitionExtends'))->setDefaultId('TypeDefinitionExtends'), 
            new Terminal(288, 'T_IMPLEMENTS', false), 
            new Terminal(289, 'T_AND', false), 
            new Repetition(290, 0, 1, 289, null), 
            new Terminal(291, 'T_AND', false), 
            new Concatenation(292, [291, 'TypeInvocationHeader'], 'TypeDefinitionImplements'), 
            new Repetition(293, 0, -1, 292, null), 
            (new Concatenation('TypeDefinitionImplements', [288, 290, 'TypeInvocationHeader', 293], null))->setDefaultId('TypeDefinitionImplements'), 
            new Concatenation(295, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(296, ['__typeHintSingular'], null), 
            new Concatenation(297, [296], 'TypeHint'), 
            (new Alternation('TypeHint', [295, 297], null))->setDefaultId('TypeHint'), 
            new Concatenation(299, ['__typeHintNullableList'], null), 
            new Alternation('__typeHintList', ['__typeHintNonNullList', 299], null), 
            new Terminal(301, 'T_BRACKET_OPEN', false), 
            new Terminal(302, 'T_BRACKET_CLOSE', false), 
            new Concatenation('__typeHintNullableList', [301, '__typeHintSingular', 302], 'List'), 
            new Terminal(304, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullList', ['__typeHintNullableList', 304], 'NonNull'), 
            new Concatenation(306, ['__typeHintNullableSingular'], null), 
            new Alternation('__typeHintSingular', ['__typeHintNonNullSingular', 306], null), 
            new Concatenation('__typeHintNullableSingular', ['TypeDefinitionHeader'], null), 
            new Terminal(309, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullSingular', ['TypeDefinitionHeader', 309], 'NonNull')
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
