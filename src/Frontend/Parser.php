<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Frontend;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 10-09-2018 20:39:12
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';
    public const T_HTAB = 'T_HTAB';
    public const T_LF = 'T_LF';
    public const T_CR = 'T_CR';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_BOM = 'T_BOM';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.{3}',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => '(?<=\\b)true\\b',
        self::T_FALSE => '(?<=\\b)false\\b',
        self::T_NULL => '(?<=\\b)null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS => '(?<=\\b)extends\\b',
        self::T_IMPLEMENTS => '(?<=\\b)implements\\b',
        self::T_ON => '(?<=\\b)on\\b',
        self::T_TYPE => '(?<=\\b)type\\b',
        self::T_ENUM => '(?<=\\b)enum\\b',
        self::T_UNION => '(?<=\\b)union\\b',
        self::T_INTERFACE => '(?<=\\b)interface\\b',
        self::T_SCHEMA => '(?<=\\b)schema\\b',
        self::T_SCALAR => '(?<=\\b)scalar\\b',
        self::T_DIRECTIVE => '(?<=\\b)directive\\b',
        self::T_INPUT => '(?<=\\b)input\\b',
        self::T_EXTEND => '(?<=\\b)extend\\b',
        self::T_FRAGMENT => '(?<=\\b)fragment\\b',
        self::T_VARIABLE => '\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_NAME => '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
        self::T_HTAB => '\\x09',
        self::T_LF => '\\x0a',
        self::T_CR => '\\x0d',
        self::T_WHITESPACE => '\\x20',
        self::T_BOM => '\\xfe\\xff',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_COMMENT',
        'T_COMMA',
        'T_HTAB',
        'T_LF',
        'T_CR',
        'T_WHITESPACE',
        'T_BOM',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'BooleanValue' => \Railt\SDL\Frontend\Ast\Invocation\BooleanValue::class,
        'NumberValue' => \Railt\SDL\Frontend\Ast\Invocation\NumberValue::class,
        'StringValue' => \Railt\SDL\Frontend\Ast\Invocation\StringValue::class,
        'Description' => \Railt\SDL\Frontend\Ast\Invocation\DescriptionValue::class,
        'NullValue' => \Railt\SDL\Frontend\Ast\Invocation\NullValue::class,
        'ConstantValue' => \Railt\SDL\Frontend\Ast\Invocation\ConstantValue::class,
        'ListValue' => \Railt\SDL\Frontend\Ast\Invocation\ListValue::class,
        'TypeHint' => \Railt\SDL\Frontend\Ast\Definition\Common\TypeHintNode::class,
        'DirectiveDefinition' => \Railt\SDL\Frontend\Ast\Definition\DirectiveDefinitionNode::class,
        'EnumDefinition' => \Railt\SDL\Frontend\Ast\Definition\EnumDefinitionNode::class,
        'EnumValueDefinition' => \Railt\SDL\Frontend\Ast\Definition\EnumValueDefinitionNode::class,
        'InputDefinition' => \Railt\SDL\Frontend\Ast\Definition\InputDefinitionNode::class,
        'InputFieldDefinition' => \Railt\SDL\Frontend\Ast\Definition\InputFieldDefinitionNode::class,
        'InterfaceDefinition' => \Railt\SDL\Frontend\Ast\Definition\InterfaceDefinitionNode::class,
        'ObjectDefinition' => \Railt\SDL\Frontend\Ast\Definition\ObjectDefinitionNode::class,
        'ScalarDefinition' => \Railt\SDL\Frontend\Ast\Definition\ScalarDefinitionNode::class,
        'SchemaDefinition' => \Railt\SDL\Frontend\Ast\Definition\SchemaDefinitionNode::class,
        'SchemaFieldDefinition' => \Railt\SDL\Frontend\Ast\Definition\SchemaFieldDefinitionNode::class,
        'UnionDefinition' => \Railt\SDL\Frontend\Ast\Definition\UnionDefinitionNode::class,
        'ArgumentDefinition' => \Railt\SDL\Frontend\Ast\Definition\ArgumentDefinitionNode::class,
        'FieldDefinition' => \Railt\SDL\Frontend\Ast\Definition\FieldDefinitionNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Concatenation(0, ['DocumentBody'], null), 
            (new Concatenation('Document', ['DocumentHead', 0], 'Document'))->setDefaultId('Document'), 
            new Repetition('DocumentHead', 0, -1, 'DirectiveInvocation', null), 
            new Alternation(3, ['Extension', 'Definition'], null), 
            new Repetition('DocumentBody', 0, -1, 3, null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(6, 'T_TRUE', true), 
            new Terminal(7, 'T_FALSE', true), 
            new Terminal(8, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 6, 7, 8], null), 
            new Terminal(10, 'T_NAMESPACE', true), 
            new Terminal(11, 'T_EXTENDS', true), 
            new Terminal(12, 'T_IMPLEMENTS', true), 
            new Terminal(13, 'T_ON', true), 
            new Terminal(14, 'T_TYPE', true), 
            new Terminal(15, 'T_ENUM', true), 
            new Terminal(16, 'T_UNION', true), 
            new Terminal(17, 'T_INPUT_UNION', true), 
            new Terminal(18, 'T_INTERFACE', true), 
            new Terminal(19, 'T_SCHEMA', true), 
            new Terminal(20, 'T_SCALAR', true), 
            new Terminal(21, 'T_DIRECTIVE', true), 
            new Terminal(22, 'T_INPUT', true), 
            new Terminal(23, 'T_EXTEND', true), 
            new Terminal(24, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], null), 
            new Concatenation(26, ['NameWithReserved'], null), 
            (new Concatenation('TypeName', [26], 'TypeName'))->setDefaultId('TypeName'), 
            new Concatenation(28, ['NameWithReserved'], null), 
            (new Concatenation('DependentName', [28], 'DependentName'))->setDefaultId('DependentName'), 
            new Concatenation(30, ['NameExceptValues'], null), 
            (new Concatenation('ValueName', [30], 'ValueName'))->setDefaultId('ValueName'), 
            new Terminal(32, 'T_FALSE', true), 
            new Concatenation(33, [32], 'BooleanValue'), 
            new Terminal(34, 'T_TRUE', true), 
            new Concatenation(35, [34], 'BooleanValue'), 
            (new Alternation('BooleanValue', [33, 35], null))->setDefaultId('BooleanValue'), 
            new Terminal(37, 'T_NUMBER', true), 
            new Concatenation(38, [37], 'NumberValue'), 
            new Terminal(39, 'T_HEX_NUMBER', true), 
            new Concatenation(40, [39], 'NumberValue'), 
            new Terminal(41, 'T_BIN_NUMBER', true), 
            new Concatenation(42, [41], 'NumberValue'), 
            (new Alternation('NumberValue', [38, 40, 42], null))->setDefaultId('NumberValue'), 
            new Terminal(44, 'T_BLOCK_STRING', true), 
            new Concatenation(45, [44], 'StringValue'), 
            new Terminal(46, 'T_STRING', true), 
            new Concatenation(47, [46], 'StringValue'), 
            (new Alternation('StringValue', [45, 47], null))->setDefaultId('StringValue'), 
            new Concatenation(49, ['StringValue'], null), 
            (new Concatenation('Description', [49], 'Description'))->setDefaultId('Description'), 
            new Terminal(51, 'T_NULL', true), 
            (new Concatenation('NullValue', [51], 'NullValue'))->setDefaultId('NullValue'), 
            new Concatenation(53, ['NameExceptValues'], null), 
            (new Concatenation('ConstantValue', [53], 'ConstantValue'))->setDefaultId('ConstantValue'), 
            new Terminal(55, 'T_BRACKET_OPEN', false), 
            new Repetition(56, 0, -1, 'Value', null), 
            new Terminal(57, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('ListValue', [55, 56, 57], 'ListValue'))->setDefaultId('ListValue'), 
            new Concatenation(59, ['ListValue'], null), 
            new Alternation('Value', ['ConstantValue', 'BooleanValue', 'NumberValue', 'StringValue', 'NullValue', 'InputInvocation', 59], null), 
            new Terminal(61, 'T_IMPLEMENTS', false), 
            new Terminal(62, 'T_AND', false), 
            new Concatenation(63, [62, 'TypeName'], 'TypeDefinitionImplementations'), 
            new Repetition(64, 0, -1, 63, null), 
            (new Concatenation('TypeDefinitionImplementations', [61, 'TypeName', 64], null))->setDefaultId('TypeDefinitionImplementations'), 
            new Terminal(66, 'T_EXTENDS', false), 
            new Concatenation(67, ['TypeName'], null), 
            (new Concatenation('TypeDefinitionExtends', [66, 67], 'TypeDefinitionExtends'))->setDefaultId('TypeDefinitionExtends'), 
            new Concatenation(69, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(70, ['__typeHintSingular'], null), 
            new Concatenation(71, [70], 'TypeHint'), 
            (new Alternation('TypeHint', [69, 71], null))->setDefaultId('TypeHint'), 
            new Concatenation(73, ['__typeHintNullableList'], null), 
            new Alternation('__typeHintList', ['__typeHintNonNullList', 73], null), 
            new Terminal(75, 'T_BRACKET_OPEN', false), 
            new Terminal(76, 'T_BRACKET_CLOSE', false), 
            new Concatenation('__typeHintNullableList', [75, '__typeHintSingular', 76], 'List'), 
            new Terminal(78, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullList', ['__typeHintNullableList', 78], 'NonNull'), 
            new Concatenation(80, ['__typeHintNullableSingular'], null), 
            new Alternation('__typeHintSingular', ['__typeHintNonNullSingular', 80], null), 
            new Concatenation('__typeHintNullableSingular', ['TypeName'], null), 
            new Terminal(83, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullSingular', ['TypeName', 83], 'NonNull'), 
            new Repetition(85, 0, 1, 'Description', null), 
            new Concatenation(86, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [85, 'DirectiveDefinitionHead', 86], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(88, 'T_DIRECTIVE', false), 
            new Terminal(89, 'T_DIRECTIVE_AT', false), 
            new Repetition(90, 0, 1, '__directiveDefinitionArguments', null), 
            new Concatenation('DirectiveDefinitionHead', [88, 89, 'TypeName', 90], null), 
            new Terminal(92, 'T_ON', false), 
            new Concatenation(93, ['DirectiveLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [92, 93], null), 
            new Terminal(95, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(96, 0, 1, 'ArgumentDefinitions', null), 
            new Terminal(97, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveDefinitionArguments', [95, 96, 97], null), 
            new Terminal(99, 'T_OR', false), 
            new Repetition(100, 0, 1, 99, null), 
            new Terminal(101, 'T_OR', false), 
            new Concatenation(102, [101, 'DirectiveLocation'], 'DirectiveLocations'), 
            new Repetition(103, 0, -1, 102, null), 
            (new Concatenation('DirectiveLocations', [100, 'DirectiveLocation', 103], null))->setDefaultId('DirectiveLocations'), 
            new Concatenation(105, ['ValueName'], null), 
            (new Concatenation('DirectiveLocation', [105], 'DirectiveLocation'))->setDefaultId('DirectiveLocation'), 
            new Repetition(107, 0, 1, 'Description', null), 
            new Concatenation(108, ['EnumDefinitionBody'], null), 
            (new Concatenation('EnumDefinition', [107, 'EnumDefinitionHead', 108], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Terminal(110, 'T_ENUM', false), 
            new Repetition(111, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [110, 'TypeName', 111], null), 
            new Terminal(113, 'T_BRACE_OPEN', false), 
            new Repetition(114, 0, 1, 'EnumValueDefinitions', null), 
            new Terminal(115, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [113, 114, 115], null), 
            new Repetition(117, 1, -1, 'EnumValueDefinition', null), 
            (new Concatenation('EnumValueDefinitions', [117], 'EnumValueDefinitions'))->setDefaultId('EnumValueDefinitions'), 
            new Repetition(119, 0, 1, 'Description', null), 
            new Repetition(120, 0, 1, '__enumDefinitionValue', null), 
            new Repetition(121, 0, 1, 'Directives', null), 
            (new Concatenation('EnumValueDefinition', [119, 'ValueName', 120, 121], 'EnumValueDefinition'))->setDefaultId('EnumValueDefinition'), 
            new Terminal(123, 'T_COLON', false), 
            new Terminal(124, 'T_EQUAL', false), 
            new Concatenation(125, ['Value'], null), 
            new Concatenation('__enumDefinitionValue', [123, 'TypeHint', 124, 125], null), 
            new Repetition(127, 0, 1, 'Description', null), 
            new Concatenation(128, ['InputDefinitionBody'], null), 
            (new Concatenation('InputDefinition', [127, 'InputDefinitionHead', 128], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Terminal(130, 'T_INPUT', false), 
            new Repetition(131, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [130, 'TypeName', 131], null), 
            new Terminal(133, 'T_BRACE_OPEN', false), 
            new Repetition(134, 0, 1, 'InputFieldDefinitions', null), 
            new Terminal(135, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [133, 134, 135], null), 
            new Repetition(137, 1, -1, 'InputFieldDefinition', null), 
            (new Concatenation('InputFieldDefinitions', [137], 'InputFieldDefinitions'))->setDefaultId('InputFieldDefinitions'), 
            new Repetition(139, 0, 1, 'Description', null), 
            new Repetition(140, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(141, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [139, '__inputFieldDefinitionBody', 140, 141], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Terminal(143, 'T_COLON', false), 
            new Concatenation(144, ['TypeHint'], null), 
            new Concatenation('__inputFieldDefinitionBody', ['DependentName', 143, 144], null), 
            new Terminal(146, 'T_EQUAL', false), 
            new Concatenation(147, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [146, 147], null), 
            new Repetition(149, 0, 1, 'Description', null), 
            new Concatenation(150, ['InterfaceDefinitionBody'], null), 
            (new Concatenation('InterfaceDefinition', [149, 'InterfaceDefinitionHead', 150], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Terminal(152, 'T_INTERFACE', false), 
            new Repetition(153, 0, 1, 'TypeDefinitionImplementations', null), 
            new Repetition(154, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [152, 'TypeName', 153, 154], null), 
            new Terminal(156, 'T_BRACE_OPEN', false), 
            new Repetition(157, 0, 1, 'FieldDefinitions', null), 
            new Terminal(158, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [156, 157, 158], null), 
            new Repetition(160, 0, 1, 'Description', null), 
            new Concatenation(161, ['ObjectDefinitionBody'], null), 
            (new Concatenation('ObjectDefinition', [160, 'ObjectDefinitionHead', 161], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Terminal(163, 'T_TYPE', false), 
            new Repetition(164, 0, 1, 'TypeDefinitionImplementations', null), 
            new Repetition(165, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [163, 'TypeName', 164, 165], null), 
            new Terminal(167, 'T_BRACE_OPEN', false), 
            new Repetition(168, 0, 1, 'FieldDefinitions', null), 
            new Terminal(169, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [167, 168, 169], null), 
            new Repetition(171, 0, 1, 'Description', null), 
            new Concatenation(172, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [171, 172], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Terminal(174, 'T_SCALAR', false), 
            new Repetition(175, 0, 1, 'TypeDefinitionExtends', null), 
            new Repetition(176, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [174, 'TypeName', 175, 176], null), 
            new Repetition(178, 0, 1, 'Description', null), 
            new Concatenation(179, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaDefinition', [178, 'SchemaDefinitionHead', 179], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Terminal(181, 'T_SCHEMA', false), 
            new Repetition(182, 0, 1, 'TypeName', null), 
            new Repetition(183, 0, 1, 'Directives', null), 
            new Concatenation('SchemaDefinitionHead', [181, 182, 183], null), 
            new Terminal(185, 'T_BRACE_OPEN', false), 
            new Repetition(186, 0, 1, 'SchemaFieldDefinitions', null), 
            new Terminal(187, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [185, 186, 187], null), 
            new Repetition(189, 1, -1, 'SchemaFieldDefinition', null), 
            (new Concatenation('SchemaFieldDefinitions', [189], 'SchemaFieldDefinitions'))->setDefaultId('SchemaFieldDefinitions'), 
            new Terminal(191, 'T_COLON', false), 
            new Concatenation(192, ['TypeHint'], null), 
            (new Concatenation('SchemaFieldDefinition', ['DependentName', 191, 192], 'SchemaFieldDefinition'))->setDefaultId('SchemaFieldDefinition'), 
            new Repetition(194, 0, 1, 'Description', null), 
            new Repetition(195, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [194, 'UnionDefinitionHead', 195], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Terminal(197, 'T_UNION', false), 
            new Repetition(198, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [197, 'TypeName', 198], null), 
            new Terminal(200, 'T_EQUAL', false), 
            new Terminal(201, 'T_OR', false), 
            new Repetition(202, 0, 1, 201, null), 
            new Repetition(203, 0, 1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [200, 202, 203], null), 
            new Terminal(205, 'T_OR', false), 
            new Concatenation(206, [205, 'TypeName'], null), 
            new Repetition(207, 0, -1, 206, null), 
            new Concatenation('__unionDefinitionTargets', ['TypeName', 207], 'UnionDefinitionTargets'), 
            new Repetition(209, 1, -1, 'ArgumentDefinition', null), 
            (new Concatenation('ArgumentDefinitions', [209], 'ArgumentDefinitions'))->setDefaultId('ArgumentDefinitions'), 
            new Repetition(211, 0, 1, 'Description', null), 
            new Repetition(212, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(213, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [211, '__argumentDefinitionBody', 212, 213], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(215, 'T_COLON', false), 
            new Concatenation(216, ['TypeHint'], null), 
            new Concatenation('__argumentDefinitionBody', ['DependentName', 215, 216], null), 
            new Terminal(218, 'T_EQUAL', false), 
            new Concatenation(219, ['Value'], null), 
            new Concatenation('__argumentDefinitionDefaultValue', [218, 219], null), 
            new Repetition(221, 1, -1, 'FieldDefinition', null), 
            (new Concatenation('FieldDefinitions', [221], 'FieldDefinitions'))->setDefaultId('FieldDefinitions'), 
            new Repetition(223, 0, 1, 'Description', null), 
            new Repetition(224, 0, 1, '__fieldDefinitionArguments', null), 
            new Terminal(225, 'T_COLON', false), 
            new Repetition(226, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [223, 'DependentName', 224, 225, 'TypeHint', 226], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Terminal(228, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(229, 0, 1, 'ArgumentDefinitions', null), 
            new Terminal(230, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__fieldDefinitionArguments', [228, 229, 230], null), 
            new Concatenation(232, ['UnionDefinition'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 'EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 232], null), 
            new Repetition(234, 0, 1, 'Description', null), 
            new Terminal(235, 'T_EXTEND', false), 
            new Concatenation(236, ['__enumExtensionVariants'], null), 
            (new Concatenation('EnumExtension', [234, 235, 236], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Concatenation(238, ['EnumDefinitionHead', 'EnumDefinitionBody'], null), 
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 238], null), 
            new Repetition(240, 0, 1, 'Description', null), 
            new Terminal(241, 'T_EXTEND', false), 
            new Concatenation(242, ['__inputExtensionVariants'], null), 
            (new Concatenation('InputExtension', [240, 241, 242], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Concatenation(244, ['InputDefinitionHead', 'InputDefinitionBody'], null), 
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 244], null), 
            new Repetition(246, 0, 1, 'Description', null), 
            new Terminal(247, 'T_EXTEND', false), 
            new Concatenation(248, ['__interfaceExtensionVariants'], null), 
            (new Concatenation('InterfaceExtension', [246, 247, 248], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Concatenation(250, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null), 
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 250], null), 
            new Repetition(252, 0, 1, 'Description', null), 
            new Terminal(253, 'T_EXTEND', false), 
            new Concatenation(254, ['__objectExtensionVariants'], null), 
            (new Concatenation('ObjectExtension', [252, 253, 254], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Concatenation(256, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null), 
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 256], null), 
            new Repetition(258, 0, 1, 'Description', null), 
            new Terminal(259, 'T_EXTEND', false), 
            new Concatenation(260, ['__scalarExtensionVariants'], null), 
            (new Concatenation('ScalarExtension', [258, 259, 260], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Concatenation('__scalarExtensionVariants', ['ScalarDefinitionBody'], null), 
            new Repetition(263, 0, 1, 'Description', null), 
            new Terminal(264, 'T_EXTEND', false), 
            new Concatenation(265, ['__schemaExtensionVariants'], null), 
            (new Concatenation('SchemaExtension', [263, 264, 265], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Concatenation(267, ['SchemaDefinitionHead', 'SchemaDefinitionBody'], null), 
            new Alternation('__schemaExtensionVariants', ['SchemaDefinitionHead', 267], null), 
            new Repetition(269, 0, 1, 'Description', null), 
            new Terminal(270, 'T_EXTEND', false), 
            new Concatenation(271, ['__unionExtensionVariants'], null), 
            (new Concatenation('UnionExtension', [269, 270, 271], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Concatenation(273, ['UnionDefinitionHead', 'UnionDefinitionBody'], null), 
            new Alternation('__unionExtensionVariants', ['UnionDefinitionHead', 273], null), 
            new Concatenation(275, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 275], null), 
            new Repetition(277, 1, -1, 'DirectiveInvocation', null), 
            (new Concatenation('Directives', [277], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(279, 'T_DIRECTIVE_AT', false), 
            new Repetition(280, 0, 1, '__directiveInvocationArgumentsGroup', null), 
            (new Concatenation('DirectiveInvocation', [279, 'TypeName', 280], 'DirectiveInvocation'))->setDefaultId('DirectiveInvocation'), 
            new Terminal(282, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(283, 0, 1, '__directiveInvocationArguments', null), 
            new Terminal(284, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveInvocationArgumentsGroup', [282, 283, 284], null), 
            new Repetition('__directiveInvocationArguments', 1, -1, 'ArgumentInvocation', null), 
            new Terminal(287, 'T_COLON', false), 
            new Concatenation(288, ['Value'], null), 
            (new Concatenation('ArgumentInvocation', ['DependentName', 287, 288], 'ArgumentInvocation'))->setDefaultId('ArgumentInvocation'), 
            new Terminal(290, 'T_BRACE_OPEN', false), 
            new Repetition(291, 0, 1, 'InputInvocationArguments', null), 
            new Terminal(292, 'T_BRACE_CLOSE', false), 
            (new Concatenation('InputInvocation', [290, 291, 292], 'InputInvocation'))->setDefaultId('InputInvocation'), 
            new Repetition(294, 1, -1, 'ArgumentInvocation', null), 
            (new Concatenation('InputInvocationArguments', [294], 'InputInvocationArguments'))->setDefaultId('InputInvocationArguments')
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
