<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Frontend;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 11-09-2018 21:37:38
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';
    public const T_HTAB = 'T_HTAB';
    public const T_LF = 'T_LF';
    public const T_CR = 'T_CR';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_BOM = 'T_BOM';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.{3}',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => '(?<=\\b)true\\b',
        self::T_FALSE => '(?<=\\b)false\\b',
        self::T_NULL => '(?<=\\b)null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS => '(?<=\\b)extends\\b',
        self::T_IMPLEMENTS => '(?<=\\b)implements\\b',
        self::T_ON => '(?<=\\b)on\\b',
        self::T_TYPE => '(?<=\\b)type\\b',
        self::T_ENUM => '(?<=\\b)enum\\b',
        self::T_UNION => '(?<=\\b)union\\b',
        self::T_INTERFACE => '(?<=\\b)interface\\b',
        self::T_SCHEMA => '(?<=\\b)schema\\b',
        self::T_SCALAR => '(?<=\\b)scalar\\b',
        self::T_DIRECTIVE => '(?<=\\b)directive\\b',
        self::T_INPUT => '(?<=\\b)input\\b',
        self::T_EXTEND => '(?<=\\b)extend\\b',
        self::T_FRAGMENT => '(?<=\\b)fragment\\b',
        self::T_VARIABLE => '\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_NAME => '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
        self::T_HTAB => '\\x09',
        self::T_LF => '\\x0a',
        self::T_CR => '\\x0d',
        self::T_WHITESPACE => '\\x20',
        self::T_BOM => '\\xfe\\xff',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_COMMENT',
        'T_COMMA',
        'T_HTAB',
        'T_LF',
        'T_CR',
        'T_WHITESPACE',
        'T_BOM',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'TypeHint' => \Railt\SDL\Frontend\AST\Definition\Common\TypeHintNode::class,
        'DirectiveDefinition' => \Railt\SDL\Frontend\AST\Definition\DirectiveDefinitionNode::class,
        'EnumDefinition' => \Railt\SDL\Frontend\AST\Definition\EnumDefinitionNode::class,
        'EnumValueDefinition' => \Railt\SDL\Frontend\AST\Definition\EnumValueDefinitionNode::class,
        'InputDefinition' => \Railt\SDL\Frontend\AST\Definition\InputDefinitionNode::class,
        'InputFieldDefinition' => \Railt\SDL\Frontend\AST\Definition\InputFieldDefinitionNode::class,
        'InterfaceDefinition' => \Railt\SDL\Frontend\AST\Definition\InterfaceDefinitionNode::class,
        'ObjectDefinition' => \Railt\SDL\Frontend\AST\Definition\ObjectDefinitionNode::class,
        'ScalarDefinition' => \Railt\SDL\Frontend\AST\Definition\ScalarDefinitionNode::class,
        'SchemaDefinition' => \Railt\SDL\Frontend\AST\Definition\SchemaDefinitionNode::class,
        'SchemaFieldDefinition' => \Railt\SDL\Frontend\AST\Definition\SchemaFieldDefinitionNode::class,
        'UnionDefinition' => \Railt\SDL\Frontend\AST\Definition\UnionDefinitionNode::class,
        'ArgumentDefinition' => \Railt\SDL\Frontend\AST\Definition\ArgumentDefinitionNode::class,
        'FieldDefinition' => \Railt\SDL\Frontend\AST\Definition\FieldDefinitionNode::class,
        'DirectiveInvocation' => \Railt\SDL\Frontend\AST\Invocation\DirectiveValueNode::class,
        'BooleanValue' => \Railt\SDL\Frontend\AST\Invocation\BooleanValueNode::class,
        'NumberValue' => \Railt\SDL\Frontend\AST\Invocation\NumberValueNode::class,
        'StringValue' => \Railt\SDL\Frontend\AST\Invocation\StringValueNode::class,
        'Description' => \Railt\SDL\Frontend\AST\Invocation\DescriptionValueNode::class,
        'NullValue' => \Railt\SDL\Frontend\AST\Invocation\NullValueNode::class,
        'ConstantValue' => \Railt\SDL\Frontend\AST\Invocation\ConstantValueNode::class,
        'ListValue' => \Railt\SDL\Frontend\AST\Invocation\ListValueNode::class,
        'InputValue' => \Railt\SDL\Frontend\AST\Invocation\InputValueNode::class,
        'ArgumentValue' => \Railt\SDL\Frontend\AST\Invocation\ArgumentValueNode::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Concatenation(0, ['DocumentBody'], null), 
            (new Concatenation('Document', ['DocumentHead', 0], 'Document'))->setDefaultId('Document'), 
            new Repetition('DocumentHead', 0, -1, 'DirectiveInvocation', null), 
            new Alternation(3, ['Extension', 'Definition'], null), 
            new Repetition('DocumentBody', 0, -1, 3, null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(6, 'T_TRUE', true), 
            new Terminal(7, 'T_FALSE', true), 
            new Terminal(8, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 6, 7, 8], null), 
            new Terminal(10, 'T_NAMESPACE', true), 
            new Terminal(11, 'T_EXTENDS', true), 
            new Terminal(12, 'T_IMPLEMENTS', true), 
            new Terminal(13, 'T_ON', true), 
            new Terminal(14, 'T_TYPE', true), 
            new Terminal(15, 'T_ENUM', true), 
            new Terminal(16, 'T_UNION', true), 
            new Terminal(17, 'T_INPUT_UNION', true), 
            new Terminal(18, 'T_INTERFACE', true), 
            new Terminal(19, 'T_SCHEMA', true), 
            new Terminal(20, 'T_SCALAR', true), 
            new Terminal(21, 'T_DIRECTIVE', true), 
            new Terminal(22, 'T_INPUT', true), 
            new Terminal(23, 'T_EXTEND', true), 
            new Terminal(24, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], null), 
            new Concatenation(26, ['NameWithReserved'], null), 
            (new Concatenation('TypeName', [26], 'TypeName'))->setDefaultId('TypeName'), 
            new Concatenation(28, ['NameWithReserved'], null), 
            (new Concatenation('DependentName', [28], 'DependentName'))->setDefaultId('DependentName'), 
            new Concatenation(30, ['NameExceptValues'], null), 
            (new Concatenation('ValueName', [30], 'ValueName'))->setDefaultId('ValueName'), 
            new Terminal(32, 'T_IMPLEMENTS', false), 
            new Terminal(33, 'T_AND', false), 
            new Repetition(34, 0, 1, 33, null), 
            new Terminal(35, 'T_AND', false), 
            new Concatenation(36, [35, 'TypeName'], 'TypeDefinitionImplementations'), 
            new Repetition(37, 0, -1, 36, null), 
            (new Concatenation('TypeDefinitionImplementations', [32, 34, 'TypeName', 37], null))->setDefaultId('TypeDefinitionImplementations'), 
            new Terminal(39, 'T_EXTENDS', false), 
            new Concatenation(40, ['TypeName'], null), 
            (new Concatenation('TypeDefinitionExtends', [39, 40], 'TypeDefinitionExtends'))->setDefaultId('TypeDefinitionExtends'), 
            new Concatenation(42, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(43, ['__typeHintSingular'], null), 
            new Concatenation(44, [43], 'TypeHint'), 
            (new Alternation('TypeHint', [42, 44], null))->setDefaultId('TypeHint'), 
            new Concatenation(46, ['__typeHintNullableList'], null), 
            new Alternation('__typeHintList', ['__typeHintNonNullList', 46], null), 
            new Terminal(48, 'T_BRACKET_OPEN', false), 
            new Terminal(49, 'T_BRACKET_CLOSE', false), 
            new Concatenation('__typeHintNullableList', [48, '__typeHintSingular', 49], 'List'), 
            new Terminal(51, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullList', ['__typeHintNullableList', 51], 'NonNull'), 
            new Concatenation(53, ['__typeHintNullableSingular'], null), 
            new Alternation('__typeHintSingular', ['__typeHintNonNullSingular', 53], null), 
            new Concatenation('__typeHintNullableSingular', ['TypeName'], null), 
            new Terminal(56, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNonNullSingular', ['TypeName', 56], 'NonNull'), 
            new Repetition(58, 0, 1, 'Description', null), 
            new Concatenation(59, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [58, 'DirectiveDefinitionHead', 59], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(61, 'T_DIRECTIVE', false), 
            new Terminal(62, 'T_DIRECTIVE_AT', false), 
            new Repetition(63, 0, 1, '__directiveDefinitionArguments', null), 
            new Concatenation('DirectiveDefinitionHead', [61, 62, 'TypeName', 63], null), 
            new Terminal(65, 'T_ON', false), 
            new Concatenation(66, ['DirectiveLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [65, 66], null), 
            new Terminal(68, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(69, 0, 1, 'ArgumentDefinitions', null), 
            new Terminal(70, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveDefinitionArguments', [68, 69, 70], null), 
            new Terminal(72, 'T_OR', false), 
            new Repetition(73, 0, 1, 72, null), 
            new Terminal(74, 'T_OR', false), 
            new Concatenation(75, [74, 'DirectiveLocation'], 'DirectiveLocations'), 
            new Repetition(76, 0, -1, 75, null), 
            (new Concatenation('DirectiveLocations', [73, 'DirectiveLocation', 76], null))->setDefaultId('DirectiveLocations'), 
            new Concatenation(78, ['ValueName'], null), 
            (new Concatenation('DirectiveLocation', [78], 'DirectiveLocation'))->setDefaultId('DirectiveLocation'), 
            new Repetition(80, 0, 1, 'Description', null), 
            new Repetition(81, 0, 1, 'EnumDefinitionBody', null), 
            (new Concatenation('EnumDefinition', [80, 'EnumDefinitionHead', 81], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Repetition(83, 0, 1, 'Description', null), 
            new Terminal(84, 'T_EXTEND', false), 
            new Concatenation(85, ['EnumDefinition'], null), 
            (new Concatenation('EnumExtension', [83, 84, 85], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Terminal(87, 'T_ENUM', false), 
            new Repetition(88, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [87, 'TypeName', 88], null), 
            new Terminal(90, 'T_BRACE_OPEN', false), 
            new Repetition(91, 0, 1, 'EnumValueDefinitions', null), 
            new Terminal(92, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [90, 91, 92], null), 
            new Repetition(94, 1, -1, 'EnumValueDefinition', null), 
            (new Concatenation('EnumValueDefinitions', [94], 'EnumValueDefinitions'))->setDefaultId('EnumValueDefinitions'), 
            new Repetition(96, 0, 1, 'Description', null), 
            new Repetition(97, 0, 1, '__enumDefinitionValue', null), 
            new Repetition(98, 0, 1, 'Directives', null), 
            (new Concatenation('EnumValueDefinition', [96, 'ValueName', 97, 98], 'EnumValueDefinition'))->setDefaultId('EnumValueDefinition'), 
            new Terminal(100, 'T_COLON', false), 
            new Terminal(101, 'T_EQUAL', false), 
            new Concatenation(102, ['Value'], null), 
            new Concatenation('__enumDefinitionValue', [100, 'TypeHint', 101, 102], null), 
            new Repetition(104, 0, 1, 'Description', null), 
            new Repetition(105, 0, 1, 'InputDefinitionBody', null), 
            (new Concatenation('InputDefinition', [104, 'InputDefinitionHead', 105], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Repetition(107, 0, 1, 'Description', null), 
            new Terminal(108, 'T_EXTEND', false), 
            new Concatenation(109, ['InputDefinition'], null), 
            (new Concatenation('InputExtension', [107, 108, 109], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Terminal(111, 'T_INPUT', false), 
            new Repetition(112, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [111, 'TypeName', 112], null), 
            new Terminal(114, 'T_BRACE_OPEN', false), 
            new Repetition(115, 0, 1, 'InputFieldDefinitions', null), 
            new Terminal(116, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [114, 115, 116], null), 
            new Repetition(118, 1, -1, 'InputFieldDefinition', null), 
            (new Concatenation('InputFieldDefinitions', [118], 'InputFieldDefinitions'))->setDefaultId('InputFieldDefinitions'), 
            new Repetition(120, 0, 1, 'Description', null), 
            new Repetition(121, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(122, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [120, '__inputFieldDefinitionBody', 121, 122], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Terminal(124, 'T_COLON', false), 
            new Concatenation(125, ['TypeHint'], null), 
            new Concatenation('__inputFieldDefinitionBody', ['DependentName', 124, 125], null), 
            new Terminal(127, 'T_EQUAL', false), 
            new Concatenation(128, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [127, 128], null), 
            new Repetition(130, 0, 1, 'Description', null), 
            new Repetition(131, 0, 1, 'InterfaceDefinitionBody', null), 
            (new Concatenation('InterfaceDefinition', [130, 'InterfaceDefinitionHead', 131], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Repetition(133, 0, 1, 'Description', null), 
            new Terminal(134, 'T_EXTEND', false), 
            new Concatenation(135, ['InterfaceDefinition'], null), 
            (new Concatenation('InterfaceExtension', [133, 134, 135], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Terminal(137, 'T_INTERFACE', false), 
            new Repetition(138, 0, 1, 'TypeDefinitionImplementations', null), 
            new Repetition(139, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [137, 'TypeName', 138, 139], null), 
            new Terminal(141, 'T_BRACE_OPEN', false), 
            new Repetition(142, 0, 1, 'FieldDefinitions', null), 
            new Terminal(143, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [141, 142, 143], null), 
            new Repetition(145, 0, 1, 'Description', null), 
            new Repetition(146, 0, 1, 'ObjectDefinitionBody', null), 
            (new Concatenation('ObjectDefinition', [145, 'ObjectDefinitionHead', 146], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Repetition(148, 0, 1, 'Description', null), 
            new Terminal(149, 'T_EXTEND', false), 
            new Concatenation(150, ['ObjectDefinition'], null), 
            (new Concatenation('ObjectExtension', [148, 149, 150], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Terminal(152, 'T_TYPE', false), 
            new Repetition(153, 0, 1, 'TypeDefinitionImplementations', null), 
            new Repetition(154, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [152, 'TypeName', 153, 154], null), 
            new Terminal(156, 'T_BRACE_OPEN', false), 
            new Repetition(157, 0, 1, 'FieldDefinitions', null), 
            new Terminal(158, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [156, 157, 158], null), 
            new Repetition(160, 0, 1, 'Description', null), 
            new Concatenation(161, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [160, 161], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Repetition(163, 0, 1, 'Description', null), 
            new Terminal(164, 'T_EXTEND', false), 
            new Concatenation(165, ['ScalarDefinition'], null), 
            (new Concatenation('ScalarExtension', [163, 164, 165], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Terminal(167, 'T_SCALAR', false), 
            new Repetition(168, 0, 1, 'TypeDefinitionExtends', null), 
            new Repetition(169, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [167, 'TypeName', 168, 169], null), 
            new Repetition(171, 0, 1, 'Description', null), 
            new Repetition(172, 0, 1, 'SchemaDefinitionBody', null), 
            (new Concatenation('SchemaDefinition', [171, 'SchemaDefinitionHead', 172], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Repetition(174, 0, 1, 'Description', null), 
            new Terminal(175, 'T_EXTEND', false), 
            new Concatenation(176, ['SchemaDefinition'], null), 
            (new Concatenation('SchemaExtension', [174, 175, 176], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Terminal(178, 'T_SCHEMA', false), 
            new Repetition(179, 0, 1, 'TypeName', null), 
            new Repetition(180, 0, 1, 'Directives', null), 
            new Concatenation('SchemaDefinitionHead', [178, 179, 180], null), 
            new Terminal(182, 'T_BRACE_OPEN', false), 
            new Repetition(183, 0, 1, 'SchemaFieldDefinitions', null), 
            new Terminal(184, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [182, 183, 184], null), 
            new Repetition(186, 1, -1, 'SchemaFieldDefinition', null), 
            (new Concatenation('SchemaFieldDefinitions', [186], 'SchemaFieldDefinitions'))->setDefaultId('SchemaFieldDefinitions'), 
            new Terminal(188, 'T_COLON', false), 
            new Concatenation(189, ['TypeHint'], null), 
            (new Concatenation('SchemaFieldDefinition', ['DependentName', 188, 189], 'SchemaFieldDefinition'))->setDefaultId('SchemaFieldDefinition'), 
            new Repetition(191, 0, 1, 'Description', null), 
            new Repetition(192, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [191, 'UnionDefinitionHead', 192], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Repetition(194, 0, 1, 'Description', null), 
            new Terminal(195, 'T_EXTEND', false), 
            new Concatenation(196, ['UnionDefinition'], null), 
            (new Concatenation('UnionExtension', [194, 195, 196], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Terminal(198, 'T_UNION', false), 
            new Repetition(199, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [198, 'TypeName', 199], null), 
            new Terminal(201, 'T_EQUAL', false), 
            new Repetition(202, 0, 1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [201, 202], null), 
            new Terminal(204, 'T_OR', false), 
            new Repetition(205, 0, 1, 204, null), 
            new Terminal(206, 'T_OR', false), 
            new Concatenation(207, [206, 'TypeName'], null), 
            new Repetition(208, 0, -1, 207, null), 
            new Concatenation('__unionDefinitionTargets', [205, 'TypeName', 208], 'UnionDefinitionTargets'), 
            new Repetition(210, 1, -1, 'ArgumentDefinition', null), 
            (new Concatenation('ArgumentDefinitions', [210], 'ArgumentDefinitions'))->setDefaultId('ArgumentDefinitions'), 
            new Repetition(212, 0, 1, 'Description', null), 
            new Repetition(213, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(214, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [212, '__argumentDefinitionBody', 213, 214], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(216, 'T_COLON', false), 
            new Concatenation(217, ['TypeHint'], null), 
            new Concatenation('__argumentDefinitionBody', ['DependentName', 216, 217], null), 
            new Terminal(219, 'T_EQUAL', false), 
            new Concatenation(220, ['Value'], null), 
            new Concatenation('__argumentDefinitionDefaultValue', [219, 220], null), 
            new Repetition(222, 1, -1, 'FieldDefinition', null), 
            (new Concatenation('FieldDefinitions', [222], 'FieldDefinitions'))->setDefaultId('FieldDefinitions'), 
            new Repetition(224, 0, 1, 'Description', null), 
            new Repetition(225, 0, 1, '__fieldDefinitionArguments', null), 
            new Terminal(226, 'T_COLON', false), 
            new Repetition(227, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [224, 'DependentName', 225, 226, 'TypeHint', 227], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Terminal(229, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(230, 0, 1, 'ArgumentDefinitions', null), 
            new Terminal(231, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__fieldDefinitionArguments', [229, 230, 231], null), 
            new Concatenation(233, ['UnionDefinition'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 'EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 233], null), 
            new Concatenation(235, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 235], null), 
            new Repetition(237, 1, -1, 'DirectiveInvocation', null), 
            (new Concatenation('Directives', [237], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(239, 'T_DIRECTIVE_AT', false), 
            new Repetition(240, 0, 1, '__directiveInvocationArgumentsGroup', null), 
            (new Concatenation('DirectiveInvocation', [239, 'TypeName', 240], 'DirectiveInvocation'))->setDefaultId('DirectiveInvocation'), 
            new Terminal(242, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(243, 0, 1, '__directiveInvocationArguments', null), 
            new Terminal(244, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveInvocationArgumentsGroup', [242, 243, 244], null), 
            new Repetition('__directiveInvocationArguments', 1, -1, 'ArgumentValue', null), 
            new Terminal(247, 'T_FALSE', true), 
            new Concatenation(248, [247], 'BooleanValue'), 
            new Terminal(249, 'T_TRUE', true), 
            new Concatenation(250, [249], 'BooleanValue'), 
            (new Alternation('BooleanValue', [248, 250], null))->setDefaultId('BooleanValue'), 
            new Terminal(252, 'T_NUMBER', true), 
            new Concatenation(253, [252], 'NumberValue'), 
            new Terminal(254, 'T_HEX_NUMBER', true), 
            new Concatenation(255, [254], 'NumberValue'), 
            new Terminal(256, 'T_BIN_NUMBER', true), 
            new Concatenation(257, [256], 'NumberValue'), 
            (new Alternation('NumberValue', [253, 255, 257], null))->setDefaultId('NumberValue'), 
            new Terminal(259, 'T_BLOCK_STRING', true), 
            new Concatenation(260, [259], 'StringValue'), 
            new Terminal(261, 'T_STRING', true), 
            new Concatenation(262, [261], 'StringValue'), 
            (new Alternation('StringValue', [260, 262], null))->setDefaultId('StringValue'), 
            new Concatenation(264, ['StringValue'], null), 
            (new Concatenation('Description', [264], 'Description'))->setDefaultId('Description'), 
            new Terminal(266, 'T_NULL', true), 
            (new Concatenation('NullValue', [266], 'NullValue'))->setDefaultId('NullValue'), 
            new Concatenation(268, ['NameExceptValues'], null), 
            (new Concatenation('ConstantValue', [268], 'ConstantValue'))->setDefaultId('ConstantValue'), 
            new Terminal(270, 'T_BRACKET_OPEN', false), 
            new Repetition(271, 0, -1, 'Value', null), 
            new Terminal(272, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('ListValue', [270, 271, 272], 'ListValue'))->setDefaultId('ListValue'), 
            new Terminal(274, 'T_BRACE_OPEN', false), 
            new Repetition(275, 0, -1, 'ArgumentValue', null), 
            new Terminal(276, 'T_BRACE_CLOSE', false), 
            (new Concatenation('InputValue', [274, 275, 276], 'InputValue'))->setDefaultId('InputValue'), 
            new Terminal(278, 'T_COLON', false), 
            new Concatenation(279, ['Value'], null), 
            (new Concatenation('ArgumentValue', ['DependentName', 278, 279], 'ArgumentValue'))->setDefaultId('ArgumentValue'), 
            new Concatenation(281, ['ListValue'], null), 
            new Alternation('Value', ['ConstantValue', 'BooleanValue', 'NumberValue', 'StringValue', 'NullValue', 'InputValue', 281], null)
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
