<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Frontend;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\GrammarInterface;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class BaseParser has been auto-generated.
 * Generated at: 04-10-2018 21:19:07
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class BaseParser extends Stateful
{
    public const T_AND                 = 'T_AND';
    public const T_OR                  = 'T_OR';
    public const T_PARENTHESIS_OPEN    = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE   = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN        = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE       = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN          = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE         = 'T_BRACE_CLOSE';
    public const T_NON_NULL            = 'T_NON_NULL';
    public const T_THREE_DOTS          = 'T_THREE_DOTS';
    public const T_COLON               = 'T_COLON';
    public const T_EQUAL               = 'T_EQUAL';
    public const T_DIRECTIVE_AT        = 'T_DIRECTIVE_AT';
    public const T_ANGLE_OPEN          = 'T_ANGLE_OPEN';
    public const T_ANGLE_CLOSE         = 'T_ANGLE_CLOSE';
    public const T_COMMA               = 'T_COMMA';
    public const T_HEX_NUMBER          = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER          = 'T_BIN_NUMBER';
    public const T_NUMBER              = 'T_NUMBER';
    public const T_TRUE                = 'T_TRUE';
    public const T_FALSE               = 'T_FALSE';
    public const T_NULL                = 'T_NULL';
    public const T_BLOCK_STRING        = 'T_BLOCK_STRING';
    public const T_STRING              = 'T_STRING';
    public const T_DEBUG               = 'T_DEBUG';
    public const T_NAMESPACE           = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_IMPORT              = 'T_IMPORT';
    public const T_LET                 = 'T_LET';
    public const T_CONST               = 'T_CONST';
    public const T_EXTEND              = 'T_EXTEND';
    public const T_EXTENDS             = 'T_EXTENDS';
    public const T_IMPLEMENTS          = 'T_IMPLEMENTS';
    public const T_ON                  = 'T_ON';
    public const T_FRAGMENT            = 'T_FRAGMENT';
    public const T_TYPE                = 'T_TYPE';
    public const T_ENUM                = 'T_ENUM';
    public const T_UNION               = 'T_UNION';
    public const T_INTERFACE           = 'T_INTERFACE';
    public const T_SCHEMA              = 'T_SCHEMA';
    public const T_SCALAR              = 'T_SCALAR';
    public const T_DIRECTIVE           = 'T_DIRECTIVE';
    public const T_INPUT               = 'T_INPUT';
    public const T_PLUS                = 'T_PLUS';
    public const T_MINUS               = 'T_MINUS';
    public const T_DIV                 = 'T_DIV';
    public const T_MUL                 = 'T_MUL';
    public const T_VARIABLE            = 'T_VARIABLE';
    public const T_NAME                = 'T_NAME';
    public const T_COMMENT             = 'T_COMMENT';
    public const T_HTAB                = 'T_HTAB';
    public const T_LF                  = 'T_LF';
    public const T_CR                  = 'T_CR';
    public const T_WHITESPACE          = 'T_WHITESPACE';
    public const T_UTF32BE_BOM         = 'T_UTF32BE_BOM';
    public const T_UTF32LE_BOM         = 'T_UTF32LE_BOM';
    public const T_UTF16BE_BOM         = 'T_UTF16BE_BOM';
    public const T_UTF16LE_BOM         = 'T_UTF16LE_BOM';
    public const T_UTF8_BOM            = 'T_UTF8_BOM';
    public const T_UTF7_BOM            = 'T_UTF7_BOM';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND                 => '&',
        self::T_OR                  => '\\|',
        self::T_PARENTHESIS_OPEN    => '\\(',
        self::T_PARENTHESIS_CLOSE   => '\\)',
        self::T_BRACKET_OPEN        => '\\[',
        self::T_BRACKET_CLOSE       => '\\]',
        self::T_BRACE_OPEN          => '{',
        self::T_BRACE_CLOSE         => '}',
        self::T_NON_NULL            => '!',
        self::T_THREE_DOTS          => '\\.{3}',
        self::T_COLON               => ':',
        self::T_EQUAL               => '=',
        self::T_DIRECTIVE_AT        => '@',
        self::T_ANGLE_OPEN          => '<',
        self::T_ANGLE_CLOSE         => '>',
        self::T_COMMA               => ',',
        self::T_HEX_NUMBER          => '\\-?0x([0-9a-fA-F]+)',
        self::T_BIN_NUMBER          => '\\-?0b([0-1]+)',
        self::T_NUMBER              => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE                => '(?<=\\b)true\\b',
        self::T_FALSE               => '(?<=\\b)false\\b',
        self::T_NULL                => '(?<=\\b)null\\b',
        self::T_BLOCK_STRING        => '"""((?:\\\\"""|(?!""").)*)"""',
        self::T_STRING              => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_DEBUG               => '(?<=\\b)__dump\\b',
        self::T_NAMESPACE           => '(?<=\\b)namespace\\b',
        self::T_NAMESPACE_SEPARATOR => '/',
        self::T_IMPORT              => '(?<=\\b)import\\b',
        self::T_LET                 => '(?<=\\b)let\\b',
        self::T_CONST               => '(?<=\\b)const\\b',
        self::T_EXTEND              => '(?<=\\b)extend\\b',
        self::T_EXTENDS             => '(?<=\\b)extends\\b',
        self::T_IMPLEMENTS          => '(?<=\\b)implements\\b',
        self::T_ON                  => '(?<=\\b)on\\b',
        self::T_FRAGMENT            => '(?<=\\b)fragment\\b',
        self::T_TYPE                => '(?<=\\b)type\\b',
        self::T_ENUM                => '(?<=\\b)enum\\b',
        self::T_UNION               => '(?<=\\b)union\\b',
        self::T_INTERFACE           => '(?<=\\b)interface\\b',
        self::T_SCHEMA              => '(?<=\\b)schema\\b',
        self::T_SCALAR              => '(?<=\\b)scalar\\b',
        self::T_DIRECTIVE           => '(?<=\\b)directive\\b',
        self::T_INPUT               => '(?<=\\b)input\\b',
        self::T_PLUS                => '\\\\+',
        self::T_MINUS               => '\\\\-',
        self::T_DIV                 => '\\\\/',
        self::T_MUL                 => '\\\\*',
        self::T_VARIABLE            => '\\$([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)',
        self::T_NAME                => '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*',
        self::T_COMMENT             => '#[^\\n]*',
        self::T_HTAB                => '\\x09',
        self::T_LF                  => '\\x0A',
        self::T_CR                  => '\\x0D',
        self::T_WHITESPACE          => '\\x20',
        self::T_UTF32BE_BOM         => '^\\x00\\x00\\xFE\\xFF',
        self::T_UTF32LE_BOM         => '^\\xFE\\xFF\\x00\\x00',
        self::T_UTF16BE_BOM         => '^\\xFE\\xFF',
        self::T_UTF16LE_BOM         => '^\\xFF\\xFE',
        self::T_UTF8_BOM            => '^\\xEF\\xBB\\xBF',
        self::T_UTF7_BOM            => '^\\x2B\\x2F\\x76\\x38\\x2B\\x2F\\x76\\x39\\x2B\\x2F\\x76\\x2B\\x2B\\x2F\\x76\\x2F',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_COMMENT',
        'T_HTAB',
        'T_LF',
        'T_CR',
        'T_WHITESPACE',
        'T_UTF32BE_BOM',
        'T_UTF32LE_BOM',
        'T_UTF16BE_BOM',
        'T_UTF16LE_BOM',
        'T_UTF8_BOM',
        'T_UTF7_BOM',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Concatenation(0, ['__documentBody'], null),
            (new Concatenation('Document', [0], 'Document'))->setDefaultId('Document'),
            new Concatenation(2, ['DocumentBody'], null),
            new Concatenation('__documentBody', ['DocumentHead', 2], null),
            new Alternation(4, ['Instruction', 'Directive'], null),
            new Repetition('DocumentHead', 0, -1, 4, null),
            new Alternation(6, ['Instruction', 'Extension', 'Definition'], null),
            new Repetition('DocumentBody', 0, -1, 6, null),
            new Concatenation(8, ['StringValue'], null),
            (new Concatenation('Description', [8], 'Description'))->setDefaultId('Description'),
            new Terminal(10, 'T_EXTENDS', false),
            new Concatenation(11, ['TypeInvocation'], null),
            (new Concatenation('TypeDefinitionExtends', [10, 11], 'TypeDefinitionExtends'))->setDefaultId('TypeDefinitionExtends'),
            new Concatenation(13, ['__typeHintList'], 'TypeHint'),
            new Concatenation(14, ['__typeHintSingular'], null),
            new Concatenation(15, [14], 'TypeHint'),
            (new Alternation('TypeHint', [13, 15], null))->setDefaultId('TypeHint'),
            new Concatenation(17, ['__typeHintNullableList'], null),
            new Alternation('__typeHintList', ['__typeHintNonNullList', 17], null),
            new Terminal(19, 'T_BRACKET_OPEN', false),
            new Terminal(20, 'T_BRACKET_CLOSE', false),
            new Concatenation('__typeHintNullableList', [19, '__typeHintSingular', 20], 'List'),
            new Terminal(22, 'T_NON_NULL', false),
            new Concatenation('__typeHintNonNullList', ['__typeHintNullableList', 22], 'NonNull'),
            new Concatenation(24, ['__typeHintNullableSingular'], null),
            new Alternation('__typeHintSingular', ['__typeHintNonNullSingular', 24], null),
            new Concatenation('__typeHintNullableSingular', ['TypeInvocation'], null),
            new Terminal(27, 'T_NON_NULL', false),
            new Concatenation('__typeHintNonNullSingular', ['TypeInvocation', 27], 'NonNull'),
            new Terminal(29, 'T_IMPLEMENTS', false),
            new Repetition(30, 0, 1, '__implementsDelimiter', null),
            new Concatenation(31, ['__implementsDelimiter', 'TypeInvocation'], 'TypeDefinitionImplements'),
            new Repetition(32, 0, -1, 31, null),
            (new Concatenation('TypeDefinitionImplements', [29, 30, 'TypeInvocation', 32], null))->setDefaultId('TypeDefinitionImplements'),
            new Terminal(34, 'T_COMMA', false),
            new Terminal(35, 'T_AND', false),
            new Alternation('__implementsDelimiter', [34, 35], null),
            new Terminal('NameWithoutReserved', 'T_NAME', true),
            new Terminal(38, 'T_TRUE', true),
            new Terminal(39, 'T_FALSE', true),
            new Terminal(40, 'T_NULL', true),
            new Alternation('NameWithReserved', ['NameExceptValues', 38, 39, 40], null),
            new Terminal(42, 'T_NAMESPACE', true),
            new Terminal(43, 'T_IMPORT', true),
            new Terminal(44, 'T_LET', true),
            new Terminal(45, 'T_CONST', true),
            new Terminal(46, 'T_EXTEND', true),
            new Terminal(47, 'T_EXTENDS', true),
            new Terminal(48, 'T_IMPLEMENTS', true),
            new Terminal(49, 'T_ON', true),
            new Terminal(50, 'T_FRAGMENT', true),
            new Terminal(51, 'T_TYPE', true),
            new Terminal(52, 'T_ENUM', true),
            new Terminal(53, 'T_UNION', true),
            new Terminal(54, 'T_INPUT_UNION', true),
            new Terminal(55, 'T_INTERFACE', true),
            new Terminal(56, 'T_SCHEMA', true),
            new Terminal(57, 'T_SCALAR', true),
            new Terminal(58, 'T_DIRECTIVE', true),
            new Terminal(59, 'T_INPUT', true),
            new Alternation('NameExceptValues', ['NameWithoutReserved', 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], null),
            new Repetition(61, 0, 1, '__typeNameAtRoot', null),
            new Terminal(62, 'T_NAMESPACE_SEPARATOR', false),
            new Concatenation(63, [62, 'NameWithReserved'], 'TypeName'),
            new Repetition(64, 0, -1, 63, null),
            (new Concatenation('TypeName', [61, 'NameWithReserved', 64], null))->setDefaultId('TypeName'),
            new Terminal(66, 'T_NAMESPACE_SEPARATOR', false),
            new Concatenation('__typeNameAtRoot', [66], 'AtRoot'),
            new Terminal(68, 'T_VARIABLE', true),
            (new Concatenation('VariableName', [68], 'VariableName'))->setDefaultId('VariableName'),
            new Concatenation(70, ['NameWithReserved'], null),
            (new Concatenation('ConstantName', [70], 'ConstantName'))->setDefaultId('ConstantName'),
            new Concatenation('EnumValueConstantName', ['NameExceptValues'], 'ConstantName'),
            new Terminal(73, 'T_PARENTHESIS_OPEN', false),
            new Repetition(74, 0, 1, '__argumentDefinitions', null),
            new Terminal(75, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('ArgumentDefinitions', [73, 74, 75], null),
            new Repetition('__argumentDefinitions', 1, -1, 'ArgumentDefinition', null),
            new Repetition(78, 0, 1, 'Description', null),
            new Repetition(79, 0, 1, '__argumentDefinitionDefaultValue', null),
            new Terminal(80, 'T_COMMA', false),
            new Repetition(81, 0, 1, 80, null),
            new Repetition(82, 0, -1, 'Directive', null),
            new Terminal(83, 'T_COMMA', false),
            new Repetition(84, 0, 1, 83, null),
            (new Concatenation('ArgumentDefinition', [78, '__argumentDefinitionBody', 79, 81, 82, 84], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'),
            new Terminal(86, 'T_COLON', false),
            new Concatenation(87, ['TypeHint'], null),
            new Concatenation('__argumentDefinitionBody', ['ConstantName', 86, 87], null),
            new Terminal(89, 'T_EQUAL', false),
            new Concatenation('__argumentDefinitionDefaultValue', [89, 'Value'], 'DefaultValue'),
            new Repetition(91, 0, 1, 'Description', null),
            new Concatenation(92, ['DirectiveDefinitionBody'], null),
            (new Concatenation('DirectiveDefinition', [91, 'DirectiveDefinitionHead', 92], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'),
            new Terminal(94, 'T_DIRECTIVE', false),
            new Terminal(95, 'T_DIRECTIVE_AT', false),
            new Repetition(96, 0, 1, 'ArgumentDefinitions', null),
            new Concatenation('DirectiveDefinitionHead', [94, 95, 'TypeDefinition', 96], null),
            new Terminal(98, 'T_ON', false),
            new Concatenation(99, ['DirectiveLocations'], null),
            new Concatenation('DirectiveDefinitionBody', [98, 99], null),
            new Terminal(101, 'T_OR', false),
            new Repetition(102, 0, 1, 101, null),
            new Terminal(103, 'T_OR', false),
            new Concatenation(104, [103, 'DirectiveLocation'], 'DirectiveLocations'),
            new Repetition(105, 0, -1, 104, null),
            (new Concatenation('DirectiveLocations', [102, 'DirectiveLocation', 105], null))->setDefaultId('DirectiveLocations'),
            new Concatenation(107, ['ConstantName'], null),
            (new Concatenation('DirectiveLocation', [107], 'DirectiveLocation'))->setDefaultId('DirectiveLocation'),
            new Repetition(109, 0, 1, 'Description', null),
            new Repetition(110, 0, 1, 'EnumDefinitionBody', null),
            (new Concatenation('EnumDefinition', [109, 'EnumDefinitionHead', 110], 'EnumDefinition'))->setDefaultId('EnumDefinition'),
            new Repetition(112, 0, 1, 'Description', null),
            new Terminal(113, 'T_EXTEND', false),
            new Concatenation(114, ['EnumDefinition'], null),
            (new Concatenation('EnumExtension', [112, 113, 114], 'EnumExtension'))->setDefaultId('EnumExtension'),
            new Terminal(116, 'T_ENUM', false),
            new Repetition(117, 0, -1, 'Directive', null),
            new Concatenation('EnumDefinitionHead', [116, 'TypeDefinition', 117], null),
            new Terminal(119, 'T_BRACE_OPEN', false),
            new Repetition(120, 0, -1, 'EnumValueDefinition', null),
            new Terminal(121, 'T_BRACE_CLOSE', false),
            new Concatenation('EnumDefinitionBody', [119, 120, 121], null),
            new Repetition(123, 0, 1, 'Description', null),
            new Repetition(124, 0, 1, '__enumDefinitionValue', null),
            new Terminal(125, 'T_COMMA', false),
            new Repetition(126, 0, 1, 125, null),
            new Repetition(127, 0, -1, 'Directive', null),
            new Terminal(128, 'T_COMMA', false),
            new Repetition(129, 0, 1, 128, null),
            (new Concatenation('EnumValueDefinition', [123, 'EnumValueConstantName', 124, 126, 127, 129], 'EnumValueDefinition'))->setDefaultId('EnumValueDefinition'),
            new Terminal(131, 'T_COLON', false),
            new Terminal(132, 'T_EQUAL', false),
            new Concatenation(133, ['Value'], null),
            new Concatenation('__enumDefinitionValue', [131, 'TypeHint', 132, 133], null),
            new Repetition(135, 0, 1, 'Description', null),
            new Repetition(136, 0, 1, 'ArgumentDefinitions', null),
            new Terminal(137, 'T_COLON', false),
            new Terminal(138, 'T_COMMA', false),
            new Repetition(139, 0, 1, 138, null),
            new Repetition(140, 0, -1, 'Directive', null),
            new Terminal(141, 'T_COMMA', false),
            new Repetition(142, 0, 1, 141, null),
            (new Concatenation('FieldDefinition', [135, 'ConstantName', 136, 137, 'TypeHint', 139, 140, 142], 'FieldDefinition'))->setDefaultId('FieldDefinition'),
            new Repetition(144, 0, 1, 'Description', null),
            new Repetition(145, 0, 1, 'InputDefinitionBody', null),
            (new Concatenation('InputDefinition', [144, 'InputDefinitionHead', 145], 'InputDefinition'))->setDefaultId('InputDefinition'),
            new Repetition(147, 0, 1, 'Description', null),
            new Terminal(148, 'T_EXTEND', false),
            new Concatenation(149, ['InputDefinition'], null),
            (new Concatenation('InputExtension', [147, 148, 149], 'InputExtension'))->setDefaultId('InputExtension'),
            new Terminal(151, 'T_INPUT', false),
            new Repetition(152, 0, -1, 'Directive', null),
            new Concatenation('InputDefinitionHead', [151, 'TypeDefinition', 152], null),
            new Terminal(154, 'T_BRACE_OPEN', false),
            new Repetition(155, 0, -1, 'InputFieldDefinition', null),
            new Terminal(156, 'T_BRACE_CLOSE', false),
            new Concatenation('InputDefinitionBody', [154, 155, 156], null),
            new Repetition(158, 0, 1, 'Description', null),
            new Repetition(159, 0, 1, '__inputFieldDefinitionDefaultValue', null),
            new Terminal(160, 'T_COMMA', false),
            new Repetition(161, 0, 1, 160, null),
            new Repetition(162, 0, -1, 'Directive', null),
            new Terminal(163, 'T_COMMA', false),
            new Repetition(164, 0, 1, 163, null),
            (new Concatenation('InputFieldDefinition', [158, '__inputFieldDefinitionBody', 159, 161, 162, 164], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'),
            new Terminal(166, 'T_COLON', false),
            new Concatenation(167, ['TypeHint'], null),
            new Concatenation('__inputFieldDefinitionBody', ['ConstantName', 166, 167], null),
            new Terminal(169, 'T_EQUAL', false),
            new Concatenation(170, ['Value'], null),
            new Concatenation('__inputFieldDefinitionDefaultValue', [169, 170], null),
            new Repetition(172, 0, 1, 'Description', null),
            new Repetition(173, 0, 1, 'InterfaceDefinitionBody', null),
            (new Concatenation('InterfaceDefinition', [172, 'InterfaceDefinitionHead', 173], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'),
            new Repetition(175, 0, 1, 'Description', null),
            new Terminal(176, 'T_EXTEND', false),
            new Concatenation(177, ['InterfaceDefinition'], null),
            (new Concatenation('InterfaceExtension', [175, 176, 177], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'),
            new Terminal(179, 'T_INTERFACE', false),
            new Repetition(180, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(181, 0, -1, 'Directive', null),
            new Concatenation('InterfaceDefinitionHead', [179, 'TypeDefinition', 180, 181], null),
            new Terminal(183, 'T_BRACE_OPEN', false),
            new Repetition(184, 0, -1, 'FieldDefinition', null),
            new Terminal(185, 'T_BRACE_CLOSE', false),
            new Concatenation('InterfaceDefinitionBody', [183, 184, 185], null),
            new Repetition(187, 0, 1, 'Description', null),
            new Repetition(188, 0, 1, 'ObjectDefinitionBody', null),
            (new Concatenation('ObjectDefinition', [187, 'ObjectDefinitionHead', 188], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'),
            new Repetition(190, 0, 1, 'Description', null),
            new Terminal(191, 'T_EXTEND', false),
            new Concatenation(192, ['ObjectDefinition'], null),
            (new Concatenation('ObjectExtension', [190, 191, 192], 'ObjectExtension'))->setDefaultId('ObjectExtension'),
            new Terminal(194, 'T_TYPE', false),
            new Repetition(195, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(196, 0, -1, 'Directive', null),
            new Concatenation('ObjectDefinitionHead', [194, 'TypeDefinition', 195, 196], null),
            new Terminal(198, 'T_BRACE_OPEN', false),
            new Repetition(199, 0, -1, 'FieldDefinition', null),
            new Terminal(200, 'T_BRACE_CLOSE', false),
            new Concatenation('ObjectDefinitionBody', [198, 199, 200], null),
            new Repetition(202, 0, 1, 'Description', null),
            new Concatenation(203, ['ScalarDefinitionBody'], null),
            (new Concatenation('ScalarDefinition', [202, 203], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'),
            new Repetition(205, 0, 1, 'Description', null),
            new Terminal(206, 'T_EXTEND', false),
            new Concatenation(207, ['ScalarDefinition'], null),
            (new Concatenation('ScalarExtension', [205, 206, 207], 'ScalarExtension'))->setDefaultId('ScalarExtension'),
            new Terminal(209, 'T_SCALAR', false),
            new Repetition(210, 0, 1, 'TypeDefinitionExtends', null),
            new Repetition(211, 0, -1, 'Directive', null),
            new Concatenation('ScalarDefinitionBody', [209, 'TypeDefinition', 210, 211], null),
            new Repetition(213, 0, 1, 'Description', null),
            new Repetition(214, 0, 1, 'SchemaDefinitionBody', null),
            (new Concatenation('SchemaDefinition', [213, 'SchemaDefinitionHead', 214], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'),
            new Repetition(216, 0, 1, 'Description', null),
            new Terminal(217, 'T_EXTEND', false),
            new Concatenation(218, ['SchemaDefinition'], null),
            (new Concatenation('SchemaExtension', [216, 217, 218], 'SchemaExtension'))->setDefaultId('SchemaExtension'),
            new Terminal(220, 'T_SCHEMA', false),
            new Repetition(221, 0, 1, 'TypeName', null),
            new Repetition(222, 0, -1, 'Directive', null),
            new Concatenation('SchemaDefinitionHead', [220, 221, 222], null),
            new Terminal(224, 'T_BRACE_OPEN', false),
            new Repetition(225, 0, -1, 'SchemaFieldDefinition', null),
            new Terminal(226, 'T_BRACE_CLOSE', false),
            new Concatenation('SchemaDefinitionBody', [224, 225, 226], null),
            new Terminal(228, 'T_COLON', false),
            new Terminal(229, 'T_COMMA', false),
            new Repetition(230, 0, 1, 229, null),
            new Repetition(231, 0, -1, 'Directive', null),
            new Terminal(232, 'T_COMMA', false),
            new Repetition(233, 0, 1, 232, null),
            (new Concatenation('SchemaFieldDefinition', ['ConstantName', 228, 'TypeHint', 230, 231, 233], 'SchemaFieldDefinition'))->setDefaultId('SchemaFieldDefinition'),
            new Repetition(235, 0, 1, 'Description', null),
            new Repetition(236, 0, 1, 'UnionDefinitionBody', null),
            (new Concatenation('UnionDefinition', [235, 'UnionDefinitionHead', 236], 'UnionDefinition'))->setDefaultId('UnionDefinition'),
            new Repetition(238, 0, 1, 'Description', null),
            new Terminal(239, 'T_EXTEND', false),
            new Concatenation(240, ['UnionDefinition'], null),
            (new Concatenation('UnionExtension', [238, 239, 240], 'UnionExtension'))->setDefaultId('UnionExtension'),
            new Terminal(242, 'T_UNION', false),
            new Repetition(243, 0, -1, 'Directive', null),
            new Concatenation('UnionDefinitionHead', [242, 'TypeDefinition', 243], null),
            new Terminal(245, 'T_EQUAL', false),
            new Repetition(246, 0, 1, 'UnionDefinitionTargets', null),
            new Concatenation('UnionDefinitionBody', [245, 246], null),
            new Terminal(248, 'T_OR', false),
            new Repetition(249, 0, 1, 248, null),
            new Terminal(250, 'T_OR', false),
            new Concatenation(251, [250, 'TypeInvocation'], 'UnionDefinitionTargets'),
            new Repetition(252, 0, -1, 251, null),
            (new Concatenation('UnionDefinitionTargets', [249, 'TypeInvocation', 252], null))->setDefaultId('UnionDefinitionTargets'),
            new Concatenation(254, ['UnionDefinition'], null),
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 'EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 254], null),
            new Concatenation(256, ['UnionExtension'], null),
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 256], null),
            new Repetition(258, 0, 1, '__genericDefinitionArguments', null),
            (new Concatenation('TypeDefinition', ['TypeName', 258], 'TypeDefinition'))->setDefaultId('TypeDefinition'),
            new Terminal(260, 'T_ANGLE_OPEN', false),
            new Repetition(261, 0, -1, 'GenericDefinitionArgument', null),
            new Terminal(262, 'T_ANGLE_CLOSE', false),
            new Concatenation('__genericDefinitionArguments', [260, 261, 262], null),
            new Terminal(264, 'T_COLON', false),
            new Repetition(265, 0, 1, 'GenericDefinitionArgumentDefaultValue', null),
            new Terminal(266, 'T_COMMA', false),
            new Repetition(267, 0, 1, 266, null),
            (new Concatenation('GenericDefinitionArgument', ['GenericDefinitionArgumentName', 264, 'GenericDefinitionArgumentValue', 265, 267], 'GenericDefinitionArgument'))->setDefaultId('GenericDefinitionArgument'),
            new Concatenation(269, ['ConstantName'], null),
            (new Concatenation('GenericDefinitionArgumentName', [269], 'GenericDefinitionArgumentName'))->setDefaultId('GenericDefinitionArgumentName'),
            new Concatenation(271, ['TypeName'], null),
            (new Concatenation('GenericDefinitionArgumentValue', [271], 'GenericDefinitionArgumentValue'))->setDefaultId('GenericDefinitionArgumentValue'),
            new Terminal(273, 'T_EQUAL', false),
            new Concatenation(274, ['TypeInvocation'], null),
            (new Concatenation('GenericDefinitionArgumentDefaultValue', [273, 274], 'GenericDefinitionArgumentDefaultValue'))->setDefaultId('GenericDefinitionArgumentDefaultValue'),
            new Terminal(276, 'T_PARENTHESIS_OPEN', false),
            new Repetition(277, 0, -1, 'ArgumentValue', null),
            new Terminal(278, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('ArgumentValues', [276, 277, 278], null),
            new Terminal(280, 'T_COLON', false),
            new Terminal(281, 'T_COMMA', false),
            new Repetition(282, 0, 1, 281, null),
            (new Concatenation('ArgumentValue', ['ConstantName', 280, 'Value', 282], 'ArgumentValue'))->setDefaultId('ArgumentValue'),
            new Terminal(284, 'T_DIRECTIVE_AT', false),
            new Repetition(285, 0, 1, 'ArgumentValues', null),
            (new Concatenation('Directive', [284, 'TypeInvocation', 285], 'Directive'))->setDefaultId('Directive'),
            new Terminal(287, 'T_FALSE', true),
            new Concatenation(288, [287], 'BooleanValue'),
            new Terminal(289, 'T_TRUE', true),
            new Concatenation(290, [289], 'BooleanValue'),
            (new Alternation('BooleanValue', [288, 290], null))->setDefaultId('BooleanValue'),
            new Terminal(292, 'T_NUMBER', true),
            new Concatenation(293, [292], 'NumberValue'),
            new Terminal(294, 'T_HEX_NUMBER', true),
            new Concatenation(295, [294], 'NumberValue'),
            new Terminal(296, 'T_BIN_NUMBER', true),
            new Concatenation(297, [296], 'NumberValue'),
            (new Alternation('NumberValue', [293, 295, 297], null))->setDefaultId('NumberValue'),
            new Terminal(299, 'T_BLOCK_STRING', true),
            new Concatenation(300, [299], 'StringValue'),
            new Terminal(301, 'T_STRING', true),
            new Concatenation(302, [301], 'StringValue'),
            (new Alternation('StringValue', [300, 302], null))->setDefaultId('StringValue'),
            new Terminal(304, 'T_NULL', false),
            (new Concatenation('NullValue', [304], 'NullValue'))->setDefaultId('NullValue'),
            new Terminal(306, 'T_BRACE_OPEN', false),
            new Repetition(307, 0, -1, 'ArgumentValue', null),
            new Terminal(308, 'T_BRACE_CLOSE', false),
            (new Concatenation('InputValue', [306, 307, 308], 'InputValue'))->setDefaultId('InputValue'),
            new Terminal(310, 'T_BRACKET_OPEN', false),
            new Repetition(311, 0, -1, '__listValue', null),
            new Terminal(312, 'T_BRACKET_CLOSE', false),
            (new Concatenation('ListValue', [310, 311, 312], 'ListValue'))->setDefaultId('ListValue'),
            new Terminal(314, 'T_COMMA', false),
            new Repetition(315, 0, 1, 314, null),
            new Concatenation('__listValue', ['Value', 315], null),
            new Concatenation(317, ['NameExceptValues'], null),
            (new Concatenation('ConstantValue', [317], 'ConstantValue'))->setDefaultId('ConstantValue'),
            new Concatenation(319, ['ConstantValue'], null),
            new Alternation('Value', ['BooleanValue', 'NullValue', 'NumberValue', 'StringValue', 'InputValue', 'ListValue', 319], null),
            new Repetition(321, 0, 1, '__genericInvocationArguments', null),
            (new Concatenation('TypeInvocation', ['GenericInvocationName', 321], 'TypeInvocation'))->setDefaultId('TypeInvocation'),
            new Concatenation(323, ['TypeName'], 'GenericInvocationName'),
            new Concatenation(324, ['VariableName'], null),
            new Concatenation(325, [324], 'GenericInvocationName'),
            (new Alternation('GenericInvocationName', [323, 325], null))->setDefaultId('GenericInvocationName'),
            new Terminal(327, 'T_ANGLE_OPEN', false),
            new Repetition(328, 0, -1, 'GenericInvocationArgument', null),
            new Terminal(329, 'T_ANGLE_CLOSE', false),
            new Concatenation('__genericInvocationArguments', [327, 328, 329], null),
            new Terminal(331, 'T_COLON', false),
            new Terminal(332, 'T_COMMA', false),
            new Repetition(333, 0, 1, 332, null),
            new Concatenation('GenericInvocationArgument', ['GenericInvocationArgumentName', 331, 'GenericInvocationArgumentValue', 333], 'GenericInvocationArgument'),
            new Concatenation(335, ['ConstantName'], 'GenericInvocationArgumentName'),
            new Concatenation(336, ['VariableName'], null),
            new Concatenation(337, [336], 'GenericInvocationArgumentName'),
            (new Alternation('GenericInvocationArgumentName', [335, 337], null))->setDefaultId('GenericInvocationArgumentName'),
            new Concatenation(339, ['TypeInvocation'], 'GenericInvocationArgumentValue'),
            new Concatenation(340, ['VariableName'], null),
            new Concatenation(341, [340], 'GenericInvocationArgumentValue'),
            (new Alternation('GenericInvocationArgumentValue', [339, 341], null))->setDefaultId('GenericInvocationArgumentValue'),
            new Terminal(343, 'T_IMPORT', false),
            new Concatenation(344, ['Value'], 'ImportDefinition'),
            new Concatenation(345, ['VariableName'], 'ImportDefinition'),
            new Alternation(346, [344, 345], null),
            (new Concatenation('ImportDefinition', [343, 346], null))->setDefaultId('ImportDefinition'),
            new Terminal(348, 'T_NAMESPACE', false),
            new Concatenation(349, ['TypeName'], null),
            (new Concatenation('NamespaceDefinition', [348, 349], 'NamespaceDefinition'))->setDefaultId('NamespaceDefinition'),
            new Concatenation(351, ['__variableDefinitionBody'], null),
            (new Concatenation('VariableReassigment', [351], 'VariableReassigment'))->setDefaultId('VariableReassigment'),
            new Terminal(353, 'T_LET', false),
            new Concatenation(354, ['__variableDefinitionBody'], null),
            (new Concatenation('VariableDefinition', [353, 354], 'VariableDefinition'))->setDefaultId('VariableDefinition'),
            new Terminal(356, 'T_CONST', false),
            new Concatenation(357, ['__variableDefinitionBody'], null),
            (new Concatenation('ConstantDefinition', [356, 357], 'ConstantDefinition'))->setDefaultId('ConstantDefinition'),
            new Terminal(359, 'T_EQUAL', false),
            new Concatenation(360, ['VariableName', 359], null),
            new Repetition(361, 1, -1, 360, null),
            new Concatenation(362, ['VariableValue'], null),
            new Concatenation('__variableDefinitionBody', [361, 362], null),
            new Concatenation(364, ['VariableName'], 'VariableValue'),
            new Concatenation(365, ['Value'], 'VariableValue'),
            new Concatenation(366, ['TypeInvocation'], null),
            new Concatenation(367, [366], 'VariableValue'),
            (new Alternation('VariableValue', [364, 365, 367], null))->setDefaultId('VariableValue'),
            new Concatenation(369, ['VariableReassigment'], null),
            new Alternation('Instruction', ['NamespaceDefinition', 'ImportDefinition', 'ConstantDefinition', 'VariableDefinition', 369], null),
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
