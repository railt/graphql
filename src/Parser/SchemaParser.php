<?php
/**
 * This file is part of Parser package.
 *
 * For the full copyright and license information, please view the
 * LICENSE file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL\Parser;

use Railt\Compiler\Lexer\NativeStateful as SchemaParserLexer;
use Railt\Compiler\Parser\Runtime as SchemaParserRuntime;

/**
 * This class has been auto-generated by the Railt\Compiler\Generator
 */
final class SchemaParser extends SchemaParserRuntime
{
    /**#@+
     * List of SchemaParser::class tokens defined as public constants
     */
    public const T_AND                 = 'T_AND';
    public const T_OR                  = 'T_OR';
    public const T_PARENTHESIS_OPEN    = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE   = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN        = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE       = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN          = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE         = 'T_BRACE_CLOSE';
    public const T_NON_NULL            = 'T_NON_NULL';
    public const T_THREE_DOTS          = 'T_THREE_DOTS';
    public const T_COLON               = 'T_COLON';
    public const T_EQUAL               = 'T_EQUAL';
    public const T_DIRECTIVE_AT        = 'T_DIRECTIVE_AT';
    public const T_NUMBER              = 'T_NUMBER';
    public const T_TRUE                = 'T_TRUE';
    public const T_FALSE               = 'T_FALSE';
    public const T_NULL                = 'T_NULL';
    public const T_BLOCK_STRING        = 'T_BLOCK_STRING';
    public const T_STRING              = 'T_STRING';
    public const T_NAMESPACE           = 'T_NAMESPACE';
    public const T_NAMESPACE_SEPARATOR = 'T_NAMESPACE_SEPARATOR';
    public const T_IMPORT              = 'T_IMPORT';
    public const T_IMPORT_FROM         = 'T_IMPORT_FROM';
    public const T_EXTENDS             = 'T_EXTENDS';
    public const T_IMPLEMENTS          = 'T_IMPLEMENTS';
    public const T_ON                  = 'T_ON';
    public const T_TYPE                = 'T_TYPE';
    public const T_ENUM                = 'T_ENUM';
    public const T_UNION               = 'T_UNION';
    public const T_INPUT_UNION         = 'T_INPUT_UNION';
    public const T_INTERFACE           = 'T_INTERFACE';
    public const T_SCHEMA              = 'T_SCHEMA';
    public const T_SCALAR              = 'T_SCALAR';
    public const T_DIRECTIVE           = 'T_DIRECTIVE';
    public const T_INPUT               = 'T_INPUT';
    public const T_EXTEND              = 'T_EXTEND';
    public const T_FRAGMENT            = 'T_FRAGMENT';
    public const T_VARIABLE            = 'T_VARIABLE';
    public const T_NAME                = 'T_NAME';
    public const T_WHITESPACE          = 'T_WHITESPACE';
    public const T_COMMENT             = 'T_COMMENT';
    public const T_COMMA               = 'T_COMMA';
    /**#@-*/

    public function __construct()
    {
        parent::__construct(new SchemaParserLexer('/\\G(?P<T_AND>&)|(?P<T_OR>\\|)|(?P<T_PARENTHESIS_OPEN>\\()|(?P<T_PARENTHESIS_CLOSE>\\))|(?P<T_BRACKET_OPEN>\\[)|(?P<T_BRACKET_CLOSE>\\])|(?P<T_BRACE_OPEN>{)|(?P<T_BRACE_CLOSE>})|(?P<T_NON_NULL>!)|(?P<T_THREE_DOTS>\\.\\.\\.)|(?P<T_COLON>:)|(?P<T_EQUAL>=)|(?P<T_DIRECTIVE_AT>@)|(?P<T_NUMBER>\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?\\b)|(?P<T_TRUE>true\\b)|(?P<T_FALSE>false\\b)|(?P<T_NULL>null\\b)|(?P<T_BLOCK_STRING>"""(?:\\\\"""|(?!""").|\\s)+""")|(?P<T_STRING>"[^"\\\\]+(\\\\.[^"\\\\]*)*")|(?P<T_NAMESPACE>namespace\\b)|(?P<T_NAMESPACE_SEPARATOR>\\/)|(?P<T_IMPORT>import\\b)|(?P<T_IMPORT_FROM>from\\b)|(?P<T_EXTENDS>extends\\b)|(?P<T_IMPLEMENTS>implements\\b)|(?P<T_ON>on\\b)|(?P<T_TYPE>type\\b)|(?P<T_ENUM>enum\\b)|(?P<T_UNION>union\\b)|(?P<T_INPUT_UNION>inputUnion\\b)|(?P<T_INTERFACE>interface\\b)|(?P<T_SCHEMA>schema\\b)|(?P<T_SCALAR>scalar\\b)|(?P<T_DIRECTIVE>directive\\b)|(?P<T_INPUT>input\\b)|(?P<T_EXTEND>extend\\b)|(?P<T_FRAGMENT>fragment\\b)|(?P<T_VARIABLE>\\$[_A-Za-z][_0-9A-Za-z]*)|(?P<T_NAME>[_A-Za-z][_0-9A-Za-z]*)|(?P<T_WHITESPACE>(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+)|(?P<T_COMMENT>#[^\\n]*)|(?P<T_COMMA>,)|.*?/usS', ['T_WHITESPACE', 'T_COMMENT', 'T_COMMA']), [
                            0 =>
new \Railt\Compiler\Parser\Rule\Repetition(0, 0, -1, ['DocumentImports'], null),
                            1 =>
new \Railt\Compiler\Parser\Rule\Repetition(1, 0, -1, ['DocumentDefinitions'], null),
                            'Document' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Document', [0, 1], '#Document'),
                            'DocumentImports' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DocumentImports', ['Directive'], null),
                            'DocumentDefinitions' =>
new \Railt\Compiler\Parser\Rule\Alternation('DocumentDefinitions', ['Extension', 'Definition'], null),
                            5 =>
new \Railt\Compiler\Parser\Rule\Token(5, 'T_NAME', true),
                            'NameWithoutReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithoutReserved', [5], '#Name'),
                            7 =>
new \Railt\Compiler\Parser\Rule\Token(7, 'T_NAME', true),
                            8 =>
new \Railt\Compiler\Parser\Rule\Token(8, 'T_TRUE', true),
                            9 =>
new \Railt\Compiler\Parser\Rule\Token(9, 'T_FALSE', true),
                            10 =>
new \Railt\Compiler\Parser\Rule\Token(10, 'T_NULL', true),
                            11 =>
new \Railt\Compiler\Parser\Rule\Token(11, 'T_NAMESPACE', true),
                            12 =>
new \Railt\Compiler\Parser\Rule\Token(12, 'T_IMPORT', true),
                            13 =>
new \Railt\Compiler\Parser\Rule\Token(13, 'T_IMPORT_FROM', true),
                            14 =>
new \Railt\Compiler\Parser\Rule\Token(14, 'T_EXTENDS', true),
                            15 =>
new \Railt\Compiler\Parser\Rule\Token(15, 'T_IMPLEMENTS', true),
                            16 =>
new \Railt\Compiler\Parser\Rule\Token(16, 'T_ON', true),
                            17 =>
new \Railt\Compiler\Parser\Rule\Token(17, 'T_TYPE', true),
                            18 =>
new \Railt\Compiler\Parser\Rule\Token(18, 'T_ENUM', true),
                            19 =>
new \Railt\Compiler\Parser\Rule\Token(19, 'T_UNION', true),
                            20 =>
new \Railt\Compiler\Parser\Rule\Token(20, 'T_INPUT_UNION', true),
                            21 =>
new \Railt\Compiler\Parser\Rule\Token(21, 'T_INTERFACE', true),
                            22 =>
new \Railt\Compiler\Parser\Rule\Token(22, 'T_SCHEMA', true),
                            23 =>
new \Railt\Compiler\Parser\Rule\Token(23, 'T_SCALAR', true),
                            24 =>
new \Railt\Compiler\Parser\Rule\Token(24, 'T_DIRECTIVE', true),
                            25 =>
new \Railt\Compiler\Parser\Rule\Token(25, 'T_INPUT', true),
                            26 =>
new \Railt\Compiler\Parser\Rule\Token(26, 'T_EXTEND', true),
                            27 =>
new \Railt\Compiler\Parser\Rule\Token(27, 'T_FRAGMENT', true),
                            28 =>
new \Railt\Compiler\Parser\Rule\Alternation(28, [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], null),
                            'NameWithReserved' =>
new \Railt\Compiler\Parser\Rule\Concatenation('NameWithReserved', [28], '#Name'),
                            30 =>
new \Railt\Compiler\Parser\Rule\Token(30, 'T_NAME', true),
                            31 =>
new \Railt\Compiler\Parser\Rule\Token(31, 'T_NAMESPACE', true),
                            32 =>
new \Railt\Compiler\Parser\Rule\Token(32, 'T_IMPORT', true),
                            33 =>
new \Railt\Compiler\Parser\Rule\Token(33, 'T_IMPORT_FROM', true),
                            34 =>
new \Railt\Compiler\Parser\Rule\Token(34, 'T_EXTENDS', true),
                            35 =>
new \Railt\Compiler\Parser\Rule\Token(35, 'T_IMPLEMENTS', true),
                            36 =>
new \Railt\Compiler\Parser\Rule\Token(36, 'T_ON', true),
                            37 =>
new \Railt\Compiler\Parser\Rule\Token(37, 'T_TYPE', true),
                            38 =>
new \Railt\Compiler\Parser\Rule\Token(38, 'T_ENUM', true),
                            39 =>
new \Railt\Compiler\Parser\Rule\Token(39, 'T_UNION', true),
                            40 =>
new \Railt\Compiler\Parser\Rule\Token(40, 'T_INPUT_UNION', true),
                            41 =>
new \Railt\Compiler\Parser\Rule\Token(41, 'T_INTERFACE', true),
                            42 =>
new \Railt\Compiler\Parser\Rule\Token(42, 'T_SCHEMA', true),
                            43 =>
new \Railt\Compiler\Parser\Rule\Token(43, 'T_SCALAR', true),
                            44 =>
new \Railt\Compiler\Parser\Rule\Token(44, 'T_DIRECTIVE', true),
                            45 =>
new \Railt\Compiler\Parser\Rule\Token(45, 'T_INPUT', true),
                            46 =>
new \Railt\Compiler\Parser\Rule\Token(46, 'T_EXTEND', true),
                            47 =>
new \Railt\Compiler\Parser\Rule\Token(47, 'T_FRAGMENT', true),
                            'NameExceptValues' =>
new \Railt\Compiler\Parser\Rule\Alternation('NameExceptValues', [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], null),
                            49 =>
new \Railt\Compiler\Parser\Rule\Token(49, 'T_VARIABLE', true),
                            'Variable' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Variable', [49], '#Variable'),
                            51 =>
new \Railt\Compiler\Parser\Rule\Repetition(51, 0, 1, ['TypeNamespace'], null),
                            'TypeName' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeName', [51, 'NameWithReserved'], '#TypeName'),
                            53 =>
new \Railt\Compiler\Parser\Rule\Token(53, 'T_NAMESPACE_SEPARATOR', false),
                            54 =>
new \Railt\Compiler\Parser\Rule\Concatenation(54, ['NameWithReserved', 53], '#TypeNamespace'),
                            'TypeNamespace' =>
new \Railt\Compiler\Parser\Rule\Repetition('TypeNamespace', 1, -1, [54], null),
                            56 =>
new \Railt\Compiler\Parser\Rule\Token(56, 'T_FALSE', true),
                            57 =>
new \Railt\Compiler\Parser\Rule\Concatenation(57, [56], '#Boolean'),
                            58 =>
new \Railt\Compiler\Parser\Rule\Token(58, 'T_TRUE', true),
                            59 =>
new \Railt\Compiler\Parser\Rule\Concatenation(59, [58], '#Boolean'),
                            'Boolean' =>
new \Railt\Compiler\Parser\Rule\Alternation('Boolean', [57, 59], null),
                            61 =>
new \Railt\Compiler\Parser\Rule\Token(61, 'T_NUMBER', true),
                            'Number' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Number', [61], '#Number'),
                            63 =>
new \Railt\Compiler\Parser\Rule\Token(63, 'T_BLOCK_STRING', true),
                            64 =>
new \Railt\Compiler\Parser\Rule\Concatenation(64, [63], '#String'),
                            65 =>
new \Railt\Compiler\Parser\Rule\Token(65, 'T_STRING', true),
                            66 =>
new \Railt\Compiler\Parser\Rule\Concatenation(66, [65], '#String'),
                            'String' =>
new \Railt\Compiler\Parser\Rule\Alternation('String', [64, 66], null),
                            68 =>
new \Railt\Compiler\Parser\Rule\Token(68, 'T_NULL', true),
                            'Null' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Null', [68], '#Null'),
                            70 =>
new \Railt\Compiler\Parser\Rule\Token(70, 'T_BRACE_OPEN', false),
                            71 =>
new \Railt\Compiler\Parser\Rule\Repetition(71, 0, -1, ['__inputPair'], null),
                            72 =>
new \Railt\Compiler\Parser\Rule\Token(72, 'T_BRACE_CLOSE', false),
                            'Input' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Input', [70, 71, 72], '#Input'),
                            74 =>
new \Railt\Compiler\Parser\Rule\Token(74, 'T_COLON', false),
                            '__inputPair' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputPair', ['NameWithReserved', 74, 'Value'], '#Pair'),
                            76 =>
new \Railt\Compiler\Parser\Rule\Token(76, 'T_BRACKET_OPEN', false),
                            77 =>
new \Railt\Compiler\Parser\Rule\Repetition(77, 0, -1, ['Value'], null),
                            78 =>
new \Railt\Compiler\Parser\Rule\Token(78, 'T_BRACKET_CLOSE', false),
                            'List' =>
new \Railt\Compiler\Parser\Rule\Concatenation('List', [76, 77, 78], '#List'),
                            80 =>
new \Railt\Compiler\Parser\Rule\Concatenation(80, ['NameWithReserved'], '#Value'),
                            81 =>
new \Railt\Compiler\Parser\Rule\Concatenation(81, ['Boolean'], '#Value'),
                            82 =>
new \Railt\Compiler\Parser\Rule\Concatenation(82, ['Number'], '#Value'),
                            83 =>
new \Railt\Compiler\Parser\Rule\Concatenation(83, ['String'], '#Value'),
                            84 =>
new \Railt\Compiler\Parser\Rule\Concatenation(84, ['Input'], '#Value'),
                            85 =>
new \Railt\Compiler\Parser\Rule\Concatenation(85, ['Null'], '#Value'),
                            86 =>
new \Railt\Compiler\Parser\Rule\Concatenation(86, ['List'], '#Value'),
                            'Value' =>
new \Railt\Compiler\Parser\Rule\Alternation('Value', [80, 81, 82, 83, 84, 85, 86], null),
                            'Documentation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Documentation', ['String'], '#Description'),
                            89 =>
new \Railt\Compiler\Parser\Rule\Concatenation(89, ['__returnListDefinition'], '#ReturnTypeDefinition'),
                            90 =>
new \Railt\Compiler\Parser\Rule\Concatenation(90, ['__returnTypeDefinition'], '#ReturnTypeDefinition'),
                            'ReturnTypeDefinition' =>
new \Railt\Compiler\Parser\Rule\Alternation('ReturnTypeDefinition', [89, 90], null),
                            92 =>
new \Railt\Compiler\Parser\Rule\Token(92, 'T_NON_NULL', true),
                            '__returnTypeNonNullModifier' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeNonNullModifier', [92], '#NonNull'),
                            94 =>
new \Railt\Compiler\Parser\Rule\Token(94, 'T_BRACKET_OPEN', false),
                            95 =>
new \Railt\Compiler\Parser\Rule\Token(95, 'T_BRACKET_CLOSE', false),
                            96 =>
new \Railt\Compiler\Parser\Rule\Repetition(96, 0, 1, ['__returnTypeNonNullModifier'], null),
                            '__returnListDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnListDefinition', [94, '__returnTypeDefinition', 95, 96], '#List'),
                            98 =>
new \Railt\Compiler\Parser\Rule\Repetition(98, 0, 1, ['__returnTypeDefinitionArguments'], null),
                            99 =>
new \Railt\Compiler\Parser\Rule\Concatenation(99, ['TypeName', 98], null),
                            100 =>
new \Railt\Compiler\Parser\Rule\Alternation(100, [99, 'Variable'], null),
                            101 =>
new \Railt\Compiler\Parser\Rule\Repetition(101, 0, 1, ['__returnTypeNonNullModifier'], null),
                            '__returnTypeDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeDefinition', [100, 101], '#Type'),
                            103 =>
new \Railt\Compiler\Parser\Rule\Token(103, 'T_PARENTHESIS_OPEN', false),
                            104 =>
new \Railt\Compiler\Parser\Rule\Repetition(104, 0, -1, ['ArgumentDefinition'], null),
                            105 =>
new \Railt\Compiler\Parser\Rule\Token(105, 'T_PARENTHESIS_CLOSE', false),
                            '__returnTypeDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__returnTypeDefinitionArguments', [103, 104, 105], '#TypeArguments'),
                            107 =>
new \Railt\Compiler\Parser\Rule\Token(107, 'T_IMPLEMENTS', false),
                            108 =>
new \Railt\Compiler\Parser\Rule\Token(108, 'T_AND', false),
                            109 =>
new \Railt\Compiler\Parser\Rule\Concatenation(109, [108, 'TypeName'], null),
                            110 =>
new \Railt\Compiler\Parser\Rule\Repetition(110, 0, -1, [109], null),
                            'TypeDefinitionImplements' =>
new \Railt\Compiler\Parser\Rule\Concatenation('TypeDefinitionImplements', [107, 'TypeName', 110], null),
                            112 =>
new \Railt\Compiler\Parser\Rule\Token(112, 'T_PARENTHESIS_OPEN', false),
                            113 =>
new \Railt\Compiler\Parser\Rule\Repetition(113, 0, -1, ['__genericArgumentDefinition'], null),
                            114 =>
new \Railt\Compiler\Parser\Rule\Token(114, 'T_PARENTHESIS_CLOSE', false),
                            'GenericArgumentsDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('GenericArgumentsDefinition', [112, 113, 114], null),
                            116 =>
new \Railt\Compiler\Parser\Rule\Token(116, 'T_COLON', false),
                            '__genericArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__genericArgumentDefinition', ['Variable', 116, 'TypeName'], '#GenericArgument'),
                            118 =>
new \Railt\Compiler\Parser\Rule\Repetition(118, 0, 1, ['Documentation'], null),
                            119 =>
new \Railt\Compiler\Parser\Rule\Token(119, 'T_COLON', false),
                            120 =>
new \Railt\Compiler\Parser\Rule\Repetition(120, 0, 1, ['__argumentDefinitionDefaultValue'], null),
                            'ArgumentDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentDefinition', [118, 'NameWithReserved', 119, 'ReturnTypeDefinition', 120], '#ArgumentDefinition'),
                            122 =>
new \Railt\Compiler\Parser\Rule\Token(122, 'T_EQUAL', false),
                            '__argumentDefinitionDefaultValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__argumentDefinitionDefaultValue', [122, 'Value'], null),
                            124 =>
new \Railt\Compiler\Parser\Rule\Repetition(124, 0, 1, ['Documentation'], null),
                            125 =>
new \Railt\Compiler\Parser\Rule\Repetition(125, 0, 1, ['__fieldDefinitionArguments'], null),
                            126 =>
new \Railt\Compiler\Parser\Rule\Token(126, 'T_COLON', false),
                            127 =>
new \Railt\Compiler\Parser\Rule\Repetition(127, 0, -1, ['Directive'], null),
                            'FieldDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('FieldDefinition', [124, 'NameWithReserved', 125, 126, 'ReturnTypeDefinition', 127], '#FieldDefinition'),
                            129 =>
new \Railt\Compiler\Parser\Rule\Token(129, 'T_PARENTHESIS_OPEN', false),
                            130 =>
new \Railt\Compiler\Parser\Rule\Repetition(130, 0, -1, ['__fieldDefinitionArgument'], null),
                            131 =>
new \Railt\Compiler\Parser\Rule\Token(131, 'T_PARENTHESIS_CLOSE', false),
                            '__fieldDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArguments', [129, 130, 131], null),
                            133 =>
new \Railt\Compiler\Parser\Rule\Repetition(133, 0, -1, ['Directive'], null),
                            '__fieldDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 133], null),
                            135 =>
new \Railt\Compiler\Parser\Rule\Repetition(135, 0, 1, ['Documentation'], null),
                            'DirectiveDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinition', [135, 'DirectiveDefinitionBody'], '#DirectiveDefinition'),
                            137 =>
new \Railt\Compiler\Parser\Rule\Token(137, 'T_DIRECTIVE', false),
                            138 =>
new \Railt\Compiler\Parser\Rule\Token(138, 'T_DIRECTIVE_AT', false),
                            139 =>
new \Railt\Compiler\Parser\Rule\Repetition(139, 0, 1, ['__directiveDefinitionArguments'], null),
                            140 =>
new \Railt\Compiler\Parser\Rule\Token(140, 'T_ON', false),
                            'DirectiveDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('DirectiveDefinitionBody', [137, 138, 'TypeName', 139, 140, '__directiveDefinitionLocations'], null),
                            142 =>
new \Railt\Compiler\Parser\Rule\Token(142, 'T_PARENTHESIS_OPEN', false),
                            143 =>
new \Railt\Compiler\Parser\Rule\Repetition(143, 0, -1, ['__directiveDefinitionArgument'], null),
                            144 =>
new \Railt\Compiler\Parser\Rule\Token(144, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveDefinitionArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArguments', [142, 143, 144], null),
                            '__directiveDefinitionArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], '#DirectiveArgument'),
                            147 =>
new \Railt\Compiler\Parser\Rule\Token(147, 'T_OR', false),
                            148 =>
new \Railt\Compiler\Parser\Rule\Repetition(148, 0, 1, [147], null),
                            149 =>
new \Railt\Compiler\Parser\Rule\Repetition(149, 1, -1, ['__directiveDefinitionLocation'], null),
                            '__directiveDefinitionLocations' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocations', [148, 149], '#DirectiveLocations'),
                            151 =>
new \Railt\Compiler\Parser\Rule\Token(151, 'T_OR', false),
                            152 =>
new \Railt\Compiler\Parser\Rule\Concatenation(152, [151, 'NameWithReserved'], null),
                            153 =>
new \Railt\Compiler\Parser\Rule\Repetition(153, 0, -1, [152], null),
                            '__directiveDefinitionLocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 153], null),
                            155 =>
new \Railt\Compiler\Parser\Rule\Repetition(155, 0, 1, ['Documentation'], null),
                            'EnumDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinition', [155, 'EnumDefinitionHead', 'EnumDefinitionBody'], '#EnumDefinition'),
                            157 =>
new \Railt\Compiler\Parser\Rule\Token(157, 'T_ENUM', false),
                            158 =>
new \Railt\Compiler\Parser\Rule\Repetition(158, 0, -1, ['Directive'], null),
                            'EnumDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionHead', [157, 'TypeName', 158], null),
                            160 =>
new \Railt\Compiler\Parser\Rule\Token(160, 'T_BRACE_OPEN', false),
                            161 =>
new \Railt\Compiler\Parser\Rule\Repetition(161, 1, -1, ['__enumDefinitionValue'], null),
                            162 =>
new \Railt\Compiler\Parser\Rule\Token(162, 'T_BRACE_CLOSE', false),
                            'EnumDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumDefinitionBody', [160, 161, 162], null),
                            164 =>
new \Railt\Compiler\Parser\Rule\Repetition(164, 0, 1, ['Documentation'], null),
                            165 =>
new \Railt\Compiler\Parser\Rule\Repetition(165, 0, -1, ['Directive'], null),
                            '__enumDefinitionValue' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__enumDefinitionValue', [164, 'NameExceptValues', 165], '#EnumValue'),
                            167 =>
new \Railt\Compiler\Parser\Rule\Repetition(167, 0, 1, ['Documentation'], null),
                            'InputDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinition', [167, 'InputDefinitionHead', 'InputDefinitionBody'], '#InputDefinition'),
                            169 =>
new \Railt\Compiler\Parser\Rule\Token(169, 'T_INPUT', false),
                            170 =>
new \Railt\Compiler\Parser\Rule\Repetition(170, 0, -1, ['Directive'], null),
                            'InputDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionHead', [169, 'TypeName', 170], null),
                            172 =>
new \Railt\Compiler\Parser\Rule\Token(172, 'T_BRACE_OPEN', false),
                            173 =>
new \Railt\Compiler\Parser\Rule\Repetition(173, 0, -1, ['__inputDefinitionField'], null),
                            174 =>
new \Railt\Compiler\Parser\Rule\Token(174, 'T_BRACE_CLOSE', false),
                            'InputDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputDefinitionBody', [172, 173, 174], null),
                            176 =>
new \Railt\Compiler\Parser\Rule\Repetition(176, 0, -1, ['Directive'], null),
                            '__inputDefinitionField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__inputDefinitionField', ['ArgumentDefinition', 176], '#InputField'),
                            178 =>
new \Railt\Compiler\Parser\Rule\Repetition(178, 0, 1, ['Documentation'], null),
                            'InterfaceDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinition', [178, 'InterfaceDefinitionHead', 'InterfaceDefinitionBody'], '#InterfaceDefinition'),
                            180 =>
new \Railt\Compiler\Parser\Rule\Token(180, 'T_INTERFACE', false),
                            181 =>
new \Railt\Compiler\Parser\Rule\Repetition(181, 0, 1, ['GenericArgumentsDefinition'], null),
                            182 =>
new \Railt\Compiler\Parser\Rule\Repetition(182, 0, 1, ['TypeDefinitionImplements'], null),
                            183 =>
new \Railt\Compiler\Parser\Rule\Repetition(183, 0, -1, ['Directive'], null),
                            'InterfaceDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionHead', [180, 'TypeName', 181, 182, 183], null),
                            185 =>
new \Railt\Compiler\Parser\Rule\Token(185, 'T_BRACE_OPEN', false),
                            186 =>
new \Railt\Compiler\Parser\Rule\Repetition(186, 0, -1, ['FieldDefinition'], null),
                            187 =>
new \Railt\Compiler\Parser\Rule\Token(187, 'T_BRACE_CLOSE', false),
                            'InterfaceDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceDefinitionBody', [185, 186, 187], null),
                            189 =>
new \Railt\Compiler\Parser\Rule\Repetition(189, 0, 1, ['Documentation'], null),
                            'ObjectDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinition', [189, 'ObjectDefinitionHead', 'ObjectDefinitionBody'], '#ObjectDefinition'),
                            191 =>
new \Railt\Compiler\Parser\Rule\Token(191, 'T_TYPE', false),
                            192 =>
new \Railt\Compiler\Parser\Rule\Repetition(192, 0, 1, ['GenericArgumentsDefinition'], null),
                            193 =>
new \Railt\Compiler\Parser\Rule\Repetition(193, 0, 1, ['TypeDefinitionImplements'], null),
                            194 =>
new \Railt\Compiler\Parser\Rule\Repetition(194, 0, -1, ['Directive'], null),
                            'ObjectDefinitionHead' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionHead', [191, 'TypeName', 192, 193, 194], null),
                            196 =>
new \Railt\Compiler\Parser\Rule\Token(196, 'T_BRACE_OPEN', false),
                            197 =>
new \Railt\Compiler\Parser\Rule\Repetition(197, 0, -1, ['FieldDefinition'], null),
                            198 =>
new \Railt\Compiler\Parser\Rule\Token(198, 'T_BRACE_CLOSE', false),
                            'ObjectDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectDefinitionBody', [196, 197, 198], null),
                            200 =>
new \Railt\Compiler\Parser\Rule\Repetition(200, 0, 1, ['Documentation'], null),
                            'ScalarDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinition', [200, 'ScalarDefinitionBody'], '#ScalarDefinition'),
                            202 =>
new \Railt\Compiler\Parser\Rule\Token(202, 'T_SCALAR', false),
                            203 =>
new \Railt\Compiler\Parser\Rule\Repetition(203, 0, 1, ['__scalarExtends'], null),
                            204 =>
new \Railt\Compiler\Parser\Rule\Repetition(204, 0, -1, ['Directive'], null),
                            'ScalarDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarDefinitionBody', [202, 'TypeName', 203, 204], null),
                            206 =>
new \Railt\Compiler\Parser\Rule\Token(206, 'T_EXTENDS', false),
                            '__scalarExtends' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__scalarExtends', [206, 'TypeName'], '#Extends'),
                            208 =>
new \Railt\Compiler\Parser\Rule\Repetition(208, 0, 1, ['Documentation'], null),
                            'SchemaDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinition', [208, 'SchemaDefinitionBody'], '#SchemaDefinition'),
                            210 =>
new \Railt\Compiler\Parser\Rule\Token(210, 'T_SCHEMA', false),
                            211 =>
new \Railt\Compiler\Parser\Rule\Repetition(211, 0, 1, ['TypeName'], null),
                            212 =>
new \Railt\Compiler\Parser\Rule\Token(212, 'T_BRACE_OPEN', false),
                            213 =>
new \Railt\Compiler\Parser\Rule\Repetition(213, 0, -1, ['__schemaField'], null),
                            214 =>
new \Railt\Compiler\Parser\Rule\Token(214, 'T_BRACE_CLOSE', false),
                            'SchemaDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaDefinitionBody', [210, 211, 212, 213, 214], null),
                            216 =>
new \Railt\Compiler\Parser\Rule\Token(216, 'T_COLON', false),
                            '__schemaField' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__schemaField', ['NameWithReserved', 216, 'TypeName'], '#SchemaField'),
                            218 =>
new \Railt\Compiler\Parser\Rule\Repetition(218, 0, 1, ['Documentation'], null),
                            'UnionDefinition' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinition', [218, 'UnionDefinitionBody'], '#UnionDefinition'),
                            220 =>
new \Railt\Compiler\Parser\Rule\Token(220, 'T_UNION', false),
                            221 =>
new \Railt\Compiler\Parser\Rule\Repetition(221, 0, -1, ['Directive'], null),
                            222 =>
new \Railt\Compiler\Parser\Rule\Token(222, 'T_EQUAL', false),
                            223 =>
new \Railt\Compiler\Parser\Rule\Token(223, 'T_OR', false),
                            224 =>
new \Railt\Compiler\Parser\Rule\Repetition(224, 0, 1, [223], null),
                            225 =>
new \Railt\Compiler\Parser\Rule\Repetition(225, 1, -1, ['__unionDefinitionTargets'], null),
                            'UnionDefinitionBody' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionDefinitionBody', [220, 'TypeName', 221, 222, 224, 225], null),
                            227 =>
new \Railt\Compiler\Parser\Rule\Token(227, 'T_OR', false),
                            228 =>
new \Railt\Compiler\Parser\Rule\Concatenation(228, [227, 'TypeName'], null),
                            229 =>
new \Railt\Compiler\Parser\Rule\Repetition(229, 0, -1, [228], null),
                            '__unionDefinitionTargets' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__unionDefinitionTargets', ['TypeName', 229], null),
                            'Definition' =>
new \Railt\Compiler\Parser\Rule\Alternation('Definition', ['DirectiveDefinition', 'EnumDefinition', 'InputDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 'SchemaDefinition', 'UnionDefinition'], null),
                            232 =>
new \Railt\Compiler\Parser\Rule\Token(232, 'T_EXTEND', false),
                            'EnumExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('EnumExtension', [232, '__enumExtensionVariants'], '#EnumExtension'),
                            234 =>
new \Railt\Compiler\Parser\Rule\Concatenation(234, ['EnumDefinitionHead', 'EnumDefinitionBody'], null),
                            '__enumExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 234], null),
                            236 =>
new \Railt\Compiler\Parser\Rule\Token(236, 'T_EXTEND', false),
                            'InputExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InputExtension', [236, '__inputExtensionVariants'], '#InputExtension'),
                            238 =>
new \Railt\Compiler\Parser\Rule\Concatenation(238, ['InputDefinitionHead', 'InputDefinitionBody'], null),
                            '__inputExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__inputExtensionVariants', ['InputDefinitionHead', 238], null),
                            240 =>
new \Railt\Compiler\Parser\Rule\Token(240, 'T_EXTEND', false),
                            'InterfaceExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('InterfaceExtension', [240, '__interfaceExtensionVariants'], '#InterfaceExtension'),
                            242 =>
new \Railt\Compiler\Parser\Rule\Concatenation(242, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null),
                            '__interfaceExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 242], null),
                            244 =>
new \Railt\Compiler\Parser\Rule\Token(244, 'T_EXTEND', false),
                            'ObjectExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ObjectExtension', [244, '__objectExtensionVariants'], '#ObjectExtension'),
                            246 =>
new \Railt\Compiler\Parser\Rule\Concatenation(246, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null),
                            '__objectExtensionVariants' =>
new \Railt\Compiler\Parser\Rule\Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 246], null),
                            248 =>
new \Railt\Compiler\Parser\Rule\Token(248, 'T_EXTEND', false),
                            'ScalarExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ScalarExtension', [248, 'ScalarDefinitionBody'], '#ScalarExtension'),
                            250 =>
new \Railt\Compiler\Parser\Rule\Token(250, 'T_EXTEND', false),
                            'SchemaExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('SchemaExtension', [250, 'SchemaDefinitionBody'], '#SchemaExtension'),
                            252 =>
new \Railt\Compiler\Parser\Rule\Token(252, 'T_EXTEND', false),
                            'UnionExtension' =>
new \Railt\Compiler\Parser\Rule\Concatenation('UnionExtension', [252, 'UnionDefinitionBody'], '#UnionExtension'),
                            'Extension' =>
new \Railt\Compiler\Parser\Rule\Alternation('Extension', ['EnumExtension', 'InputExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 'UnionExtension'], null),
                            255 =>
new \Railt\Compiler\Parser\Rule\Token(255, 'T_COLON', false),
                            'ArgumentInvocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('ArgumentInvocation', ['NameWithReserved', 255, 'Value'], null),
                            257 =>
new \Railt\Compiler\Parser\Rule\Token(257, 'T_DIRECTIVE_AT', false),
                            258 =>
new \Railt\Compiler\Parser\Rule\Repetition(258, 0, 1, ['__directiveInvocationArguments'], null),
                            'Directive' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Directive', [257, 'TypeName', 258], '#Directive'),
                            260 =>
new \Railt\Compiler\Parser\Rule\Token(260, 'T_PARENTHESIS_OPEN', false),
                            261 =>
new \Railt\Compiler\Parser\Rule\Repetition(261, 0, -1, ['__directiveInvocationArgument'], null),
                            262 =>
new \Railt\Compiler\Parser\Rule\Token(262, 'T_PARENTHESIS_CLOSE', false),
                            '__directiveInvocationArguments' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArguments', [260, 261, 262], null),
                            '__directiveInvocationArgument' =>
new \Railt\Compiler\Parser\Rule\Concatenation('__directiveInvocationArgument', ['ArgumentInvocation'], '#DirectiveArgument'),
                            'Invocation' =>
new \Railt\Compiler\Parser\Rule\Concatenation('Invocation', ['Directive'], null),
                    ]);
    }

    /**
     * @return string Returns the lexer compilation date and time in RFC3339 format
     */
    public function getBuiltDate(): string
    {
        return '2018-05-02UTC16:12:12.146+00:00';
    }
}
