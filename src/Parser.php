<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\GrammarInterface;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 31-07-2018 07:16:09
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND               = 'T_AND';
    public const T_OR                = 'T_OR';
    public const T_PARENTHESIS_OPEN  = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN      = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE     = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN        = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE       = 'T_BRACE_CLOSE';
    public const T_NON_NULL          = 'T_NON_NULL';
    public const T_THREE_DOTS        = 'T_THREE_DOTS';
    public const T_COLON             = 'T_COLON';
    public const T_EQUAL             = 'T_EQUAL';
    public const T_DIRECTIVE_AT      = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER        = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER        = 'T_BIN_NUMBER';
    public const T_NUMBER            = 'T_NUMBER';
    public const T_TRUE              = 'T_TRUE';
    public const T_FALSE             = 'T_FALSE';
    public const T_NULL              = 'T_NULL';
    public const T_BLOCK_STRING      = 'T_BLOCK_STRING';
    public const T_STRING            = 'T_STRING';
    public const T_EXTENDS           = 'T_EXTENDS';
    public const T_IMPLEMENTS        = 'T_IMPLEMENTS';
    public const T_ON                = 'T_ON';
    public const T_TYPE              = 'T_TYPE';
    public const T_ENUM              = 'T_ENUM';
    public const T_UNION             = 'T_UNION';
    public const T_INPUT_UNION       = 'T_INPUT_UNION';
    public const T_INTERFACE         = 'T_INTERFACE';
    public const T_SCHEMA            = 'T_SCHEMA';
    public const T_SCALAR            = 'T_SCALAR';
    public const T_DIRECTIVE         = 'T_DIRECTIVE';
    public const T_INPUT             = 'T_INPUT';
    public const T_EXTEND            = 'T_EXTEND';
    public const T_FRAGMENT          = 'T_FRAGMENT';
    public const T_VARIABLE          = 'T_VARIABLE';
    public const T_NAME              = 'T_NAME';
    public const T_WHITESPACE        = 'T_WHITESPACE';
    public const T_COMMENT           = 'T_COMMENT';
    public const T_COMMA             = 'T_COMMA';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND               => '&',
        self::T_OR                => '\\|',
        self::T_PARENTHESIS_OPEN  => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN      => '\\[',
        self::T_BRACKET_CLOSE     => '\\]',
        self::T_BRACE_OPEN        => '{',
        self::T_BRACE_CLOSE       => '}',
        self::T_NON_NULL          => '!',
        self::T_THREE_DOTS        => '\\.\\.\\.',
        self::T_COLON             => ':',
        self::T_EQUAL             => '=',
        self::T_DIRECTIVE_AT      => '@',
        self::T_HEX_NUMBER        => '\\-?0x([0-9a-fA-F]+)\\b',
        self::T_BIN_NUMBER        => '\\-?0b([0-1]+)\\b',
        self::T_NUMBER            => '\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE              => 'true\\b',
        self::T_FALSE             => 'false\\b',
        self::T_NULL              => 'null\\b',
        self::T_BLOCK_STRING      => '"""(?:\\\\"""|(?!""").|\\s)*"""',
        self::T_STRING            => '"[^"\\\\]*(\\\\.[^"\\\\]*)*"',
        self::T_EXTENDS           => 'extends\\b',
        self::T_IMPLEMENTS        => 'implements\\b',
        self::T_ON                => 'on\\b',
        self::T_TYPE              => 'type\\b',
        self::T_ENUM              => 'enum\\b',
        self::T_UNION             => 'union\\b',
        self::T_INPUT_UNION       => 'inputUnion\\b',
        self::T_INTERFACE         => 'interface\\b',
        self::T_SCHEMA            => 'schema\\b',
        self::T_SCALAR            => 'scalar\\b',
        self::T_DIRECTIVE         => 'directive\\b',
        self::T_INPUT             => 'input\\b',
        self::T_EXTEND            => 'extend\\b',
        self::T_FRAGMENT          => 'fragment\\b',
        self::T_VARIABLE          => '\\$[_A-Za-z][_0-9A-Za-z]*',
        self::T_NAME              => '[_A-Za-z][_0-9A-Za-z]*',
        self::T_WHITESPACE        => '(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+',
        self::T_COMMENT           => '#[^\\n]*',
        self::T_COMMA             => ',',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_COMMA',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'DirectiveDefinition'  => \Railt\SDL\Compiler\Definition\DirectiveDelegate::class,
        'EnumDefinition'       => \Railt\SDL\Compiler\Definition\EnumDelegate::class,
        'InputUnionDefinition' => \Railt\SDL\Compiler\Definition\InputUnionDelegate::class,
        'InterfaceDefinition'  => \Railt\SDL\Compiler\Definition\InterfaceDelegate::class,
        'ObjectDefinition'     => \Railt\SDL\Compiler\Definition\ObjectDelegate::class,
        'ScalarDefinition'     => \Railt\SDL\Compiler\Definition\ScalarDelegate::class,
        'SchemaDefinition'     => \Railt\SDL\Compiler\Definition\SchemaDelegate::class,
        'UnionDefinition'      => \Railt\SDL\Compiler\Definition\UnionDelegate::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Repetition(0, 0, -1, 'DocumentImports', null),
            new Repetition(1, 0, -1, 'DocumentDefinitions', null),
            (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'),
            new Concatenation('DocumentImports', ['Directive'], null),
            new Concatenation(4, ['Definition'], null),
            new Alternation('DocumentDefinitions', ['Extension', 4], null),
            new Terminal('NameWithoutReserved', 'T_NAME', true),
            new Terminal(7, 'T_TRUE', true),
            new Terminal(8, 'T_FALSE', true),
            new Terminal(9, 'T_NULL', true),
            new Alternation('NameWithReserved', ['NameExceptValues', 7, 8, 9], null),
            new Terminal(11, 'T_NAMESPACE', true),
            new Terminal(12, 'T_EXTENDS', true),
            new Terminal(13, 'T_IMPLEMENTS', true),
            new Terminal(14, 'T_ON', true),
            new Terminal(15, 'T_TYPE', true),
            new Terminal(16, 'T_ENUM', true),
            new Terminal(17, 'T_UNION', true),
            new Terminal(18, 'T_INPUT_UNION', true),
            new Terminal(19, 'T_INTERFACE', true),
            new Terminal(20, 'T_SCHEMA', true),
            new Terminal(21, 'T_SCALAR', true),
            new Terminal(22, 'T_DIRECTIVE', true),
            new Terminal(23, 'T_INPUT', true),
            new Terminal(24, 'T_EXTEND', true),
            new Terminal(25, 'T_FRAGMENT', true),
            new Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null),
            new Terminal(27, 'T_VARIABLE', true),
            new Concatenation('Variable', [27], 'Variable'),
            new Concatenation(29, ['NameWithReserved'], null),
            (new Concatenation('TypeName', [29], 'TypeName'))->setDefaultId('TypeName'),
            new Terminal(31, 'T_FALSE', true),
            new Concatenation(32, [31], 'Boolean'),
            new Terminal(33, 'T_TRUE', true),
            new Concatenation(34, [33], 'Boolean'),
            (new Alternation('Boolean', [32, 34], null))->setDefaultId('Boolean'),
            new Terminal(36, 'T_NUMBER', true),
            new Concatenation(37, [36], 'Number'),
            new Terminal(38, 'T_HEX_NUMBER', true),
            new Concatenation(39, [38], 'Number'),
            new Terminal(40, 'T_BIN_NUMBER', true),
            new Concatenation(41, [40], 'Number'),
            (new Alternation('Number', [37, 39, 41], null))->setDefaultId('Number'),
            new Terminal(43, 'T_BLOCK_STRING', true),
            new Concatenation(44, [43], 'String'),
            new Terminal(45, 'T_STRING', true),
            new Concatenation(46, [45], 'String'),
            (new Alternation('String', [44, 46], null))->setDefaultId('String'),
            new Terminal(48, 'T_NULL', true),
            (new Concatenation('Null', [48], 'Null'))->setDefaultId('Null'),
            new Terminal(50, 'T_BRACE_OPEN', false),
            new Repetition(51, 0, -1, '__inputPair', null),
            new Terminal(52, 'T_BRACE_CLOSE', false),
            (new Concatenation('Input', [50, 51, 52], 'Input'))->setDefaultId('Input'),
            new Terminal(54, 'T_COLON', false),
            new Concatenation('__inputPair', ['NameWithReserved', 54, 'Value'], 'Pair'),
            new Terminal(56, 'T_BRACKET_OPEN', false),
            new Repetition(57, 0, -1, 'Value', null),
            new Terminal(58, 'T_BRACKET_CLOSE', false),
            (new Concatenation('List', [56, 57, 58], 'List'))->setDefaultId('List'),
            new Concatenation(60, ['NameWithReserved'], 'Value'),
            new Concatenation(61, ['Boolean'], 'Value'),
            new Concatenation(62, ['Number'], 'Value'),
            new Concatenation(63, ['String'], 'Value'),
            new Concatenation(64, ['Input'], 'Value'),
            new Concatenation(65, ['Null'], 'Value'),
            new Concatenation(66, ['List'], null),
            new Concatenation(67, [66], 'Value'),
            (new Alternation('Value', [60, 61, 62, 63, 64, 65, 67], null))->setDefaultId('Value'),
            new Concatenation('Documentation', ['String'], 'Description'),
            new Terminal(70, 'T_IMPLEMENTS', false),
            new Terminal(71, 'T_AND', false),
            new Concatenation(72, [71, 'TypeInvocation'], null),
            new Repetition(73, 0, -1, 72, null),
            new Concatenation('TypeDefinitionImplements', [70, 'TypeInvocation', 73], 'Implements'),
            new Terminal(75, 'T_PARENTHESIS_OPEN', false),
            new Repetition(76, 0, -1, '__genericArgumentDefinition', null),
            new Terminal(77, 'T_PARENTHESIS_CLOSE', false),
            (new Concatenation('TypeArguments', [75, 76, 77], 'TypeArguments'))->setDefaultId('TypeArguments'),
            new Terminal(79, 'T_COLON', false),
            new Concatenation('__genericArgumentDefinition', ['Variable', 79, 'TypeName'], 'TypeArgument'),
            new Concatenation(81, ['__typeHintList'], 'TypeHint'),
            new Concatenation(82, ['__typeHintValue'], null),
            new Concatenation(83, [82], 'TypeHint'),
            (new Alternation('TypeHint', [81, 83], null))->setDefaultId('TypeHint'),
            new Terminal(85, 'T_BRACKET_OPEN', false),
            new Terminal(86, 'T_BRACKET_CLOSE', false),
            new Repetition(87, 0, 1, '__typeHintNotNull', null),
            new Concatenation('__typeHintList', [85, '__typeHintValue', 86, 87], 'List'),
            new Repetition(89, 0, 1, '__typeHintNotNull', null),
            new Concatenation('__typeHintValue', ['TypeInvocation', 89], 'Value'),
            new Terminal(91, 'T_NON_NULL', false),
            new Concatenation('__typeHintNotNull', [91], 'NonNull'),
            new Repetition(93, 0, 1, 'Documentation', null),
            new Terminal(94, 'T_COLON', false),
            new Repetition(95, 0, 1, '__argumentDefinitionDefaultValue', null),
            new Repetition(96, 0, 1, 'Directives', null),
            (new Concatenation('ArgumentDefinition', [93, 'NameWithReserved', 94, 'TypeHint', 95, 96], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'),
            new Terminal(98, 'T_EQUAL', false),
            new Concatenation(99, ['Value'], null),
            new Concatenation('__argumentDefinitionDefaultValue', [98, 99], null),
            new Repetition(101, 0, 1, 'Documentation', null),
            new Repetition(102, 0, 1, '__fieldDefinitionArguments', null),
            new Terminal(103, 'T_COLON', false),
            new Repetition(104, 0, 1, 'Directives', null),
            (new Concatenation('FieldDefinition', [101, 'NameWithReserved', 102, 103, 'TypeHint', 104], 'FieldDefinition'))->setDefaultId('FieldDefinition'),
            new Terminal(106, 'T_PARENTHESIS_OPEN', false),
            new Repetition(107, 0, -1, '__fieldDefinitionArgument', null),
            new Terminal(108, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__fieldDefinitionArguments', [106, 107, 108], 'FieldArguments'),
            new Repetition(110, 0, 1, 'Directives', null),
            new Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 110], 'FieldArgument'),
            new Repetition(112, 0, 1, 'Documentation', null),
            new Concatenation(113, ['DirectiveDefinitionBody'], null),
            (new Concatenation('DirectiveDefinition', [112, 113], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'),
            new Terminal(115, 'T_DIRECTIVE', false),
            new Terminal(116, 'T_DIRECTIVE_AT', false),
            new Repetition(117, 0, 1, '__directiveDefinitionArguments', null),
            new Terminal(118, 'T_ON', false),
            new Concatenation(119, ['__directiveDefinitionLocations'], null),
            new Concatenation('DirectiveDefinitionBody', [115, 116, 'TypeName', 117, 118, 119], null),
            new Terminal(121, 'T_PARENTHESIS_OPEN', false),
            new Repetition(122, 0, -1, '__directiveDefinitionArgument', null),
            new Terminal(123, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__directiveDefinitionArguments', [121, 122, 123], null),
            new Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], 'DirectiveArgument'),
            new Terminal(126, 'T_OR', false),
            new Repetition(127, 0, 1, 126, null),
            new Repetition(128, 1, -1, '__directiveDefinitionLocation', null),
            new Concatenation('__directiveDefinitionLocations', [127, 128], 'DirectiveLocations'),
            new Terminal(130, 'T_OR', false),
            new Concatenation(131, [130, 'NameWithReserved'], null),
            new Repetition(132, 0, -1, 131, null),
            new Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 132], null),
            new Repetition(134, 0, 1, 'Documentation', null),
            new Concatenation(135, ['EnumDefinitionBody'], null),
            (new Concatenation('EnumDefinition', [134, 'EnumDefinitionHead', 135], 'EnumDefinition'))->setDefaultId('EnumDefinition'),
            new Terminal(137, 'T_ENUM', false),
            new Repetition(138, 0, 1, 'Directives', null),
            new Concatenation('EnumDefinitionHead', [137, 'TypeName', 138], null),
            new Terminal(140, 'T_BRACE_OPEN', false),
            new Repetition(141, 0, -1, '__enumDefinitionValue', null),
            new Terminal(142, 'T_BRACE_CLOSE', false),
            new Concatenation('EnumDefinitionBody', [140, 141, 142], null),
            new Repetition(144, 0, 1, 'Documentation', null),
            new Terminal(145, 'T_EQUAL', false),
            new Concatenation(146, [145, 'Value'], null),
            new Repetition(147, 0, 1, 146, null),
            new Repetition(148, 0, 1, 'Directives', null),
            new Concatenation('__enumDefinitionValue', [144, 'NameExceptValues', 147, 148], 'EnumValue'),
            new Repetition(150, 0, 1, 'Documentation', null),
            new Concatenation(151, ['InputDefinitionBody'], null),
            (new Concatenation('InputDefinition', [150, 'InputDefinitionHead', 151], 'InputDefinition'))->setDefaultId('InputDefinition'),
            new Terminal(153, 'T_INPUT', false),
            new Repetition(154, 0, 1, 'Directives', null),
            new Concatenation('InputDefinitionHead', [153, 'TypeName', 154], null),
            new Terminal(156, 'T_BRACE_OPEN', false),
            new Repetition(157, 0, -1, '__inputDefinitionField', null),
            new Terminal(158, 'T_BRACE_CLOSE', false),
            new Concatenation('InputDefinitionBody', [156, 157, 158], null),
            new Concatenation('__inputDefinitionField', ['InputFieldDefinition'], null),
            new Repetition(161, 0, 1, 'Documentation', null),
            new Terminal(162, 'T_COLON', false),
            new Repetition(163, 0, 1, '__inputFieldDefinitionDefaultValue', null),
            new Repetition(164, 0, 1, 'Directives', null),
            (new Concatenation('InputFieldDefinition', [161, 'NameWithReserved', 162, 'TypeHint', 163, 164], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'),
            new Terminal(166, 'T_EQUAL', false),
            new Concatenation(167, ['Value'], null),
            new Concatenation('__inputFieldDefinitionDefaultValue', [166, 167], null),
            new Repetition(169, 0, 1, 'Documentation', null),
            new Repetition(170, 0, 1, 'InputUnionDefinitionBody', null),
            (new Concatenation('InputUnionDefinition', [169, 'InputUnionDefinitionHead', 170], 'InputUnionDefinition'))->setDefaultId('InputUnionDefinition'),
            new Terminal(172, 'T_INPUT_UNION', false),
            new Repetition(173, 0, 1, 'Directives', null),
            new Concatenation('InputUnionDefinitionHead', [172, 'TypeName', 173], null),
            new Terminal(175, 'T_EQUAL', false),
            new Terminal(176, 'T_OR', false),
            new Repetition(177, 0, 1, 176, null),
            new Repetition(178, 1, -1, '__inputUnionDefinitionTargets', null),
            new Concatenation('InputUnionDefinitionBody', [175, 177, 178], null),
            new Terminal(180, 'T_OR', false),
            new Concatenation(181, [180, 'TypeName'], null),
            new Repetition(182, 0, -1, 181, null),
            new Concatenation('__inputUnionDefinitionTargets', ['TypeName', 182], null),
            new Repetition(184, 0, 1, 'Documentation', null),
            new Concatenation(185, ['InterfaceDefinitionBody'], null),
            (new Concatenation('InterfaceDefinition', [184, 'InterfaceDefinitionHead', 185], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'),
            new Terminal(187, 'T_INTERFACE', false),
            new Repetition(188, 0, 1, 'TypeArguments', null),
            new Repetition(189, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(190, 0, 1, 'Directives', null),
            new Concatenation('InterfaceDefinitionHead', [187, 'TypeName', 188, 189, 190], null),
            new Terminal(192, 'T_BRACE_OPEN', false),
            new Repetition(193, 0, 1, '__interfaceFieldDefinitions', null),
            new Repetition(194, 0, 1, 'ChildrenDefinitions', null),
            new Terminal(195, 'T_BRACE_CLOSE', false),
            new Concatenation('InterfaceDefinitionBody', [192, 193, 194, 195], null),
            new Repetition(197, 0, -1, 'FieldDefinition', null),
            new Concatenation('__interfaceFieldDefinitions', [197], 'FieldDefinitions'),
            new Repetition(199, 0, 1, 'Documentation', null),
            new Concatenation(200, ['ObjectDefinitionBody'], null),
            (new Concatenation('ObjectDefinition', [199, 'ObjectDefinitionHead', 200], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'),
            new Terminal(202, 'T_TYPE', false),
            new Repetition(203, 0, 1, 'TypeArguments', null),
            new Repetition(204, 0, 1, 'TypeDefinitionImplements', null),
            new Repetition(205, 0, 1, 'Directives', null),
            new Concatenation('ObjectDefinitionHead', [202, 'TypeName', 203, 204, 205], null),
            new Terminal(207, 'T_BRACE_OPEN', false),
            new Repetition(208, 0, 1, '__objectFieldDefinitions', null),
            new Repetition(209, 0, 1, 'ChildrenDefinitions', null),
            new Terminal(210, 'T_BRACE_CLOSE', false),
            new Concatenation('ObjectDefinitionBody', [207, 208, 209, 210], null),
            new Repetition(212, 0, -1, 'FieldDefinition', null),
            new Concatenation('__objectFieldDefinitions', [212], 'FieldDefinitions'),
            new Repetition(214, 0, 1, 'Documentation', null),
            new Concatenation(215, ['ScalarDefinitionBody'], null),
            (new Concatenation('ScalarDefinition', [214, 215], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'),
            new Terminal(217, 'T_SCALAR', false),
            new Repetition(218, 0, 1, '__scalarExtends', null),
            new Repetition(219, 0, 1, 'Directives', null),
            new Concatenation('ScalarDefinitionBody', [217, 'TypeName', 218, 219], null),
            new Terminal(221, 'T_EXTENDS', false),
            new Concatenation('__scalarExtends', [221, 'TypeName'], 'Extends'),
            new Repetition(223, 0, 1, 'Documentation', null),
            new Concatenation(224, ['SchemaDefinitionBody'], null),
            (new Concatenation('SchemaDefinition', [223, 224], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'),
            new Terminal(226, 'T_SCHEMA', false),
            new Repetition(227, 0, 1, 'TypeName', null),
            new Terminal(228, 'T_BRACE_OPEN', false),
            new Repetition(229, 0, -1, '__schemaField', null),
            new Terminal(230, 'T_BRACE_CLOSE', false),
            new Concatenation('SchemaDefinitionBody', [226, 227, 228, 229, 230], null),
            new Repetition(232, 0, 1, 'Documentation', null),
            new Terminal(233, 'T_COLON', false),
            new Concatenation('__schemaField', [232, 'NameWithReserved', 233, 'TypeName'], 'SchemaField'),
            new Repetition(235, 0, 1, 'Documentation', null),
            new Repetition(236, 0, 1, 'UnionDefinitionBody', null),
            (new Concatenation('UnionDefinition', [235, 'UnionDefinitionHead', 236], 'UnionDefinition'))->setDefaultId('UnionDefinition'),
            new Terminal(238, 'T_UNION', false),
            new Repetition(239, 0, 1, 'Directives', null),
            new Concatenation('UnionDefinitionHead', [238, 'TypeName', 239], null),
            new Terminal(241, 'T_EQUAL', false),
            new Terminal(242, 'T_OR', false),
            new Repetition(243, 0, 1, 242, null),
            new Repetition(244, 1, -1, '__unionDefinitionTargets', null),
            new Concatenation('UnionDefinitionBody', [241, 243, 244], null),
            new Terminal(246, 'T_OR', false),
            new Concatenation(247, [246, 'TypeName'], null),
            new Repetition(248, 0, -1, 247, null),
            new Concatenation('__unionDefinitionTargets', ['TypeName', 248], null),
            new Concatenation(250, ['__typeDefinitions'], null),
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 250], null),
            new Concatenation(252, ['__typeDefinitions'], null),
            (new Concatenation('ChildrenDefinitions', [252], 'ChildrenDefinitions'))->setDefaultId('ChildrenDefinitions'),
            new Concatenation(254, ['UnionDefinition'], null),
            new Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InputUnionDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 254], null),
            new Repetition(256, 0, 1, 'Documentation', null),
            new Terminal(257, 'T_EXTEND', false),
            new Concatenation(258, ['__enumExtensionVariants'], null),
            (new Concatenation('EnumExtension', [256, 257, 258], 'EnumExtension'))->setDefaultId('EnumExtension'),
            new Concatenation(260, ['EnumDefinitionHead', 'EnumDefinitionBody'], null),
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 260], null),
            new Repetition(262, 0, 1, 'Documentation', null),
            new Terminal(263, 'T_EXTEND', false),
            new Concatenation(264, ['__inputExtensionVariants'], null),
            (new Concatenation('InputExtension', [262, 263, 264], 'InputExtension'))->setDefaultId('InputExtension'),
            new Concatenation(266, ['InputDefinitionHead', 'InputDefinitionBody'], null),
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 266], null),
            new Repetition(268, 0, 1, 'Documentation', null),
            new Terminal(269, 'T_EXTEND', false),
            new Concatenation(270, ['InputUnionDefinitionBody'], null),
            (new Concatenation('InputUnionExtension', [268, 269, 'InputUnionDefinitionHead', 270], 'InputUnionExtension'))->setDefaultId('InputUnionExtension'),
            new Repetition(272, 0, 1, 'Documentation', null),
            new Terminal(273, 'T_EXTEND', false),
            new Concatenation(274, ['__interfaceExtensionVariants'], null),
            (new Concatenation('InterfaceExtension', [272, 273, 274], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'),
            new Concatenation(276, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null),
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 276], null),
            new Repetition(278, 0, 1, 'Documentation', null),
            new Terminal(279, 'T_EXTEND', false),
            new Concatenation(280, ['__objectExtensionVariants'], null),
            (new Concatenation('ObjectExtension', [278, 279, 280], 'ObjectExtension'))->setDefaultId('ObjectExtension'),
            new Concatenation(282, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null),
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 282], null),
            new Repetition(284, 0, 1, 'Documentation', null),
            new Terminal(285, 'T_EXTEND', false),
            new Concatenation(286, ['ScalarDefinitionBody'], null),
            (new Concatenation('ScalarExtension', [284, 285, 286], 'ScalarExtension'))->setDefaultId('ScalarExtension'),
            new Repetition(288, 0, 1, 'Documentation', null),
            new Terminal(289, 'T_EXTEND', false),
            new Concatenation(290, ['SchemaDefinitionBody'], null),
            (new Concatenation('SchemaExtension', [288, 289, 290], 'SchemaExtension'))->setDefaultId('SchemaExtension'),
            new Repetition(292, 0, 1, 'Documentation', null),
            new Terminal(293, 'T_EXTEND', false),
            new Concatenation(294, ['UnionDefinitionBody'], null),
            (new Concatenation('UnionExtension', [292, 293, 'UnionDefinitionHead', 294], 'UnionExtension'))->setDefaultId('UnionExtension'),
            new Concatenation(296, ['UnionExtension'], null),
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InputUnionExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 296], null),
            new Terminal(298, 'T_COLON', false),
            new Concatenation(299, ['Value'], null),
            new Concatenation('ArgumentInvocation', ['NameWithReserved', 298, 299], null),
            new Repetition(301, 1, -1, 'Directive', null),
            (new Concatenation('Directives', [301], 'Directives'))->setDefaultId('Directives'),
            new Terminal(303, 'T_DIRECTIVE_AT', false),
            new Repetition(304, 0, 1, '__directiveInvocationArguments', null),
            (new Concatenation('Directive', [303, 'TypeName', 304], 'Directive'))->setDefaultId('Directive'),
            new Terminal(306, 'T_PARENTHESIS_OPEN', false),
            new Repetition(307, 0, -1, '__directiveInvocationArgument', null),
            new Terminal(308, 'T_PARENTHESIS_CLOSE', false),
            new Concatenation('__directiveInvocationArguments', [306, 307, 308], null),
            new Concatenation('__directiveInvocationArgument', ['ArgumentInvocation'], 'DirectiveArgument'),
            new Concatenation(311, ['TypeName'], null),
            (new Concatenation('TypeInvocation', [311], 'TypeInvocation'))->setDefaultId('TypeInvocation'),
            new Concatenation('Invocation', ['Directive'], null),
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
