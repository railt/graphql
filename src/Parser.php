<?php

/**
 * This file is part of Railt package and has been autogenerated.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @see https://github.com/railt/sdl/blob/2.0.x-dev/LICENSE.md
 * @see https://github.com/phplrt/parser/blob/2.2.3/LICENSE.md
 * @see https://github.com/phplrt/lexer/blob/2.2.3/LICENSE.md
 */

declare(strict_types=1);

namespace Railt\SDL;

use Phplrt\Source\File;
use Railt\SDL\Ast\Node;
use Railt\SDL\Ast\Location;
use Railt\SDL\Parser\Lexer;
use Psr\Log\LoggerInterface;
use Railt\SDL\Parser\Builder;
use Phplrt\Parser\Rule\RuleInterface;
use Railt\SDL\Parser\ParserLoggerTrait;
use Phplrt\Parser\Parser as BaseParser;
use Phplrt\Parser\Buffer\BufferInterface;
use Phplrt\Contracts\Source\ReadableInterface;
use Railt\SDL\Exception\SyntaxErrorException;
use Phplrt\Parser\Exception\ParserRuntimeException;
use Phplrt\Parser\Rule\{Lexeme, Optional, Repetition, Alternation, Concatenation};

/**
 * This class is generated by railt/parser, specifically
 * by Railt\SDL\Parser\Generator\Generator.
 */
final class Parser extends BaseParser
{
    /**
     * @var string
     */
    private const ROOT_PRODUCTION = 'Document';

    /**
     * Parser constructor.
     */
    public function __construct()
    {
        parent::__construct(new Lexer(), $this->grammar(), [
            parent::CONFIG_AST_BUILDER  => new Builder(),
            parent::CONFIG_INITIAL_RULE => self::ROOT_PRODUCTION,
        ]);
    }

    /**
     * @return array|RuleInterface[]
     */
    private function grammar(): array
    {
        return [
            'Argument' => new Concatenation(
                ['Identifier', 135, 'Value'],
            ),
            'Arguments' => new Concatenation(
                [132, 133, 134],
            ),
            'BlockStringValue' => new Lexeme(
                'T_BLOCK_STRING',
                true,
            ),
            'BooleanValue' => new Alternation(
                [24, 25],
            ),
            'ConstValue' => new Alternation(
                ['IntValue', 'FloatValue', 'StringValue', 'BooleanValue', 'NullValue', 'EnumValue'],
            ),
            'Description' => new Optional(
                'StringValue',
            ),
            'Directive' => new Concatenation(
                [127, 'TypeName', 128],
            ),
            'DirectiveDefinition' => new Concatenation(
                ['Description', 'DirectiveDefinitionHead', 'DirectiveDefinitionBody'],
            ),
            'DirectiveDefinitionBody' => new Concatenation(
                [59, 'DirectiveLocations'],
            ),
            'DirectiveDefinitionHead' => new Concatenation(
                [55, 56, 'TypeName', 57, 58],
            ),
            'DirectiveIsRepeatable' => new Lexeme(
                'T_REPEATABLE',
                true,
            ),
            'DirectiveLocation' => new Concatenation(
                ['Identifier'],
            ),
            'DirectiveLocations' => new Concatenation(
                [63, 'DirectiveLocation', 64],
            ),
            'Directives' => new Repetition(
                'Directive',
                1,
                INF,
            ),
            'EnumTypeDefinition' => new Concatenation(
                ['Description', 'EnumTypeDefinitionExceptDescription'],
            ),
            'EnumTypeDefinitionBody' => new Concatenation(
                [86, 87, 88],
            ),
            'EnumTypeDefinitionExceptDescription' => new Concatenation(
                ['EnumTypeDefinitionHead', 83],
            ),
            'EnumTypeDefinitionHead' => new Concatenation(
                [84, 'TypeName', 85],
            ),
            'EnumTypeExtension' => new Concatenation(
                ['Description', 136, 'EnumTypeDefinitionExceptDescription'],
            ),
            'EnumValue' => new Concatenation(
                ['Identifier'],
            ),
            'EnumValueDefinition' => new Concatenation(
                ['Description', 'Identifier', 81, 82],
            ),
            'EnumValueDefinitions' => new Repetition(
                'EnumValueDefinition',
                1,
                INF,
            ),
            'FieldArguments' => new Concatenation(
                [70, 71, 72],
            ),
            'FieldDefinition' => new Concatenation(
                ['Description', 'Identifier', 66, 67, 'TypeHint', 68, 69],
            ),
            'FieldDefinitions' => new Repetition(
                'FieldDefinition',
                1,
                INF,
            ),
            'FloatValue' => new Alternation(
                [31, 32],
            ),
            'Identifier' => new Alternation(
                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
            ),
            'ImplementsInterfaces' => new Concatenation(
                [103, 104, 'NamedType', 105],
            ),
            'ImplementsInterfacesDelimiter' => new Alternation(
                [106, 107],
            ),
            'InlineStringValue' => new Lexeme(
                'T_STRING',
                true,
            ),
            'InputObjectTypeDefinition' => new Concatenation(
                ['Description', 'InputObjectTypeDefinitionExceptDescription'],
            ),
            'InputObjectTypeDefinitionBody' => new Concatenation(
                [92, 93, 94],
            ),
            'InputObjectTypeDefinitionExceptDescription' => new Concatenation(
                ['InputObjectTypeDefinitionHead', 89],
            ),
            'InputObjectTypeDefinitionHead' => new Concatenation(
                [90, 'TypeName', 91],
            ),
            'InputObjectTypeExtension' => new Concatenation(
                ['Description', 137, 'InputObjectTypeDefinitionExceptDescription'],
            ),
            'InputValueDefinition' => new Concatenation(
                ['Description', 'Identifier', 76, 'TypeHint', 77, 78, 79],
            ),
            'InputValueDefinitions' => new Repetition(
                'InputValueDefinition',
                1,
                INF,
            ),
            'IntValue' => new Lexeme(
                'T_INT',
                true,
            ),
            'InterfaceTypeDefinition' => new Concatenation(
                ['Description', 'InterfaceTypeDefinitionExceptDescription'],
            ),
            'InterfaceTypeDefinitionBody' => new Concatenation(
                [99, 100, 101],
            ),
            'InterfaceTypeDefinitionExceptDescription' => new Concatenation(
                ['InterfaceTypeDefinitionHead', 95],
            ),
            'InterfaceTypeDefinitionHead' => new Concatenation(
                [96, 'TypeName', 97, 98],
            ),
            'InterfaceTypeExtension' => new Concatenation(
                ['Description', 138, 'InterfaceTypeDefinitionExceptDescription'],
            ),
            'ListType' => new Concatenation(
                [20, 'TypeHint', 21],
            ),
            'ListValue' => new Concatenation(
                [26, 'ListValues', 27],
            ),
            'ListValues' => new Repetition(
                30,
                0,
                INF,
            ),
            'NamedType' => new Concatenation(
                ['TypeName'],
            ),
            'NonNullType' => new Concatenation(
                [22, 23],
            ),
            'NullValue' => new Lexeme(
                'T_NULL',
                false,
            ),
            'ObjectField' => new Concatenation(
                ['Identifier', 36, 'Value', 37],
            ),
            'ObjectFields' => new Repetition(
                'ObjectField',
                0,
                INF,
            ),
            'ObjectTypeDefinition' => new Concatenation(
                ['Description', 'ObjectTypeDefinitionExceptDescription'],
            ),
            'ObjectTypeDefinitionBody' => new Concatenation(
                [112, 113, 114],
            ),
            'ObjectTypeDefinitionExceptDescription' => new Concatenation(
                ['ObjectTypeDefinitionHead', 108],
            ),
            'ObjectTypeDefinitionHead' => new Concatenation(
                [109, 'TypeName', 110, 111],
            ),
            'ObjectTypeExtension' => new Concatenation(
                ['Description', 139, 'ObjectTypeDefinitionExceptDescription'],
            ),
            'ObjectValue' => new Concatenation(
                [33, 'ObjectFields', 34],
            ),
            'SchemaExtension' => new Concatenation(
                ['Description', 141, 'SchemaDefinitionExceptDescription'],
            ),
            'TypeHint' => new Alternation(
                ['NonNullType', 'ListType', 'NamedType'],
            ),
            'TypeName' => new Concatenation(
                ['Identifier'],
            ),
            'UnionTypeDefinition' => new Concatenation(
                ['Description', 'UnionTypeDefinitionExceptDescription'],
            ),
            'UnionTypeDefinitionBody' => new Concatenation(
                [120, 121],
            ),
            'UnionTypeDefinitionExceptDescription' => new Concatenation(
                ['UnionTypeDefinitionHead', 117],
            ),
            'UnionTypeDefinitionHead' => new Concatenation(
                [118, 'TypeName', 119],
            ),
            'UnionTypeDefinitionTargets' => new Concatenation(
                [125, 'NamedType', 126],
            ),
            'Value' => new Alternation(
                ['Variable', 'ConstValue', 'ListValue', 'ObjectValue'],
            ),
            'Variable' => new Concatenation(
                ['VariableName'],
            ),
            'VariableName' => new Lexeme(
                'T_VARIABLE',
                true,
            ),
            0 => new Lexeme(
                'T_TRUE',
                true,
            ),
            'OperationTypeDefinition' => new Concatenation(
                ['SchemaFieldName', 47, 'NamedType'],
            ),
            'OperationTypeDefinitions' => new Repetition(
                46,
                1,
                INF,
            ),
            'ScalarTypeDefinition' => new Concatenation(
                ['Description', 'ScalarTypeDefinitionExceptDescription'],
            ),
            'ScalarTypeDefinitionBody' => new Concatenation(
                [115, 'TypeName', 116],
            ),
            'ScalarTypeDefinitionExceptDescription' => new Concatenation(
                ['ScalarTypeDefinitionBody'],
            ),
            'ScalarTypeExtension' => new Concatenation(
                ['Description', 140, 'ScalarTypeDefinitionExceptDescription'],
            ),
            'SchemaDefinition' => new Concatenation(
                ['Description', 'SchemaDefinitionExceptDescription'],
            ),
            'SchemaDefinitionBody' => new Concatenation(
                [41, 42, 43],
            ),
            'SchemaDefinitionExceptDescription' => new Concatenation(
                ['SchemaDefinitionHead', 38],
            ),
            'SchemaDefinitionHead' => new Concatenation(
                [39, 40],
            ),
            'SchemaFieldName' => new Alternation(
                [48, 49, 50],
            ),
            'StringValue' => new Alternation(
                ['BlockStringValue', 'InlineStringValue'],
            ),
            1 => new Lexeme(
                'T_FALSE',
                true,
            ),
            2 => new Lexeme(
                'T_NULL',
                true,
            ),
            3 => new Lexeme(
                'T_TYPE',
                true,
            ),
            4 => new Lexeme(
                'T_ENUM',
                true,
            ),
            5 => new Lexeme(
                'T_UNION',
                true,
            ),
            6 => new Lexeme(
                'T_INTERFACE',
                true,
            ),
            7 => new Lexeme(
                'T_SCHEMA',
                true,
            ),
            8 => new Lexeme(
                'T_SCALAR',
                true,
            ),
            9 => new Lexeme(
                'T_DIRECTIVE',
                true,
            ),
            10 => new Lexeme(
                'T_INPUT',
                true,
            ),
            11 => new Lexeme(
                'T_EXTEND',
                true,
            ),
            12 => new Lexeme(
                'T_EXTENDS',
                true,
            ),
            13 => new Lexeme(
                'T_IMPLEMENTS',
                true,
            ),
            14 => new Lexeme(
                'T_ON',
                true,
            ),
            15 => new Lexeme(
                'T_REPEATABLE',
                true,
            ),
            16 => new Lexeme(
                'T_QUERY',
                true,
            ),
            17 => new Lexeme(
                'T_MUTATION',
                true,
            ),
            18 => new Lexeme(
                'T_SUBSCRIPTION',
                true,
            ),
            19 => new Lexeme(
                'T_NAME',
                true,
            ),
            20 => new Lexeme(
                'T_BRACKET_OPEN',
                false,
            ),
            21 => new Lexeme(
                'T_BRACKET_CLOSE',
                false,
            ),
            22 => new Alternation(
                ['ListType', 'NamedType'],
            ),
            23 => new Lexeme(
                'T_NON_NULL',
                false,
            ),
            24 => new Lexeme(
                'T_FALSE',
                true,
            ),
            25 => new Lexeme(
                'T_TRUE',
                true,
            ),
            26 => new Lexeme(
                'T_BRACKET_OPEN',
                false,
            ),
            27 => new Lexeme(
                'T_BRACKET_CLOSE',
                false,
            ),
            28 => new Lexeme(
                'T_COMMA',
                false,
            ),
            29 => new Optional(
                28,
            ),
            30 => new Concatenation(
                ['Value', 29],
            ),
            31 => new Lexeme(
                'T_FLOAT',
                true,
            ),
            32 => new Lexeme(
                'T_FLOAT_EXP',
                true,
            ),
            33 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            34 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            35 => new Lexeme(
                'T_COMMA',
                false,
            ),
            36 => new Lexeme(
                'T_COLON',
                false,
            ),
            37 => new Optional(
                35,
            ),
            38 => new Optional(
                'SchemaDefinitionBody',
            ),
            39 => new Lexeme(
                'T_SCHEMA',
                false,
            ),
            40 => new Optional(
                'Directives',
            ),
            41 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            42 => new Optional(
                'OperationTypeDefinitions',
            ),
            43 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            44 => new Lexeme(
                'T_COMMA',
                false,
            ),
            45 => new Optional(
                44,
            ),
            46 => new Concatenation(
                ['OperationTypeDefinition', 45],
            ),
            47 => new Lexeme(
                'T_COLON',
                false,
            ),
            48 => new Lexeme(
                'T_QUERY',
                true,
            ),
            49 => new Lexeme(
                'T_MUTATION',
                true,
            ),
            50 => new Lexeme(
                'T_SUBSCRIPTION',
                true,
            ),
            51 => new Lexeme(
                'T_PARENTHESIS_OPEN',
                false,
            ),
            52 => new Optional(
                'InputValueDefinitions',
            ),
            53 => new Lexeme(
                'T_PARENTHESIS_CLOSE',
                false,
            ),
            54 => new Concatenation(
                [51, 52, 53],
            ),
            55 => new Lexeme(
                'T_DIRECTIVE',
                false,
            ),
            56 => new Lexeme(
                'T_DIRECTIVE_AT',
                false,
            ),
            57 => new Optional(
                54,
            ),
            58 => new Optional(
                'DirectiveIsRepeatable',
            ),
            59 => new Lexeme(
                'T_ON',
                false,
            ),
            60 => new Lexeme(
                'T_OR',
                false,
            ),
            61 => new Lexeme(
                'T_OR',
                false,
            ),
            62 => new Concatenation(
                [61, 'DirectiveLocation'],
            ),
            63 => new Optional(
                60,
            ),
            64 => new Repetition(
                62,
                0,
                INF,
            ),
            65 => new Lexeme(
                'T_COMMA',
                false,
            ),
            66 => new Optional(
                'FieldArguments',
            ),
            67 => new Lexeme(
                'T_COLON',
                false,
            ),
            68 => new Optional(
                'Directives',
            ),
            69 => new Optional(
                65,
            ),
            70 => new Lexeme(
                'T_PARENTHESIS_OPEN',
                false,
            ),
            71 => new Optional(
                'InputValueDefinitions',
            ),
            72 => new Lexeme(
                'T_PARENTHESIS_CLOSE',
                false,
            ),
            73 => new Lexeme(
                'T_EQUAL',
                false,
            ),
            74 => new Concatenation(
                [73, 'Value'],
            ),
            75 => new Lexeme(
                'T_COMMA',
                false,
            ),
            76 => new Lexeme(
                'T_COLON',
                false,
            ),
            77 => new Optional(
                74,
            ),
            78 => new Optional(
                'Directives',
            ),
            79 => new Optional(
                75,
            ),
            80 => new Lexeme(
                'T_COMMA',
                false,
            ),
            81 => new Optional(
                'Directives',
            ),
            82 => new Optional(
                80,
            ),
            83 => new Optional(
                'EnumTypeDefinitionBody',
            ),
            84 => new Lexeme(
                'T_ENUM',
                false,
            ),
            85 => new Optional(
                'Directives',
            ),
            86 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            87 => new Optional(
                'EnumValueDefinitions',
            ),
            88 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            89 => new Optional(
                'InputObjectTypeDefinitionBody',
            ),
            90 => new Lexeme(
                'T_INPUT',
                false,
            ),
            91 => new Optional(
                'Directives',
            ),
            92 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            93 => new Optional(
                'InputValueDefinitions',
            ),
            94 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            95 => new Optional(
                'InterfaceTypeDefinitionBody',
            ),
            96 => new Lexeme(
                'T_INTERFACE',
                false,
            ),
            97 => new Optional(
                'ImplementsInterfaces',
            ),
            98 => new Optional(
                'Directives',
            ),
            99 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            100 => new Optional(
                'FieldDefinitions',
            ),
            101 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            102 => new Concatenation(
                ['ImplementsInterfacesDelimiter', 'NamedType'],
            ),
            103 => new Lexeme(
                'T_IMPLEMENTS',
                false,
            ),
            104 => new Optional(
                'ImplementsInterfacesDelimiter',
            ),
            105 => new Repetition(
                102,
                0,
                INF,
            ),
            106 => new Lexeme(
                'T_COMMA',
                false,
            ),
            107 => new Lexeme(
                'T_AND',
                false,
            ),
            108 => new Optional(
                'ObjectTypeDefinitionBody',
            ),
            109 => new Lexeme(
                'T_TYPE',
                false,
            ),
            110 => new Optional(
                'ImplementsInterfaces',
            ),
            111 => new Optional(
                'Directives',
            ),
            112 => new Lexeme(
                'T_BRACE_OPEN',
                false,
            ),
            113 => new Optional(
                'FieldDefinitions',
            ),
            114 => new Lexeme(
                'T_BRACE_CLOSE',
                false,
            ),
            115 => new Lexeme(
                'T_SCALAR',
                false,
            ),
            116 => new Optional(
                'Directives',
            ),
            117 => new Optional(
                'UnionTypeDefinitionBody',
            ),
            118 => new Lexeme(
                'T_UNION',
                false,
            ),
            119 => new Optional(
                'Directives',
            ),
            120 => new Lexeme(
                'T_EQUAL',
                false,
            ),
            121 => new Optional(
                'UnionTypeDefinitionTargets',
            ),
            122 => new Lexeme(
                'T_OR',
                false,
            ),
            123 => new Lexeme(
                'T_OR',
                false,
            ),
            124 => new Concatenation(
                [123, 'NamedType'],
            ),
            125 => new Optional(
                122,
            ),
            126 => new Repetition(
                124,
                0,
                INF,
            ),
            127 => new Lexeme(
                'T_DIRECTIVE_AT',
                false,
            ),
            128 => new Optional(
                'Arguments',
            ),
            129 => new Lexeme(
                'T_COMMA',
                false,
            ),
            130 => new Optional(
                129,
            ),
            131 => new Concatenation(
                ['Argument', 130],
            ),
            132 => new Lexeme(
                'T_PARENTHESIS_OPEN',
                false,
            ),
            133 => new Repetition(
                131,
                0,
                INF,
            ),
            134 => new Lexeme(
                'T_PARENTHESIS_CLOSE',
                false,
            ),
            135 => new Lexeme(
                'T_COLON',
                false,
            ),
            136 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            137 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            138 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            139 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            140 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            141 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            142 => new Lexeme(
                'T_EXTEND',
                false,
            ),
            'UnionTypeExtension' => new Concatenation(
                ['Description', 142, 'UnionTypeDefinitionExceptDescription'],
            ),
            'Document' => new Repetition(
                'Definition',
                0,
                INF,
            ),
            'Definition' => new Alternation(
                ['TypeSystemDefinition', 'TypeSystemExtension'],
            ),
            'TypeSystemDefinition' => new Alternation(
                ['SchemaDefinition', 'DirectiveDefinition', 'TypeDefinition'],
            ),
            'TypeDefinition' => new Alternation(
                ['ScalarTypeDefinition', 'ObjectTypeDefinition', 'InterfaceTypeDefinition', 'UnionTypeDefinition', 'EnumTypeDefinition', 'InputObjectTypeDefinition'],
            ),
            'TypeSystemExtension' => new Alternation(
                ['SchemaExtension', 'TypeExtension'],
            ),
            'TypeExtension' => new Alternation(
                ['ScalarTypeExtension', 'ObjectTypeExtension', 'InterfaceTypeExtension', 'UnionTypeExtension', 'EnumTypeExtension', 'InputObjectTypeExtension'],
            ),
        ];
    }

    /**
     * {@inheritDoc}
     */
    protected function next(ReadableInterface $source, BufferInterface $buffer, $state)
    {
        $from = $buffer->current()->getOffset();

        $result = parent::next($source, $buffer, $state);

        if ($result instanceof Node) {
            $result->loc = new Location($source, $from, $buffer->current()->getOffset());
        }

        return $result;
    }

    /**
     * {@inheritDoc}
     */
    public function parse($source): iterable
    {
        $source = File::new($source);

        try {
            return parent::parse($source);
        } catch (ParserRuntimeException $e) {
            throw new SyntaxErrorException($e->getMessage(), $source, $e->getToken()->getOffset());
        }
    }
}
