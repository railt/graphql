<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

namespace Railt\SDL;

use Railt\Lexer\Factory;
use Railt\Lexer\LexerInterface;
use Railt\Parser\Driver\Llk;
use Railt\Parser\Driver\Stateful;
use Railt\Parser\Grammar;
use Railt\Parser\ParserInterface;
use Railt\Parser\Rule\Alternation;
use Railt\Parser\Rule\Concatenation;
use Railt\Parser\Rule\Repetition;
use Railt\Parser\Rule\Terminal;
use Railt\Parser\GrammarInterface;

/**
 * --- DO NOT EDIT THIS FILE ---
 *
 * Class Parser has been auto-generated.
 * Generated at: 01-08-2018 08:46:36
 *
 * --- DO NOT EDIT THIS FILE ---
 */
class Parser extends Stateful
{
    public const T_AND = 'T_AND';
    public const T_OR = 'T_OR';
    public const T_PARENTHESIS_OPEN = 'T_PARENTHESIS_OPEN';
    public const T_PARENTHESIS_CLOSE = 'T_PARENTHESIS_CLOSE';
    public const T_BRACKET_OPEN = 'T_BRACKET_OPEN';
    public const T_BRACKET_CLOSE = 'T_BRACKET_CLOSE';
    public const T_BRACE_OPEN = 'T_BRACE_OPEN';
    public const T_BRACE_CLOSE = 'T_BRACE_CLOSE';
    public const T_NON_NULL = 'T_NON_NULL';
    public const T_THREE_DOTS = 'T_THREE_DOTS';
    public const T_COLON = 'T_COLON';
    public const T_EQUAL = 'T_EQUAL';
    public const T_DIRECTIVE_AT = 'T_DIRECTIVE_AT';
    public const T_HEX_NUMBER = 'T_HEX_NUMBER';
    public const T_BIN_NUMBER = 'T_BIN_NUMBER';
    public const T_NUMBER = 'T_NUMBER';
    public const T_TRUE = 'T_TRUE';
    public const T_FALSE = 'T_FALSE';
    public const T_NULL = 'T_NULL';
    public const T_BLOCK_STRING = 'T_BLOCK_STRING';
    public const T_STRING = 'T_STRING';
    public const T_EXTENDS = 'T_EXTENDS';
    public const T_IMPLEMENTS = 'T_IMPLEMENTS';
    public const T_ON = 'T_ON';
    public const T_TYPE = 'T_TYPE';
    public const T_ENUM = 'T_ENUM';
    public const T_UNION = 'T_UNION';
    public const T_INPUT_UNION = 'T_INPUT_UNION';
    public const T_INTERFACE = 'T_INTERFACE';
    public const T_SCHEMA = 'T_SCHEMA';
    public const T_SCALAR = 'T_SCALAR';
    public const T_DIRECTIVE = 'T_DIRECTIVE';
    public const T_INPUT = 'T_INPUT';
    public const T_EXTEND = 'T_EXTEND';
    public const T_FRAGMENT = 'T_FRAGMENT';
    public const T_VARIABLE = 'T_VARIABLE';
    public const T_NAME = 'T_NAME';
    public const T_WHITESPACE = 'T_WHITESPACE';
    public const T_COMMENT = 'T_COMMENT';
    public const T_COMMA = 'T_COMMA';

    /**
     * Lexical tokens list.
     *
     * @var string[]
     */
    protected const LEXER_TOKENS = [
        self::T_AND => '&',
        self::T_OR => '\\|',
        self::T_PARENTHESIS_OPEN => '\\(',
        self::T_PARENTHESIS_CLOSE => '\\)',
        self::T_BRACKET_OPEN => '\\[',
        self::T_BRACKET_CLOSE => '\\]',
        self::T_BRACE_OPEN => '{',
        self::T_BRACE_CLOSE => '}',
        self::T_NON_NULL => '!',
        self::T_THREE_DOTS => '\\.\\.\\.',
        self::T_COLON => ':',
        self::T_EQUAL => '=',
        self::T_DIRECTIVE_AT => '@',
        self::T_HEX_NUMBER => '\\-?0x([0-9a-fA-F]+)\\b',
        self::T_BIN_NUMBER => '\\-?0b([0-1]+)\\b',
        self::T_NUMBER => '\\-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][\\+\\-]?[0-9]+)?',
        self::T_TRUE => 'true\\b',
        self::T_FALSE => 'false\\b',
        self::T_NULL => 'null\\b',
        self::T_BLOCK_STRING => '"""((?:\\\\"""|(?!""").|\\s)*)"""',
        self::T_STRING => '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"',
        self::T_EXTENDS => 'extends\\b',
        self::T_IMPLEMENTS => 'implements\\b',
        self::T_ON => 'on\\b',
        self::T_TYPE => 'type\\b',
        self::T_ENUM => 'enum\\b',
        self::T_UNION => 'union\\b',
        self::T_INPUT_UNION => 'inputUnion\\b',
        self::T_INTERFACE => 'interface\\b',
        self::T_SCHEMA => 'schema\\b',
        self::T_SCALAR => 'scalar\\b',
        self::T_DIRECTIVE => 'directive\\b',
        self::T_INPUT => 'input\\b',
        self::T_EXTEND => 'extend\\b',
        self::T_FRAGMENT => 'fragment\\b',
        self::T_VARIABLE => '\\$[_A-Za-z][_0-9A-Za-z]*',
        self::T_NAME => '[_A-Za-z][_0-9A-Za-z]*',
        self::T_WHITESPACE => '(\\xfe\\xff|\\x20|\\x09|\\x0a|\\x0d)+',
        self::T_COMMENT => '#[^\\n]*',
        self::T_COMMA => ',',
    ];

    /**
     * List of skipped tokens.
     *
     * @var string[]
     */
    protected const LEXER_SKIPPED_TOKENS = [
        'T_WHITESPACE',
        'T_COMMENT',
        'T_COMMA',
    ];

    /**
     * @var int
     */
    protected const LEXER_FLAGS = Factory::LOOKAHEAD;

    /**
     * List of rule delegates.
     *
     * @var string[]
     */
    protected const PARSER_DELEGATES = [
        'DirectiveDefinition' => \Railt\SDL\Compiler\Definition\DirectiveDelegate::class,
        'EnumDefinition' => \Railt\SDL\Compiler\Definition\EnumDelegate::class,
        'InputUnionDefinition' => \Railt\SDL\Compiler\Definition\InputUnionDelegate::class,
        'InterfaceDefinition' => \Railt\SDL\Compiler\Definition\InterfaceDelegate::class,
        'ObjectDefinition' => \Railt\SDL\Compiler\Definition\ObjectDelegate::class,
        'ScalarDefinition' => \Railt\SDL\Compiler\Definition\ScalarDelegate::class,
        'SchemaDefinition' => \Railt\SDL\Compiler\Definition\SchemaDelegate::class,
        'UnionDefinition' => \Railt\SDL\Compiler\Definition\UnionDelegate::class,
    ];

    /**
     * Parser root rule name.
     *
     * @var string
     */
    protected const PARSER_ROOT_RULE = 'Document';

    /**
     * @return ParserInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function boot(): ParserInterface
    {
        return new Llk($this->bootLexer(), $this->bootGrammar());
    }

    /**
     * @return LexerInterface
     * @throws \InvalidArgumentException
     * @throws \Railt\Lexer\Exception\BadLexemeException
     */
    protected function bootLexer(): LexerInterface
    {
        return Factory::create(static::LEXER_TOKENS, static::LEXER_SKIPPED_TOKENS, static::LEXER_FLAGS);
    }

    /**
     * @return GrammarInterface
     */
    protected function bootGrammar(): GrammarInterface
    {
        return new Grammar([
            new Repetition(0, 0, -1, 'DocumentImports', null), 
            new Repetition(1, 0, -1, 'DocumentDefinitions', null), 
            (new Concatenation('Document', [0, 1], 'Document'))->setDefaultId('Document'), 
            new Concatenation('DocumentImports', ['Directive'], null), 
            new Concatenation(4, ['Definition'], null), 
            new Alternation('DocumentDefinitions', ['Extension', 4], null), 
            new Terminal('NameWithoutReserved', 'T_NAME', true), 
            new Terminal(7, 'T_TRUE', true), 
            new Terminal(8, 'T_FALSE', true), 
            new Terminal(9, 'T_NULL', true), 
            new Alternation('NameWithReserved', ['NameExceptValues', 7, 8, 9], null), 
            new Terminal(11, 'T_NAMESPACE', true), 
            new Terminal(12, 'T_EXTENDS', true), 
            new Terminal(13, 'T_IMPLEMENTS', true), 
            new Terminal(14, 'T_ON', true), 
            new Terminal(15, 'T_TYPE', true), 
            new Terminal(16, 'T_ENUM', true), 
            new Terminal(17, 'T_UNION', true), 
            new Terminal(18, 'T_INPUT_UNION', true), 
            new Terminal(19, 'T_INTERFACE', true), 
            new Terminal(20, 'T_SCHEMA', true), 
            new Terminal(21, 'T_SCALAR', true), 
            new Terminal(22, 'T_DIRECTIVE', true), 
            new Terminal(23, 'T_INPUT', true), 
            new Terminal(24, 'T_EXTEND', true), 
            new Terminal(25, 'T_FRAGMENT', true), 
            new Alternation('NameExceptValues', ['NameWithoutReserved', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], null), 
            new Terminal(27, 'T_VARIABLE', true), 
            new Concatenation('Variable', [27], 'Variable'), 
            new Concatenation(29, ['NameWithReserved'], null), 
            (new Concatenation('TypeName', [29], 'TypeName'))->setDefaultId('TypeName'), 
            new Terminal(31, 'T_FALSE', true), 
            new Concatenation(32, [31], 'Boolean'), 
            new Terminal(33, 'T_TRUE', true), 
            new Concatenation(34, [33], 'Boolean'), 
            (new Alternation('Boolean', [32, 34], null))->setDefaultId('Boolean'), 
            new Terminal(36, 'T_NUMBER', true), 
            new Concatenation(37, [36], 'Number'), 
            new Terminal(38, 'T_HEX_NUMBER', true), 
            new Concatenation(39, [38], 'Number'), 
            new Terminal(40, 'T_BIN_NUMBER', true), 
            new Concatenation(41, [40], 'Number'), 
            (new Alternation('Number', [37, 39, 41], null))->setDefaultId('Number'), 
            new Terminal(43, 'T_BLOCK_STRING', true), 
            new Concatenation(44, [43], 'String'), 
            new Terminal(45, 'T_STRING', true), 
            new Concatenation(46, [45], 'String'), 
            (new Alternation('String', [44, 46], null))->setDefaultId('String'), 
            new Terminal(48, 'T_NULL', true), 
            (new Concatenation('Null', [48], 'Null'))->setDefaultId('Null'), 
            new Terminal(50, 'T_BRACE_OPEN', false), 
            new Repetition(51, 0, -1, '__inputPair', null), 
            new Terminal(52, 'T_BRACE_CLOSE', false), 
            (new Concatenation('Input', [50, 51, 52], 'Input'))->setDefaultId('Input'), 
            new Concatenation('__inputPairKey', ['NameWithReserved'], 'Key'), 
            new Terminal(55, 'T_COLON', false), 
            new Concatenation('__inputPair', ['__inputPairKey', 55, 'Value'], 'Pair'), 
            new Terminal(57, 'T_BRACKET_OPEN', false), 
            new Repetition(58, 0, -1, 'Value', null), 
            new Terminal(59, 'T_BRACKET_CLOSE', false), 
            (new Concatenation('List', [57, 58, 59], 'List'))->setDefaultId('List'), 
            new Concatenation(61, ['NameExceptValues'], 'Value'), 
            new Concatenation(62, ['Boolean'], 'Value'), 
            new Concatenation(63, ['Number'], 'Value'), 
            new Concatenation(64, ['String'], 'Value'), 
            new Concatenation(65, ['Input'], 'Value'), 
            new Concatenation(66, ['Null'], 'Value'), 
            new Concatenation(67, ['List'], null), 
            new Concatenation(68, [67], 'Value'), 
            (new Alternation('Value', [61, 62, 63, 64, 65, 66, 68], null))->setDefaultId('Value'), 
            new Concatenation('Documentation', ['String'], 'Description'), 
            new Terminal(71, 'T_IMPLEMENTS', false), 
            new Terminal(72, 'T_AND', false), 
            new Concatenation(73, [72, 'TypeInvocation'], null), 
            new Repetition(74, 0, -1, 73, null), 
            new Concatenation('TypeDefinitionImplements', [71, 'TypeInvocation', 74], 'Implements'), 
            new Terminal(76, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(77, 0, -1, '__genericArgumentDefinition', null), 
            new Terminal(78, 'T_PARENTHESIS_CLOSE', false), 
            (new Concatenation('TypeArguments', [76, 77, 78], 'TypeArguments'))->setDefaultId('TypeArguments'), 
            new Terminal(80, 'T_COLON', false), 
            new Concatenation('__genericArgumentDefinition', ['Variable', 80, 'TypeName'], 'TypeArgument'), 
            new Concatenation(82, ['__typeHintList'], 'TypeHint'), 
            new Concatenation(83, ['__typeHintValue'], null), 
            new Concatenation(84, [83], 'TypeHint'), 
            (new Alternation('TypeHint', [82, 84], null))->setDefaultId('TypeHint'), 
            new Terminal(86, 'T_BRACKET_OPEN', false), 
            new Terminal(87, 'T_BRACKET_CLOSE', false), 
            new Repetition(88, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintList', [86, '__typeHintValue', 87, 88], 'List'), 
            new Repetition(90, 0, 1, '__typeHintNotNull', null), 
            new Concatenation('__typeHintValue', ['TypeInvocation', 90], 'Value'), 
            new Terminal(92, 'T_NON_NULL', false), 
            new Concatenation('__typeHintNotNull', [92], 'NonNull'), 
            new Repetition(94, 0, 1, 'Documentation', null), 
            new Terminal(95, 'T_COLON', false), 
            new Repetition(96, 0, 1, '__argumentDefinitionDefaultValue', null), 
            new Repetition(97, 0, 1, 'Directives', null), 
            (new Concatenation('ArgumentDefinition', [94, 'NameWithReserved', 95, 'TypeHint', 96, 97], 'ArgumentDefinition'))->setDefaultId('ArgumentDefinition'), 
            new Terminal(99, 'T_EQUAL', false), 
            new Concatenation(100, ['Value'], null), 
            new Concatenation('__argumentDefinitionDefaultValue', [99, 100], null), 
            new Repetition(102, 0, 1, 'Documentation', null), 
            new Repetition(103, 0, 1, '__fieldDefinitionArguments', null), 
            new Terminal(104, 'T_COLON', false), 
            new Repetition(105, 0, 1, 'Directives', null), 
            (new Concatenation('FieldDefinition', [102, 'NameWithReserved', 103, 104, 'TypeHint', 105], 'FieldDefinition'))->setDefaultId('FieldDefinition'), 
            new Terminal(107, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(108, 0, -1, '__fieldDefinitionArgument', null), 
            new Terminal(109, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__fieldDefinitionArguments', [107, 108, 109], 'FieldArguments'), 
            new Repetition(111, 0, 1, 'Directives', null), 
            new Concatenation('__fieldDefinitionArgument', ['ArgumentDefinition', 111], 'FieldArgument'), 
            new Repetition(113, 0, 1, 'Documentation', null), 
            new Concatenation(114, ['DirectiveDefinitionBody'], null), 
            (new Concatenation('DirectiveDefinition', [113, 114], 'DirectiveDefinition'))->setDefaultId('DirectiveDefinition'), 
            new Terminal(116, 'T_DIRECTIVE', false), 
            new Terminal(117, 'T_DIRECTIVE_AT', false), 
            new Repetition(118, 0, 1, '__directiveDefinitionArguments', null), 
            new Terminal(119, 'T_ON', false), 
            new Concatenation(120, ['__directiveDefinitionLocations'], null), 
            new Concatenation('DirectiveDefinitionBody', [116, 117, 'TypeName', 118, 119, 120], null), 
            new Terminal(122, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(123, 0, -1, '__directiveDefinitionArgument', null), 
            new Terminal(124, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveDefinitionArguments', [122, 123, 124], null), 
            new Concatenation('__directiveDefinitionArgument', ['ArgumentDefinition'], 'DirectiveArgument'), 
            new Terminal(127, 'T_OR', false), 
            new Repetition(128, 0, 1, 127, null), 
            new Repetition(129, 1, -1, '__directiveDefinitionLocation', null), 
            new Concatenation('__directiveDefinitionLocations', [128, 129], 'DirectiveLocations'), 
            new Terminal(131, 'T_OR', false), 
            new Concatenation(132, [131, 'NameWithReserved'], null), 
            new Repetition(133, 0, -1, 132, null), 
            new Concatenation('__directiveDefinitionLocation', ['NameWithReserved', 133], null), 
            new Repetition(135, 0, 1, 'Documentation', null), 
            new Concatenation(136, ['EnumDefinitionBody'], null), 
            (new Concatenation('EnumDefinition', [135, 'EnumDefinitionHead', 136], 'EnumDefinition'))->setDefaultId('EnumDefinition'), 
            new Terminal(138, 'T_ENUM', false), 
            new Repetition(139, 0, 1, 'Directives', null), 
            new Concatenation('EnumDefinitionHead', [138, 'TypeName', 139], null), 
            new Terminal(141, 'T_BRACE_OPEN', false), 
            new Terminal(142, 'T_BRACE_CLOSE', false), 
            new Concatenation('EnumDefinitionBody', [141, '__enumDefinitionValues', 142], null), 
            new Repetition(144, 0, -1, '__enumDefinitionValue', null), 
            new Concatenation('__enumDefinitionValues', [144], 'EnumValues'), 
            new Repetition(146, 0, 1, 'Documentation', null), 
            new Terminal(147, 'T_EQUAL', false), 
            new Concatenation(148, [147, 'Value'], null), 
            new Repetition(149, 0, 1, 148, null), 
            new Repetition(150, 0, 1, 'Directives', null), 
            new Concatenation('__enumDefinitionValue', [146, 'NameExceptValues', 149, 150], 'EnumValue'), 
            new Repetition(152, 0, 1, 'Documentation', null), 
            new Concatenation(153, ['InputDefinitionBody'], null), 
            (new Concatenation('InputDefinition', [152, 'InputDefinitionHead', 153], 'InputDefinition'))->setDefaultId('InputDefinition'), 
            new Terminal(155, 'T_INPUT', false), 
            new Repetition(156, 0, 1, 'Directives', null), 
            new Concatenation('InputDefinitionHead', [155, 'TypeName', 156], null), 
            new Terminal(158, 'T_BRACE_OPEN', false), 
            new Repetition(159, 0, -1, '__inputDefinitionField', null), 
            new Terminal(160, 'T_BRACE_CLOSE', false), 
            new Concatenation('InputDefinitionBody', [158, 159, 160], null), 
            new Concatenation('__inputDefinitionField', ['InputFieldDefinition'], null), 
            new Repetition(163, 0, 1, 'Documentation', null), 
            new Terminal(164, 'T_COLON', false), 
            new Repetition(165, 0, 1, '__inputFieldDefinitionDefaultValue', null), 
            new Repetition(166, 0, 1, 'Directives', null), 
            (new Concatenation('InputFieldDefinition', [163, 'NameWithReserved', 164, 'TypeHint', 165, 166], 'InputFieldDefinition'))->setDefaultId('InputFieldDefinition'), 
            new Terminal(168, 'T_EQUAL', false), 
            new Concatenation(169, ['Value'], null), 
            new Concatenation('__inputFieldDefinitionDefaultValue', [168, 169], null), 
            new Repetition(171, 0, 1, 'Documentation', null), 
            new Repetition(172, 0, 1, 'InputUnionDefinitionBody', null), 
            (new Concatenation('InputUnionDefinition', [171, 'InputUnionDefinitionHead', 172], 'InputUnionDefinition'))->setDefaultId('InputUnionDefinition'), 
            new Terminal(174, 'T_INPUT_UNION', false), 
            new Repetition(175, 0, 1, 'Directives', null), 
            new Concatenation('InputUnionDefinitionHead', [174, 'TypeName', 175], null), 
            new Terminal(177, 'T_EQUAL', false), 
            new Terminal(178, 'T_OR', false), 
            new Repetition(179, 0, 1, 178, null), 
            new Repetition(180, 1, -1, '__inputUnionDefinitionTargets', null), 
            new Concatenation('InputUnionDefinitionBody', [177, 179, 180], null), 
            new Terminal(182, 'T_OR', false), 
            new Concatenation(183, [182, 'TypeName'], null), 
            new Repetition(184, 0, -1, 183, null), 
            new Concatenation('__inputUnionDefinitionTargets', ['TypeName', 184], null), 
            new Repetition(186, 0, 1, 'Documentation', null), 
            new Concatenation(187, ['InterfaceDefinitionBody'], null), 
            (new Concatenation('InterfaceDefinition', [186, 'InterfaceDefinitionHead', 187], 'InterfaceDefinition'))->setDefaultId('InterfaceDefinition'), 
            new Terminal(189, 'T_INTERFACE', false), 
            new Repetition(190, 0, 1, 'TypeArguments', null), 
            new Repetition(191, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(192, 0, 1, 'Directives', null), 
            new Concatenation('InterfaceDefinitionHead', [189, 'TypeName', 190, 191, 192], null), 
            new Terminal(194, 'T_BRACE_OPEN', false), 
            new Repetition(195, 0, 1, '__interfaceFieldDefinitions', null), 
            new Repetition(196, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(197, 'T_BRACE_CLOSE', false), 
            new Concatenation('InterfaceDefinitionBody', [194, 195, 196, 197], null), 
            new Repetition(199, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__interfaceFieldDefinitions', [199], 'FieldDefinitions'), 
            new Repetition(201, 0, 1, 'Documentation', null), 
            new Concatenation(202, ['ObjectDefinitionBody'], null), 
            (new Concatenation('ObjectDefinition', [201, 'ObjectDefinitionHead', 202], 'ObjectDefinition'))->setDefaultId('ObjectDefinition'), 
            new Terminal(204, 'T_TYPE', false), 
            new Repetition(205, 0, 1, 'TypeArguments', null), 
            new Repetition(206, 0, 1, 'TypeDefinitionImplements', null), 
            new Repetition(207, 0, 1, 'Directives', null), 
            new Concatenation('ObjectDefinitionHead', [204, 'TypeName', 205, 206, 207], null), 
            new Terminal(209, 'T_BRACE_OPEN', false), 
            new Repetition(210, 0, 1, '__objectFieldDefinitions', null), 
            new Repetition(211, 0, 1, 'ChildrenDefinitions', null), 
            new Terminal(212, 'T_BRACE_CLOSE', false), 
            new Concatenation('ObjectDefinitionBody', [209, 210, 211, 212], null), 
            new Repetition(214, 0, -1, 'FieldDefinition', null), 
            new Concatenation('__objectFieldDefinitions', [214], 'FieldDefinitions'), 
            new Repetition(216, 0, 1, 'Documentation', null), 
            new Concatenation(217, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarDefinition', [216, 217], 'ScalarDefinition'))->setDefaultId('ScalarDefinition'), 
            new Terminal(219, 'T_SCALAR', false), 
            new Repetition(220, 0, 1, '__scalarExtends', null), 
            new Repetition(221, 0, 1, 'Directives', null), 
            new Concatenation('ScalarDefinitionBody', [219, 'TypeName', 220, 221], null), 
            new Terminal(223, 'T_EXTENDS', false), 
            new Concatenation('__scalarExtends', [223, 'TypeName'], 'Extends'), 
            new Repetition(225, 0, 1, 'Documentation', null), 
            new Concatenation(226, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaDefinition', [225, 226], 'SchemaDefinition'))->setDefaultId('SchemaDefinition'), 
            new Terminal(228, 'T_SCHEMA', false), 
            new Repetition(229, 0, 1, 'TypeName', null), 
            new Terminal(230, 'T_BRACE_OPEN', false), 
            new Repetition(231, 0, -1, '__schemaField', null), 
            new Terminal(232, 'T_BRACE_CLOSE', false), 
            new Concatenation('SchemaDefinitionBody', [228, 229, 230, 231, 232], null), 
            new Repetition(234, 0, 1, 'Documentation', null), 
            new Terminal(235, 'T_COLON', false), 
            new Concatenation('__schemaField', [234, 'NameWithReserved', 235, 'TypeName'], 'SchemaField'), 
            new Repetition(237, 0, 1, 'Documentation', null), 
            new Repetition(238, 0, 1, 'UnionDefinitionBody', null), 
            (new Concatenation('UnionDefinition', [237, 'UnionDefinitionHead', 238], 'UnionDefinition'))->setDefaultId('UnionDefinition'), 
            new Terminal(240, 'T_UNION', false), 
            new Repetition(241, 0, 1, 'Directives', null), 
            new Concatenation('UnionDefinitionHead', [240, 'TypeName', 241], null), 
            new Terminal(243, 'T_EQUAL', false), 
            new Terminal(244, 'T_OR', false), 
            new Repetition(245, 0, 1, 244, null), 
            new Repetition(246, 1, -1, '__unionDefinitionTargets', null), 
            new Concatenation('UnionDefinitionBody', [243, 245, 246], null), 
            new Terminal(248, 'T_OR', false), 
            new Concatenation(249, [248, 'TypeName'], null), 
            new Repetition(250, 0, -1, 249, null), 
            new Concatenation('__unionDefinitionTargets', ['TypeName', 250], null), 
            new Concatenation(252, ['__typeDefinitions'], null), 
            new Alternation('Definition', ['DirectiveDefinition', 'SchemaDefinition', 252], null), 
            new Concatenation(254, ['__typeDefinitions'], null), 
            (new Concatenation('ChildrenDefinitions', [254], 'ChildrenDefinitions'))->setDefaultId('ChildrenDefinitions'), 
            new Concatenation(256, ['UnionDefinition'], null), 
            new Alternation('__typeDefinitions', ['EnumDefinition', 'InputDefinition', 'InputUnionDefinition', 'InterfaceDefinition', 'ObjectDefinition', 'ScalarDefinition', 256], null), 
            new Repetition(258, 0, 1, 'Documentation', null), 
            new Terminal(259, 'T_EXTEND', false), 
            new Concatenation(260, ['__enumExtensionVariants'], null), 
            (new Concatenation('EnumExtension', [258, 259, 260], 'EnumExtension'))->setDefaultId('EnumExtension'), 
            new Concatenation(262, ['EnumDefinitionHead', 'EnumDefinitionBody'], null), 
            new Alternation('__enumExtensionVariants', ['EnumDefinitionHead', 262], null), 
            new Repetition(264, 0, 1, 'Documentation', null), 
            new Terminal(265, 'T_EXTEND', false), 
            new Concatenation(266, ['__inputExtensionVariants'], null), 
            (new Concatenation('InputExtension', [264, 265, 266], 'InputExtension'))->setDefaultId('InputExtension'), 
            new Concatenation(268, ['InputDefinitionHead', 'InputDefinitionBody'], null), 
            new Alternation('__inputExtensionVariants', ['InputDefinitionHead', 268], null), 
            new Repetition(270, 0, 1, 'Documentation', null), 
            new Terminal(271, 'T_EXTEND', false), 
            new Concatenation(272, ['InputUnionDefinitionBody'], null), 
            (new Concatenation('InputUnionExtension', [270, 271, 'InputUnionDefinitionHead', 272], 'InputUnionExtension'))->setDefaultId('InputUnionExtension'), 
            new Repetition(274, 0, 1, 'Documentation', null), 
            new Terminal(275, 'T_EXTEND', false), 
            new Concatenation(276, ['__interfaceExtensionVariants'], null), 
            (new Concatenation('InterfaceExtension', [274, 275, 276], 'InterfaceExtension'))->setDefaultId('InterfaceExtension'), 
            new Concatenation(278, ['InterfaceDefinitionHead', 'InterfaceDefinitionBody'], null), 
            new Alternation('__interfaceExtensionVariants', ['InterfaceDefinitionHead', 278], null), 
            new Repetition(280, 0, 1, 'Documentation', null), 
            new Terminal(281, 'T_EXTEND', false), 
            new Concatenation(282, ['__objectExtensionVariants'], null), 
            (new Concatenation('ObjectExtension', [280, 281, 282], 'ObjectExtension'))->setDefaultId('ObjectExtension'), 
            new Concatenation(284, ['ObjectDefinitionHead', 'ObjectDefinitionBody'], null), 
            new Alternation('__objectExtensionVariants', ['ObjectDefinitionHead', 284], null), 
            new Repetition(286, 0, 1, 'Documentation', null), 
            new Terminal(287, 'T_EXTEND', false), 
            new Concatenation(288, ['ScalarDefinitionBody'], null), 
            (new Concatenation('ScalarExtension', [286, 287, 288], 'ScalarExtension'))->setDefaultId('ScalarExtension'), 
            new Repetition(290, 0, 1, 'Documentation', null), 
            new Terminal(291, 'T_EXTEND', false), 
            new Concatenation(292, ['SchemaDefinitionBody'], null), 
            (new Concatenation('SchemaExtension', [290, 291, 292], 'SchemaExtension'))->setDefaultId('SchemaExtension'), 
            new Repetition(294, 0, 1, 'Documentation', null), 
            new Terminal(295, 'T_EXTEND', false), 
            new Concatenation(296, ['UnionDefinitionBody'], null), 
            (new Concatenation('UnionExtension', [294, 295, 'UnionDefinitionHead', 296], 'UnionExtension'))->setDefaultId('UnionExtension'), 
            new Concatenation(298, ['UnionExtension'], null), 
            new Alternation('Extension', ['EnumExtension', 'InputExtension', 'InputUnionExtension', 'InterfaceExtension', 'ObjectExtension', 'ScalarExtension', 'SchemaExtension', 298], null), 
            new Terminal(300, 'T_COLON', false), 
            new Concatenation(301, ['Value'], null), 
            new Concatenation('ArgumentInvocation', ['NameWithReserved', 300, 301], null), 
            new Repetition(303, 1, -1, 'Directive', null), 
            (new Concatenation('Directives', [303], 'Directives'))->setDefaultId('Directives'), 
            new Terminal(305, 'T_DIRECTIVE_AT', false), 
            new Repetition(306, 0, 1, '__directiveInvocationArguments', null), 
            (new Concatenation('Directive', [305, 'TypeName', 306], 'Directive'))->setDefaultId('Directive'), 
            new Terminal(308, 'T_PARENTHESIS_OPEN', false), 
            new Repetition(309, 0, -1, '__directiveInvocationArgument', null), 
            new Terminal(310, 'T_PARENTHESIS_CLOSE', false), 
            new Concatenation('__directiveInvocationArguments', [308, 309, 310], null), 
            new Concatenation('__directiveInvocationArgument', ['ArgumentInvocation'], 'DirectiveArgument'), 
            new Concatenation(313, ['TypeName'], null), 
            (new Concatenation('TypeInvocation', [313], 'TypeInvocation'))->setDefaultId('TypeInvocation'), 
            new Concatenation('Invocation', ['Directive'], null)
        ], static::PARSER_ROOT_RULE, static::PARSER_DELEGATES);
    }
}
