

"""
The Int scalar type represents a signed 32‐bit numeric non‐fractional value.
Response formats that support a 32‐bit integer or a number type should use that
type to represent this scalar.
"""
scalar Int


"""
The Float scalar type represents signed double‐precision fractional values as
specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
Response formats that support an appropriate double‐precision number type
should use that type to represent this scalar.
"""
scalar Float


"""
The String scalar type represents textual data, represented as UTF‐8 character
sequences. The String type is most often used by GraphQL to represent free‐form
human‐readable text. All response formats must support string representations,
and that representation must be used here.
"""
scalar String


"""
The Boolean scalar type represents `true` or `false`. Response formats should
use a built‐in boolean type if supported; otherwise, they should use their
representation of the integers `1` and `0`.
"""
scalar Boolean


"""
The ID scalar type represents a unique identifier, often used to refetch an
object or as the key for a cache. The ID type is serialized in the same way
as a `String`; however, it is not intended to be human‐readable. While it is
often numeric, it should always serialize as a `String`.
"""
scalar ID


"""
The @deprecated directive is used within the type system definition language to
indicate deprecated portions of a GraphQL service’s schema, such as deprecated
fields on a type or deprecated enum values.
"""
directive @deprecated(reason: String = "No longer supported") on
    | OBJECT
    | INTERFACE
    | FIELD_DEFINITION
    | SCALAR
    | UNION
    | ENUM
    | ENUM_VALUE
    | INPUT_OBJECT
    | INPUT_FIELD_DEFINITION


"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments,
and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip(if: Boolean!) on
    | FIELD
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT


"""
The @include directive may be provided for fields, fragment spreads, and inline
fragments, and allows for conditional inclusion during execution as described
by the if argument.
"""
directive @include(if: Boolean!) on
    | FIELD
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT
