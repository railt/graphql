
/**
 * --------------------------------------------------------------------------
 *  Type System Definitions
 * --------------------------------------------------------------------------
 *
 * The GraphQL Type system describes the capabilities of a GraphQL server
 * and is used to determine if a query is valid. The type system also
 * describes the input types of query variables to determine if values
 * provided at runtime are valid.
 *
 * The fundamental unit of any GraphQL Schema is the type. There are six
 * kinds of named type definitions in GraphQL, and two wrapping types.
 *
 * The most basic type is a Scalar. A scalar represents a primitive value,
 * like a string or an integer. Oftentimes, the possible responses for a
 * scalar field are enumerable. GraphQL offers an Enum type in those cases,
 * where the type specifies the space of valid responses.
 *
 * Scalars and Enums form the leaves in response trees; the intermediate
 * levels are Object types, which define a set of fields, where each field
 * is another type in the system, allowing the definition of arbitrary
 * type hierarchies.
 *
 * GraphQL supports two abstract types: interfaces and unions.
 *
 * An Interface defines a list of fields; Object types that implement
 * that interface are guaranteed to implement those fields. Whenever the
 * type system claims it will return an interface, it will return a valid
 * implementing type.
 *
 * A Union defines a list of possible types; similar to interfaces,
 * whenever the type system claims a union will be returned, one of the
 * possible types will be returned.
 *
 * Finally, oftentimes it is useful to provide complex structs as inputs
 * to GraphQL field arguments or variables; the Input Object type allows
 * the schema to define exactly what data is expected.
 *
 * @see https://graphql.github.io/graphql-spec/draft/#TypeDefinition
 *
 */

%include definitions/schema
%include definitions/directive

%include definitions/argument
%include definitions/enum-value
%include definitions/field
%include definitions/input-field

%include definitions/type/enum
%include definitions/type/input
%include definitions/type/interface
%include definitions/type/object
%include definitions/type/scalar
%include definitions/type/union

TypeSystemDefinition
  : SchemaDefinition()
  | DirectiveDefinition()
  | TypeDefinition()
  ;

TypeDefinition
  : ScalarTypeDefinition()
  | ObjectTypeDefinition()
  | InterfaceTypeDefinition()
  | UnionTypeDefinition()
  | EnumTypeDefinition()
  | InputObjectTypeDefinition()
  ;
