
// Default type name

TypeName -> {
    return Ast\TypeName::create($children);
}
  : Identifier()
  ;

// Generic type name
GenericTypeName -> {
    return Ast\TypeName::create($children);
}
  : Identifier() GenericArguments()?
  ;

/**
 * Represents a non-namespaced name.
 * Namespaced names are represented using Name nodes.
 */

Identifier -> {
    return Ast\Identifier::create($children);
}
  // Values
  : <T_TRUE>
  | <T_FALSE>
  | <T_NULL>

  // Keywords
  | <T_TYPE>
  | <T_ENUM>
  | <T_UNION>
  | <T_INTERFACE>
  | <T_SCHEMA>
  | <T_SCALAR>
  | <T_DIRECTIVE>
  | <T_INPUT>
  | <T_QUERY>
  | <T_MUTATION>
  | <T_ON>
  | <T_SUBSCRIPTION>
  | <T_EXTEND>
  | <T_EXTENDS>
  | <T_IN>
  | <T_OUT>
  | <T_PUBLIC>
  | <T_PRIVATE>
  | <T_IMPLEMENTS>
  | <T_REPEATABLE>

  // Other
  | <T_NAME>
  ;

GenericArguments
  : ::T_ANGLE_OPEN::
      GenericArgument() (::T_COMMA:: GenericArgument())*
    ::T_ANGLE_CLOSE::
  ;

GenericArgument
  : GenericArgumentTypeOf()
  // TODO: | GenericArgumentInstanceOf()
  ;

GenericArgumentTypeOf
  : (::T_IN:: | ::T_OUT::) Identifier()
  ;

GenericArgumentInstanceOf
  : Identifier() (::T_IMPLEMENTS:: | ::T_EXTENDS::) NamedType()
  ;
