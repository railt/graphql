

/**
 * --------------------------------------------------------------------------
 *  GraphQL Values (Input Values)
 * --------------------------------------------------------------------------
 *
 * Field and directive arguments accept input values of various literal
 * primitives; input values can be scalars, enumeration values, lists, or
 * input objects.
 *
 * If not defined as constant (for example, in DefaultValue), input
 * values can be specified as a variable. List and inputs objects may
 * also contain variables (unless defined to be constant).
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Input-Values
 */

/**
 * --------------------------------------------------------------------------
 *  GraphQL Boolean Values
 * --------------------------------------------------------------------------
 *
 * The two keywords true and false represent the two boolean values.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Boolean-Value
 */

#BooleanValue -> {
    return \Railt\SDL\Ast\Value\BooleanValueNode::parse($children->getValue());
}
  : <T_FALSE>
  | <T_TRUE>
  ;


/**
 * --------------------------------------------------------------------------
 *  GraphQL Boolean Values
 * --------------------------------------------------------------------------
 *
 * Enum values are represented as unquoted names (ex. MOBILE_WEB). It is
 * recommended that Enum values be “all caps”. Enum values are only used
 * in contexts where the precise enumeration type is known. Therefore it’s
 * not necessary to supply an enumeration type name in the literal.
 *
 * @see https://facebook.github.io/graphql/June2018/#EnumValue
 */

#EnumValue -> {
    $first = $children[0];

    switch (true) {
        case $first instanceof \Railt\SDL\Ast\Value\ValueNode:
        case $first instanceof \Railt\SDL\Ast\Name\IdentifierNode:
            return new \Railt\SDL\Ast\Value\EnumValueNode($first->value);

        default:
            throw new \InvalidArgumentException('Unrecognized Enum value type: ' . \gettype($first));
    }
}
  : Identifier()
  ;


/**
 * --------------------------------------------------------------------------
 *  GraphQL List Values
 * --------------------------------------------------------------------------
 *
 * Lists are ordered sequences of values wrapped in square‐brackets [ ].
 * The values of a List literal may be any value literal or variable
 * (ex. [1, 2, 3]).
 *
 * Commas are optional throughout GraphQL so trailing commas are allowed
 * and repeated commas do not represent missing values.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-List-Value
 */

#ListValue -> {
    return new \Railt\SDL\Ast\Value\ListValueNode($children[0]);
}
  : ::T_BRACKET_OPEN::
      ListValues()
    ::T_BRACKET_CLOSE::
  ;

#ListValues -> {
    return new \Railt\SDL\Ast\Generic\ValueCollection($children);
}
  : (Value() ::T_COMMA::?)*
  ;

/**
 * --------------------------------------------------------------------------
 *  GraphQL Null Values
 * --------------------------------------------------------------------------
 *
 * Null values are represented as the keyword null.
 *
 * GraphQL has two semantically different ways to represent the lack
 * of a value:
 *     - Explicitly providing the literal value: null.
 *     - Implicitly not providing a value at all.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Null-Value
 */

#NullValue -> {
    return new \Railt\SDL\Ast\Value\NullValueNode();
}
  : ::T_NULL::
  ;


/**
 * --------------------------------------------------------------------------
 *  GraphQL Int Value
 * --------------------------------------------------------------------------
 *
 * An Int number is specified without a decimal point or exponent (ex. 1).
 *
 * @see https://graphql.github.io/graphql-spec/June2018/#sec-Int-Value
 */

#IntValue -> {
    return \Railt\SDL\Ast\Value\IntValueNode::parse($children->getValue());
}
  : <T_INT>
  ;

/**
 * --------------------------------------------------------------------------
 *  GraphQL Float Value
 * --------------------------------------------------------------------------
 *
 * A Float number includes either a decimal point (ex. 1.0) or an exponent
 * (ex. 1e50) or both (ex. 6.0221413e23).
 *
 * @see https://graphql.github.io/graphql-spec/June2018/#sec-Float-Value
 */

#FloatValue -> {
    return \Railt\SDL\Ast\Value\FloatValueNode::parse($children->getValue());
}
  : <T_FLOAT> | <T_FLOAT_EXP>
  ;



/**
 * --------------------------------------------------------------------------
 *  GraphQL Object Values (Input Object Values)
 * --------------------------------------------------------------------------
 *
 * Input object literal values are unordered lists of keyed input values
 * wrapped in curly‐braces { }. The values of an object literal may be any
 * input value literal or variable (ex.  { name: "Hello world", score: 1.0 }).
 * We refer to literal representation of input objects as “object literals.”
 *
 * NOTE: Input object fields are unordered
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Input-Object-Values
 */

#ObjectValue -> {
    return new \Railt\SDL\Ast\Value\ObjectValueNode($children[0]);
}
  : ::T_BRACE_OPEN:: ObjectFields() ::T_BRACE_CLOSE::
  ;

#ObjectFields -> {
    return new \Railt\SDL\Ast\Generic\ObjectFieldCollection($children);
}
  : ObjectField()*
  ;

#ObjectField  -> {
    return new \Railt\SDL\Ast\Value\ObjectFieldNode($children[0], $children[1]);
}
  : Identifier() ::T_COLON:: Value()
    ::T_COMMA::?
  ;


/**
 * --------------------------------------------------------------------------
 *  GraphQL Strings and Block Strings
 * --------------------------------------------------------------------------
 *
 * Strings are sequences of characters wrapped in double‐quotes (").
 * (ex. "Hello World"). White space and other otherwise‐ignored characters
 * are significant within a string value.
 *
 * Block strings are sequences of characters wrapped in triple‐quotes
 * ("""). White space, line terminators, quote, and backslash characters
 * may all be used unescaped to enable verbatim text.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-String-Value
 */

#StringValue
  : BlockStringValue()
  | InlineStringValue()
  ;

#BlockStringValue -> {
    return \Railt\SDL\Ast\Value\StringValueNode::parse($children[0]->getValue(), true);
}
  : <T_BLOCK_STRING>
  ;

#InlineStringValue -> {
    return \Railt\SDL\Ast\Value\StringValueNode::parse($children[0]->getValue(), false);
}
  : <T_STRING>
  ;

/**
 * --------------------------------------------------------------------------
 *  GraphQL Variables
 * --------------------------------------------------------------------------
 *
 * A GraphQL query can be parameterized with variables, maximizing query
 * reuse, and avoiding costly string building in clients at runtime.
 *
 * If not defined as constant (for example, in DefaultValue), a Variable
 * can be supplied for an input value.
 *
 * Variables must be defined at the top of an operation and are in scope
 * throughout the execution of that operation.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Language.Variables
 */

#Variable -> {
    return new \Railt\SDL\Ast\Value\VariableNode($children[0]);
}
  : VariableName()
  ;

#VariableName -> {
    return new \Railt\SDL\Ast\Name\IdentifierNode($children[0]->getValue());
}
  : <T_VARIABLE>
  ;

#ConstValue
  : IntValue()
  | FloatValue()
  | StringValue()
  | BooleanValue()
  | NullValue()
  | EnumValue()
  ;

#Value
  : Variable()
  | ConstValue()
  | ListValue()
  | ObjectValue()
  ;
