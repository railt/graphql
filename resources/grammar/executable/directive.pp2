

/**
 * --------------------------------------------------------------------------
 *  GraphQL Directives
 * --------------------------------------------------------------------------
 *
 * Directives provide a way to describe alternate runtime execution and
 * type validation behavior in a GraphQL document.
 *
 * In some cases, you need to provide options to alter GraphQLâ€™s execution
 * behavior in ways field arguments will not suffice, such as conditionally
 * including or skipping a field. Directives provide this by describing
 * additional information to the executor.
 *
 * Directives have a name along with a list of arguments which may accept
 * values of any input type.
 *
 * Directives can be used to describe additional information for types,
 * fields, fragments and operations.
 *
 * As future versions of GraphQL adopt new configurable execution
 * capabilities, they may be exposed via directives.
 *
 * @see https://facebook.github.io/graphql/June2018/#sec-Language.Directives
 */

Directives -> {
    return new \Railt\SDL\Ast\Generic\DirectiveCollection($children);
}
  : Directive()+
  ;

Directive -> {
    $directive = new \Railt\SDL\Ast\Executable\DirectiveNode($children[0]);

    if (isset($children[1])) {
        $directive->arguments = $children[1];
    }

    return $directive;
}
  : ::T_DIRECTIVE_AT:: TypeName() Arguments()?
  ;
