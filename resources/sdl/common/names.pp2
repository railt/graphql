//
// Any name without reserved keywords.
//
NameWithoutReserved
  : <T_NAME>
  ;

//
// Any name includes reserved keywords.
//
NameWithReserved
  : NameExceptValues()
  | <T_TRUE>
  | <T_FALSE>
  | <T_NULL>
  ;

//
// Any name includes reserved keywords but except values: NULL, TRUE and FALSE.
//
NameExceptValues
  : NameWithoutReserved()
  // Instructions
  | <T_NAMESPACE>
  | <T_IMPORT>
  | <T_LET>
  | <T_CONST>
  // Common
  | <T_EXTEND>
  | <T_EXTENDS>
  | <T_IMPLEMENTS>
  | <T_ON>
  // GraphQL Partitions
  | <T_FRAGMENT>
  // SDL Definitions
  | <T_TYPE>
  | <T_ENUM>
  | <T_UNION>
  | <T_INPUT_UNION>
  | <T_INTERFACE>
  | <T_SCHEMA>
  | <T_SCALAR>
  | <T_DIRECTIVE>
  | <T_INPUT>
  ;


//
// Fully qualified name is an unambiguous name that specifies
// which object, function, or variable a call refers to without
// regard to the context of the call.
//
#TypeName
  : __typeNameAtRoot()? NameWithReserved()
    (::T_NAMESPACE_SEPARATOR:: NameWithReserved())*
  ;

__typeNameAtRoot
  : ::T_NAMESPACE_SEPARATOR::
    #AtRoot
  ;

//
#VariableName
  : <T_VARIABLE>
  ;

//
// An auxiliary name, which is only available for
// fields, arguments and etc. dependencies of type definitions.
//
#ConstantName
  : NameWithReserved()
  ;

EnumValueConstantName
  : NameExceptValues()
    #ConstantName
  ;
